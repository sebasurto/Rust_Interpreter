Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARROW
    AS
    ASYNC
    AT
    AWAIT
    BREAK
    CASE
    COLON
    COMMENS
    CONTINUE
    CRATE
    DOUBLE_COLON
    DOUBLE_QUOTE
    DYN
    ENUM
    EXTERN
    FOR
    IMPL
    IN
    LOOP
    MINUS
    MOD
    MOVE
    NAME_FUNCTION
    PUB
    REF
    RETURN
    SELF
    STATIC
    STRUCT
    SUPER
    TRAIT
    TYPE
    UNION
    UNSAFE
    USE
    WHERE
    WHILE
    sELF

Grammar

Rule 0     S' -> principal
Rule 1     principal -> body
Rule 2     principal -> body principal
Rule 3     body -> code_block
Rule 4     body -> control_structure
Rule 5     control_structure -> if_statement
Rule 6     control_structure -> match_statement
Rule 7     control_structure -> fn_statement
Rule 8     match_body_line -> match_cases
Rule 9     match_pattern -> value
Rule 10    match_pattern -> value PIPE match_pattern
Rule 11    match_body -> match_body_line
Rule 12    match_body -> match_body_line match_body match_case_default
Rule 13    match_statement -> MATCH ID LBRACE match_body RBRACE
Rule 14    match_cases -> match_case
Rule 15    match_cases -> match_case match_cases
Rule 16    match_case -> match_pattern FAT_ARROW block_function
Rule 17    match_case_default -> UNDERSCORE FAT_ARROW block_function
Rule 18    if_statement -> IF LPAREN comparison_value RPAREN block_function
Rule 19    if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 20    if_statement -> IF function comparison value block_function
Rule 21    if_statement -> IF function comparison value block_function else_if_statement
Rule 22    if_statement -> IF LET EQUAL value block_function
Rule 23    if_statement -> IF LET EQUAL value else_if_statement
Rule 24    fn_statement -> FN MAIN LPAREN RPAREN block_function
Rule 25    else_if_statement -> ELSE block_function
Rule 26    else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 27    else_if_statement -> ELSE IF function comparison value block_function else_if_statement
Rule 28    block_function -> LBRACE RBRACE
Rule 29    block_function -> LBRACE code_block RBRACE
Rule 30    code_block -> code_line
Rule 31    code_block -> code_line code_block
Rule 32    code_line -> code SEMICOLON
Rule 33    code -> function
Rule 34    code -> comparison_production
Rule 35    code -> value
Rule 36    code -> logic_value
Rule 37    code -> statement
Rule 38    function -> ID LPAREN RPAREN
Rule 39    function -> ID LPAREN value RPAREN
Rule 40    function -> ID LPAREN arguments_production RPAREN
Rule 41    function -> ID DOT ID LPAREN RPAREN
Rule 42    function -> ID DOT ID LPAREN value RPAREN
Rule 43    function -> ID DOT ID LPAREN arguments_production RPAREN
Rule 44    print -> PRINT LPAREN value RPAREN
Rule 45    print -> PRINT LPAREN STRING DOT ID RPAREN
Rule 46    statement -> LET ID EQUAL value
Rule 47    statement -> LET MUT ID EQUAL value
Rule 48    statement -> CONST ID EQUAL value
Rule 49    statement -> ID EQUAL ID
Rule 50    statement -> ID EQUAL aritmetic_operation_production
Rule 51    statement -> LET ID EQUAL data_structures
Rule 52    statement -> ID EQUAL data_structures
Rule 53    statement -> LET MUT ID EQUAL data_structures
Rule 54    data_structures -> tuple
Rule 55    data_structures -> array
Rule 56    array -> LBRACKET array_elements RBRACKET
Rule 57    array_elements -> INT
Rule 58    array_elements -> array_elements COMMA INT
Rule 59    tuple -> LPAREN arguments_production RPAREN
Rule 60    arguments_production -> value
Rule 61    arguments_production -> value COMMA arguments_production
Rule 62    comparison_production -> comparison_value
Rule 63    comparison_production -> comparison_value comparison comparison_production
Rule 64    comparison_value -> value comparison value
Rule 65    logic_value -> value logic_operator value
Rule 66    aritmetic_operation_production -> aritmetic_operation
Rule 67    aritmetic_operation_production -> value aritmetic_operator aritmetic_operation
Rule 68    aritmetic_operation -> value aritmetic_operator value
Rule 69    aritmetic_operator -> PLUS
Rule 70    aritmetic_operator -> MINUS_OPERATOR
Rule 71    aritmetic_operator -> TIMES
Rule 72    aritmetic_operator -> DIVIDE
Rule 73    aritmetic_operator -> MODULE
Rule 74    comparison -> LESS_THAN
Rule 75    comparison -> GREATER_THAN
Rule 76    comparison -> LESS_THAN_EQUAL
Rule 77    comparison -> GREATER_THAN_EQUAL
Rule 78    comparison -> NOT_EQUAL
Rule 79    comparison -> EQUAL_EQUAL
Rule 80    value -> INT
Rule 81    value -> FLOAT
Rule 82    value -> STRING
Rule 83    value -> CHAR
Rule 84    value -> BOOL
Rule 85    value -> ID
Rule 86    value -> array
Rule 87    logic_operator -> AND
Rule 88    logic_operator -> OR
Rule 89    logic_operator -> NOT

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 87
ARROW                : 
AS                   : 
ASYNC                : 
AT                   : 
AWAIT                : 
BOOL                 : 84
BREAK                : 
CASE                 : 
CHAR                 : 83
COLON                : 
COMMA                : 58 61
COMMENS              : 
CONST                : 48
CONTINUE             : 
CRATE                : 
DIVIDE               : 72
DOT                  : 41 42 43 45
DOUBLE_COLON         : 
DOUBLE_QUOTE         : 
DYN                  : 
ELSE                 : 25 26 27
ENUM                 : 
EQUAL                : 22 23 46 47 48 49 50 51 52 53
EQUAL_EQUAL          : 79
EXTERN               : 
FAT_ARROW            : 16 17
FLOAT                : 81
FN                   : 24
FOR                  : 
GREATER_THAN         : 75
GREATER_THAN_EQUAL   : 77
ID                   : 13 38 39 40 41 41 42 42 43 43 45 46 47 48 49 49 50 51 52 53 85
IF                   : 18 19 20 21 22 23 26 27
IMPL                 : 
IN                   : 
INT                  : 57 58 80
LBRACE               : 13 28 29
LBRACKET             : 56
LESS_THAN            : 74
LESS_THAN_EQUAL      : 76
LET                  : 22 23 46 47 51 53
LOOP                 : 
LPAREN               : 18 19 24 26 38 39 40 41 42 43 44 45 59
MAIN                 : 24
MATCH                : 13
MINUS                : 
MINUS_OPERATOR       : 70
MOD                  : 
MODULE               : 73
MOVE                 : 
MUT                  : 47 53
NAME_FUNCTION        : 
NOT                  : 89
NOT_EQUAL            : 78
OR                   : 88
PIPE                 : 10
PLUS                 : 69
PRINT                : 44 45
PUB                  : 
RBRACE               : 13 28 29
RBRACKET             : 56
REF                  : 
RETURN               : 
RPAREN               : 18 19 24 26 38 39 40 41 42 43 44 45 59
SELF                 : 
SEMICOLON            : 32
STATIC               : 
STRING               : 45 82
STRUCT               : 
SUPER                : 
TIMES                : 71
TRAIT                : 
TYPE                 : 
UNDERSCORE           : 17
UNION                : 
UNSAFE               : 
USE                  : 
WHERE                : 
WHILE                : 
error                : 
sELF                 : 

Nonterminals, with rules where they appear

arguments_production : 40 43 59 61
aritmetic_operation  : 66 67
aritmetic_operation_production : 50
aritmetic_operator   : 67 68
array                : 55 86
array_elements       : 56 58
block_function       : 16 17 18 19 20 21 22 24 25 26 27
body                 : 1 2
code                 : 32
code_block           : 3 29 31
code_line            : 30 31
comparison           : 20 21 27 63 64
comparison_production : 34 63
comparison_value     : 18 19 26 62 63
control_structure    : 4
data_structures      : 51 52 53
else_if_statement    : 19 21 23 26 27
fn_statement         : 7
function             : 20 21 27 33
if_statement         : 5
logic_operator       : 65
logic_value          : 36
match_body           : 12 13
match_body_line      : 11 12
match_case           : 14 15
match_case_default   : 12
match_cases          : 8 15
match_pattern        : 10 16
match_statement      : 6
principal            : 2 0
print                : 
statement            : 37
tuple                : 54
value                : 9 10 20 21 22 23 27 35 39 42 44 46 47 48 60 61 64 64 65 65 67 68 68

Parsing method: LALR

state 0

    (0) S' -> . principal
    (1) principal -> . body
    (2) principal -> . body principal
    (3) body -> . code_block
    (4) body -> . control_structure
    (30) code_block -> . code_line
    (31) code_block -> . code_line code_block
    (5) control_structure -> . if_statement
    (6) control_structure -> . match_statement
    (7) control_structure -> . fn_statement
    (32) code_line -> . code SEMICOLON
    (18) if_statement -> . IF LPAREN comparison_value RPAREN block_function
    (19) if_statement -> . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (20) if_statement -> . IF function comparison value block_function
    (21) if_statement -> . IF function comparison value block_function else_if_statement
    (22) if_statement -> . IF LET EQUAL value block_function
    (23) if_statement -> . IF LET EQUAL value else_if_statement
    (13) match_statement -> . MATCH ID LBRACE match_body RBRACE
    (24) fn_statement -> . FN MAIN LPAREN RPAREN block_function
    (33) code -> . function
    (34) code -> . comparison_production
    (35) code -> . value
    (36) code -> . logic_value
    (37) code -> . statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (62) comparison_production -> . comparison_value
    (63) comparison_production -> . comparison_value comparison comparison_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (65) logic_value -> . value logic_operator value
    (46) statement -> . LET ID EQUAL value
    (47) statement -> . LET MUT ID EQUAL value
    (48) statement -> . CONST ID EQUAL value
    (49) statement -> . ID EQUAL ID
    (50) statement -> . ID EQUAL aritmetic_operation_production
    (51) statement -> . LET ID EQUAL data_structures
    (52) statement -> . ID EQUAL data_structures
    (53) statement -> . LET MUT ID EQUAL data_structures
    (64) comparison_value -> . value comparison value
    (56) array -> . LBRACKET array_elements RBRACKET

    IF              shift and go to state 10
    MATCH           shift and go to state 15
    FN              shift and go to state 17
    ID              shift and go to state 16
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    LET             shift and go to state 14
    CONST           shift and go to state 27
    LBRACKET        shift and go to state 28

    principal                      shift and go to state 1
    body                           shift and go to state 2
    code_block                     shift and go to state 3
    control_structure              shift and go to state 4
    code_line                      shift and go to state 5
    if_statement                   shift and go to state 6
    match_statement                shift and go to state 7
    fn_statement                   shift and go to state 8
    code                           shift and go to state 9
    comparison_value               shift and go to state 11
    function                       shift and go to state 12
    value                          shift and go to state 13
    comparison_production          shift and go to state 18
    logic_value                    shift and go to state 19
    statement                      shift and go to state 20
    array                          shift and go to state 26

state 1

    (0) S' -> principal .



state 2

    (1) principal -> body .
    (2) principal -> body . principal
    (1) principal -> . body
    (2) principal -> . body principal
    (3) body -> . code_block
    (4) body -> . control_structure
    (30) code_block -> . code_line
    (31) code_block -> . code_line code_block
    (5) control_structure -> . if_statement
    (6) control_structure -> . match_statement
    (7) control_structure -> . fn_statement
    (32) code_line -> . code SEMICOLON
    (18) if_statement -> . IF LPAREN comparison_value RPAREN block_function
    (19) if_statement -> . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (20) if_statement -> . IF function comparison value block_function
    (21) if_statement -> . IF function comparison value block_function else_if_statement
    (22) if_statement -> . IF LET EQUAL value block_function
    (23) if_statement -> . IF LET EQUAL value else_if_statement
    (13) match_statement -> . MATCH ID LBRACE match_body RBRACE
    (24) fn_statement -> . FN MAIN LPAREN RPAREN block_function
    (33) code -> . function
    (34) code -> . comparison_production
    (35) code -> . value
    (36) code -> . logic_value
    (37) code -> . statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (62) comparison_production -> . comparison_value
    (63) comparison_production -> . comparison_value comparison comparison_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (65) logic_value -> . value logic_operator value
    (46) statement -> . LET ID EQUAL value
    (47) statement -> . LET MUT ID EQUAL value
    (48) statement -> . CONST ID EQUAL value
    (49) statement -> . ID EQUAL ID
    (50) statement -> . ID EQUAL aritmetic_operation_production
    (51) statement -> . LET ID EQUAL data_structures
    (52) statement -> . ID EQUAL data_structures
    (53) statement -> . LET MUT ID EQUAL data_structures
    (64) comparison_value -> . value comparison value
    (56) array -> . LBRACKET array_elements RBRACKET

    $end            reduce using rule 1 (principal -> body .)
    IF              shift and go to state 10
    MATCH           shift and go to state 15
    FN              shift and go to state 17
    ID              shift and go to state 16
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    LET             shift and go to state 14
    CONST           shift and go to state 27
    LBRACKET        shift and go to state 28

    body                           shift and go to state 2
    principal                      shift and go to state 29
    code_block                     shift and go to state 3
    control_structure              shift and go to state 4
    code_line                      shift and go to state 5
    if_statement                   shift and go to state 6
    match_statement                shift and go to state 7
    fn_statement                   shift and go to state 8
    code                           shift and go to state 9
    comparison_value               shift and go to state 11
    function                       shift and go to state 12
    value                          shift and go to state 13
    comparison_production          shift and go to state 18
    logic_value                    shift and go to state 19
    statement                      shift and go to state 20
    array                          shift and go to state 26

state 3

    (3) body -> code_block .

    IF              reduce using rule 3 (body -> code_block .)
    MATCH           reduce using rule 3 (body -> code_block .)
    FN              reduce using rule 3 (body -> code_block .)
    ID              reduce using rule 3 (body -> code_block .)
    INT             reduce using rule 3 (body -> code_block .)
    FLOAT           reduce using rule 3 (body -> code_block .)
    STRING          reduce using rule 3 (body -> code_block .)
    CHAR            reduce using rule 3 (body -> code_block .)
    BOOL            reduce using rule 3 (body -> code_block .)
    LET             reduce using rule 3 (body -> code_block .)
    CONST           reduce using rule 3 (body -> code_block .)
    LBRACKET        reduce using rule 3 (body -> code_block .)
    $end            reduce using rule 3 (body -> code_block .)


state 4

    (4) body -> control_structure .

    IF              reduce using rule 4 (body -> control_structure .)
    MATCH           reduce using rule 4 (body -> control_structure .)
    FN              reduce using rule 4 (body -> control_structure .)
    ID              reduce using rule 4 (body -> control_structure .)
    INT             reduce using rule 4 (body -> control_structure .)
    FLOAT           reduce using rule 4 (body -> control_structure .)
    STRING          reduce using rule 4 (body -> control_structure .)
    CHAR            reduce using rule 4 (body -> control_structure .)
    BOOL            reduce using rule 4 (body -> control_structure .)
    LET             reduce using rule 4 (body -> control_structure .)
    CONST           reduce using rule 4 (body -> control_structure .)
    LBRACKET        reduce using rule 4 (body -> control_structure .)
    $end            reduce using rule 4 (body -> control_structure .)


state 5

    (30) code_block -> code_line .
    (31) code_block -> code_line . code_block
    (30) code_block -> . code_line
    (31) code_block -> . code_line code_block
    (32) code_line -> . code SEMICOLON
    (33) code -> . function
    (34) code -> . comparison_production
    (35) code -> . value
    (36) code -> . logic_value
    (37) code -> . statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (62) comparison_production -> . comparison_value
    (63) comparison_production -> . comparison_value comparison comparison_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (65) logic_value -> . value logic_operator value
    (46) statement -> . LET ID EQUAL value
    (47) statement -> . LET MUT ID EQUAL value
    (48) statement -> . CONST ID EQUAL value
    (49) statement -> . ID EQUAL ID
    (50) statement -> . ID EQUAL aritmetic_operation_production
    (51) statement -> . LET ID EQUAL data_structures
    (52) statement -> . ID EQUAL data_structures
    (53) statement -> . LET MUT ID EQUAL data_structures
    (64) comparison_value -> . value comparison value
    (56) array -> . LBRACKET array_elements RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    IF              reduce using rule 30 (code_block -> code_line .)
    MATCH           reduce using rule 30 (code_block -> code_line .)
    FN              reduce using rule 30 (code_block -> code_line .)
    $end            reduce using rule 30 (code_block -> code_line .)
    RBRACE          reduce using rule 30 (code_block -> code_line .)
    ID              shift and go to state 16
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    LET             shift and go to state 14
    CONST           shift and go to state 27
    LBRACKET        shift and go to state 28

  ! ID              [ reduce using rule 30 (code_block -> code_line .) ]
  ! INT             [ reduce using rule 30 (code_block -> code_line .) ]
  ! FLOAT           [ reduce using rule 30 (code_block -> code_line .) ]
  ! STRING          [ reduce using rule 30 (code_block -> code_line .) ]
  ! CHAR            [ reduce using rule 30 (code_block -> code_line .) ]
  ! BOOL            [ reduce using rule 30 (code_block -> code_line .) ]
  ! LET             [ reduce using rule 30 (code_block -> code_line .) ]
  ! CONST           [ reduce using rule 30 (code_block -> code_line .) ]
  ! LBRACKET        [ reduce using rule 30 (code_block -> code_line .) ]

    code_line                      shift and go to state 5
    code_block                     shift and go to state 30
    code                           shift and go to state 9
    function                       shift and go to state 12
    comparison_production          shift and go to state 18
    value                          shift and go to state 13
    logic_value                    shift and go to state 19
    statement                      shift and go to state 20
    comparison_value               shift and go to state 11
    array                          shift and go to state 26

state 6

    (5) control_structure -> if_statement .

    IF              reduce using rule 5 (control_structure -> if_statement .)
    MATCH           reduce using rule 5 (control_structure -> if_statement .)
    FN              reduce using rule 5 (control_structure -> if_statement .)
    ID              reduce using rule 5 (control_structure -> if_statement .)
    INT             reduce using rule 5 (control_structure -> if_statement .)
    FLOAT           reduce using rule 5 (control_structure -> if_statement .)
    STRING          reduce using rule 5 (control_structure -> if_statement .)
    CHAR            reduce using rule 5 (control_structure -> if_statement .)
    BOOL            reduce using rule 5 (control_structure -> if_statement .)
    LET             reduce using rule 5 (control_structure -> if_statement .)
    CONST           reduce using rule 5 (control_structure -> if_statement .)
    LBRACKET        reduce using rule 5 (control_structure -> if_statement .)
    $end            reduce using rule 5 (control_structure -> if_statement .)


state 7

    (6) control_structure -> match_statement .

    IF              reduce using rule 6 (control_structure -> match_statement .)
    MATCH           reduce using rule 6 (control_structure -> match_statement .)
    FN              reduce using rule 6 (control_structure -> match_statement .)
    ID              reduce using rule 6 (control_structure -> match_statement .)
    INT             reduce using rule 6 (control_structure -> match_statement .)
    FLOAT           reduce using rule 6 (control_structure -> match_statement .)
    STRING          reduce using rule 6 (control_structure -> match_statement .)
    CHAR            reduce using rule 6 (control_structure -> match_statement .)
    BOOL            reduce using rule 6 (control_structure -> match_statement .)
    LET             reduce using rule 6 (control_structure -> match_statement .)
    CONST           reduce using rule 6 (control_structure -> match_statement .)
    LBRACKET        reduce using rule 6 (control_structure -> match_statement .)
    $end            reduce using rule 6 (control_structure -> match_statement .)


state 8

    (7) control_structure -> fn_statement .

    IF              reduce using rule 7 (control_structure -> fn_statement .)
    MATCH           reduce using rule 7 (control_structure -> fn_statement .)
    FN              reduce using rule 7 (control_structure -> fn_statement .)
    ID              reduce using rule 7 (control_structure -> fn_statement .)
    INT             reduce using rule 7 (control_structure -> fn_statement .)
    FLOAT           reduce using rule 7 (control_structure -> fn_statement .)
    STRING          reduce using rule 7 (control_structure -> fn_statement .)
    CHAR            reduce using rule 7 (control_structure -> fn_statement .)
    BOOL            reduce using rule 7 (control_structure -> fn_statement .)
    LET             reduce using rule 7 (control_structure -> fn_statement .)
    CONST           reduce using rule 7 (control_structure -> fn_statement .)
    LBRACKET        reduce using rule 7 (control_structure -> fn_statement .)
    $end            reduce using rule 7 (control_structure -> fn_statement .)


state 9

    (32) code_line -> code . SEMICOLON

    SEMICOLON       shift and go to state 31


state 10

    (18) if_statement -> IF . LPAREN comparison_value RPAREN block_function
    (19) if_statement -> IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (20) if_statement -> IF . function comparison value block_function
    (21) if_statement -> IF . function comparison value block_function else_if_statement
    (22) if_statement -> IF . LET EQUAL value block_function
    (23) if_statement -> IF . LET EQUAL value else_if_statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 32
    LET             shift and go to state 34
    ID              shift and go to state 35

    function                       shift and go to state 33

state 11

    (62) comparison_production -> comparison_value .
    (63) comparison_production -> comparison_value . comparison comparison_production
    (74) comparison -> . LESS_THAN
    (75) comparison -> . GREATER_THAN
    (76) comparison -> . LESS_THAN_EQUAL
    (77) comparison -> . GREATER_THAN_EQUAL
    (78) comparison -> . NOT_EQUAL
    (79) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 62 (comparison_production -> comparison_value .)
    LESS_THAN       shift and go to state 37
    GREATER_THAN    shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    NOT_EQUAL       shift and go to state 41
    EQUAL_EQUAL     shift and go to state 42

    comparison                     shift and go to state 36

state 12

    (33) code -> function .

    SEMICOLON       reduce using rule 33 (code -> function .)


state 13

    (35) code -> value .
    (65) logic_value -> value . logic_operator value
    (64) comparison_value -> value . comparison value
    (87) logic_operator -> . AND
    (88) logic_operator -> . OR
    (89) logic_operator -> . NOT
    (74) comparison -> . LESS_THAN
    (75) comparison -> . GREATER_THAN
    (76) comparison -> . LESS_THAN_EQUAL
    (77) comparison -> . GREATER_THAN_EQUAL
    (78) comparison -> . NOT_EQUAL
    (79) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 35 (code -> value .)
    AND             shift and go to state 45
    OR              shift and go to state 46
    NOT             shift and go to state 47
    LESS_THAN       shift and go to state 37
    GREATER_THAN    shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    NOT_EQUAL       shift and go to state 41
    EQUAL_EQUAL     shift and go to state 42

    logic_operator                 shift and go to state 43
    comparison                     shift and go to state 44

state 14

    (46) statement -> LET . ID EQUAL value
    (47) statement -> LET . MUT ID EQUAL value
    (51) statement -> LET . ID EQUAL data_structures
    (53) statement -> LET . MUT ID EQUAL data_structures

    ID              shift and go to state 48
    MUT             shift and go to state 49


state 15

    (13) match_statement -> MATCH . ID LBRACE match_body RBRACE

    ID              shift and go to state 50


state 16

    (38) function -> ID . LPAREN RPAREN
    (39) function -> ID . LPAREN value RPAREN
    (40) function -> ID . LPAREN arguments_production RPAREN
    (41) function -> ID . DOT ID LPAREN RPAREN
    (42) function -> ID . DOT ID LPAREN value RPAREN
    (43) function -> ID . DOT ID LPAREN arguments_production RPAREN
    (85) value -> ID .
    (49) statement -> ID . EQUAL ID
    (50) statement -> ID . EQUAL aritmetic_operation_production
    (52) statement -> ID . EQUAL data_structures

    LPAREN          shift and go to state 51
    DOT             shift and go to state 52
    AND             reduce using rule 85 (value -> ID .)
    OR              reduce using rule 85 (value -> ID .)
    NOT             reduce using rule 85 (value -> ID .)
    LESS_THAN       reduce using rule 85 (value -> ID .)
    GREATER_THAN    reduce using rule 85 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 85 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 85 (value -> ID .)
    NOT_EQUAL       reduce using rule 85 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 85 (value -> ID .)
    SEMICOLON       reduce using rule 85 (value -> ID .)
    EQUAL           shift and go to state 53


state 17

    (24) fn_statement -> FN . MAIN LPAREN RPAREN block_function

    MAIN            shift and go to state 54


state 18

    (34) code -> comparison_production .

    SEMICOLON       reduce using rule 34 (code -> comparison_production .)


state 19

    (36) code -> logic_value .

    SEMICOLON       reduce using rule 36 (code -> logic_value .)


state 20

    (37) code -> statement .

    SEMICOLON       reduce using rule 37 (code -> statement .)


state 21

    (80) value -> INT .

    AND             reduce using rule 80 (value -> INT .)
    OR              reduce using rule 80 (value -> INT .)
    NOT             reduce using rule 80 (value -> INT .)
    LESS_THAN       reduce using rule 80 (value -> INT .)
    GREATER_THAN    reduce using rule 80 (value -> INT .)
    LESS_THAN_EQUAL reduce using rule 80 (value -> INT .)
    GREATER_THAN_EQUAL reduce using rule 80 (value -> INT .)
    NOT_EQUAL       reduce using rule 80 (value -> INT .)
    EQUAL_EQUAL     reduce using rule 80 (value -> INT .)
    SEMICOLON       reduce using rule 80 (value -> INT .)
    RPAREN          reduce using rule 80 (value -> INT .)
    COMMA           reduce using rule 80 (value -> INT .)
    PLUS            reduce using rule 80 (value -> INT .)
    MINUS_OPERATOR  reduce using rule 80 (value -> INT .)
    TIMES           reduce using rule 80 (value -> INT .)
    DIVIDE          reduce using rule 80 (value -> INT .)
    MODULE          reduce using rule 80 (value -> INT .)
    LBRACE          reduce using rule 80 (value -> INT .)
    ELSE            reduce using rule 80 (value -> INT .)
    PIPE            reduce using rule 80 (value -> INT .)
    FAT_ARROW       reduce using rule 80 (value -> INT .)


state 22

    (81) value -> FLOAT .

    AND             reduce using rule 81 (value -> FLOAT .)
    OR              reduce using rule 81 (value -> FLOAT .)
    NOT             reduce using rule 81 (value -> FLOAT .)
    LESS_THAN       reduce using rule 81 (value -> FLOAT .)
    GREATER_THAN    reduce using rule 81 (value -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 81 (value -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 81 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 81 (value -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 81 (value -> FLOAT .)
    SEMICOLON       reduce using rule 81 (value -> FLOAT .)
    RPAREN          reduce using rule 81 (value -> FLOAT .)
    COMMA           reduce using rule 81 (value -> FLOAT .)
    PLUS            reduce using rule 81 (value -> FLOAT .)
    MINUS_OPERATOR  reduce using rule 81 (value -> FLOAT .)
    TIMES           reduce using rule 81 (value -> FLOAT .)
    DIVIDE          reduce using rule 81 (value -> FLOAT .)
    MODULE          reduce using rule 81 (value -> FLOAT .)
    LBRACE          reduce using rule 81 (value -> FLOAT .)
    ELSE            reduce using rule 81 (value -> FLOAT .)
    PIPE            reduce using rule 81 (value -> FLOAT .)
    FAT_ARROW       reduce using rule 81 (value -> FLOAT .)


state 23

    (82) value -> STRING .

    AND             reduce using rule 82 (value -> STRING .)
    OR              reduce using rule 82 (value -> STRING .)
    NOT             reduce using rule 82 (value -> STRING .)
    LESS_THAN       reduce using rule 82 (value -> STRING .)
    GREATER_THAN    reduce using rule 82 (value -> STRING .)
    LESS_THAN_EQUAL reduce using rule 82 (value -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 82 (value -> STRING .)
    NOT_EQUAL       reduce using rule 82 (value -> STRING .)
    EQUAL_EQUAL     reduce using rule 82 (value -> STRING .)
    SEMICOLON       reduce using rule 82 (value -> STRING .)
    RPAREN          reduce using rule 82 (value -> STRING .)
    COMMA           reduce using rule 82 (value -> STRING .)
    PLUS            reduce using rule 82 (value -> STRING .)
    MINUS_OPERATOR  reduce using rule 82 (value -> STRING .)
    TIMES           reduce using rule 82 (value -> STRING .)
    DIVIDE          reduce using rule 82 (value -> STRING .)
    MODULE          reduce using rule 82 (value -> STRING .)
    LBRACE          reduce using rule 82 (value -> STRING .)
    ELSE            reduce using rule 82 (value -> STRING .)
    PIPE            reduce using rule 82 (value -> STRING .)
    FAT_ARROW       reduce using rule 82 (value -> STRING .)


state 24

    (83) value -> CHAR .

    AND             reduce using rule 83 (value -> CHAR .)
    OR              reduce using rule 83 (value -> CHAR .)
    NOT             reduce using rule 83 (value -> CHAR .)
    LESS_THAN       reduce using rule 83 (value -> CHAR .)
    GREATER_THAN    reduce using rule 83 (value -> CHAR .)
    LESS_THAN_EQUAL reduce using rule 83 (value -> CHAR .)
    GREATER_THAN_EQUAL reduce using rule 83 (value -> CHAR .)
    NOT_EQUAL       reduce using rule 83 (value -> CHAR .)
    EQUAL_EQUAL     reduce using rule 83 (value -> CHAR .)
    SEMICOLON       reduce using rule 83 (value -> CHAR .)
    RPAREN          reduce using rule 83 (value -> CHAR .)
    COMMA           reduce using rule 83 (value -> CHAR .)
    PLUS            reduce using rule 83 (value -> CHAR .)
    MINUS_OPERATOR  reduce using rule 83 (value -> CHAR .)
    TIMES           reduce using rule 83 (value -> CHAR .)
    DIVIDE          reduce using rule 83 (value -> CHAR .)
    MODULE          reduce using rule 83 (value -> CHAR .)
    LBRACE          reduce using rule 83 (value -> CHAR .)
    ELSE            reduce using rule 83 (value -> CHAR .)
    PIPE            reduce using rule 83 (value -> CHAR .)
    FAT_ARROW       reduce using rule 83 (value -> CHAR .)


state 25

    (84) value -> BOOL .

    AND             reduce using rule 84 (value -> BOOL .)
    OR              reduce using rule 84 (value -> BOOL .)
    NOT             reduce using rule 84 (value -> BOOL .)
    LESS_THAN       reduce using rule 84 (value -> BOOL .)
    GREATER_THAN    reduce using rule 84 (value -> BOOL .)
    LESS_THAN_EQUAL reduce using rule 84 (value -> BOOL .)
    GREATER_THAN_EQUAL reduce using rule 84 (value -> BOOL .)
    NOT_EQUAL       reduce using rule 84 (value -> BOOL .)
    EQUAL_EQUAL     reduce using rule 84 (value -> BOOL .)
    SEMICOLON       reduce using rule 84 (value -> BOOL .)
    RPAREN          reduce using rule 84 (value -> BOOL .)
    COMMA           reduce using rule 84 (value -> BOOL .)
    PLUS            reduce using rule 84 (value -> BOOL .)
    MINUS_OPERATOR  reduce using rule 84 (value -> BOOL .)
    TIMES           reduce using rule 84 (value -> BOOL .)
    DIVIDE          reduce using rule 84 (value -> BOOL .)
    MODULE          reduce using rule 84 (value -> BOOL .)
    LBRACE          reduce using rule 84 (value -> BOOL .)
    ELSE            reduce using rule 84 (value -> BOOL .)
    PIPE            reduce using rule 84 (value -> BOOL .)
    FAT_ARROW       reduce using rule 84 (value -> BOOL .)


state 26

    (86) value -> array .

    AND             reduce using rule 86 (value -> array .)
    OR              reduce using rule 86 (value -> array .)
    NOT             reduce using rule 86 (value -> array .)
    LESS_THAN       reduce using rule 86 (value -> array .)
    GREATER_THAN    reduce using rule 86 (value -> array .)
    LESS_THAN_EQUAL reduce using rule 86 (value -> array .)
    GREATER_THAN_EQUAL reduce using rule 86 (value -> array .)
    NOT_EQUAL       reduce using rule 86 (value -> array .)
    EQUAL_EQUAL     reduce using rule 86 (value -> array .)
    SEMICOLON       reduce using rule 86 (value -> array .)
    RPAREN          reduce using rule 86 (value -> array .)
    COMMA           reduce using rule 86 (value -> array .)
    LBRACE          reduce using rule 86 (value -> array .)
    ELSE            reduce using rule 86 (value -> array .)
    PIPE            reduce using rule 86 (value -> array .)
    FAT_ARROW       reduce using rule 86 (value -> array .)
    PLUS            reduce using rule 86 (value -> array .)
    MINUS_OPERATOR  reduce using rule 86 (value -> array .)
    TIMES           reduce using rule 86 (value -> array .)
    DIVIDE          reduce using rule 86 (value -> array .)
    MODULE          reduce using rule 86 (value -> array .)


state 27

    (48) statement -> CONST . ID EQUAL value

    ID              shift and go to state 55


state 28

    (56) array -> LBRACKET . array_elements RBRACKET
    (57) array_elements -> . INT
    (58) array_elements -> . array_elements COMMA INT

    INT             shift and go to state 57

    array_elements                 shift and go to state 56

state 29

    (2) principal -> body principal .

    $end            reduce using rule 2 (principal -> body principal .)


state 30

    (31) code_block -> code_line code_block .

    IF              reduce using rule 31 (code_block -> code_line code_block .)
    MATCH           reduce using rule 31 (code_block -> code_line code_block .)
    FN              reduce using rule 31 (code_block -> code_line code_block .)
    ID              reduce using rule 31 (code_block -> code_line code_block .)
    INT             reduce using rule 31 (code_block -> code_line code_block .)
    FLOAT           reduce using rule 31 (code_block -> code_line code_block .)
    STRING          reduce using rule 31 (code_block -> code_line code_block .)
    CHAR            reduce using rule 31 (code_block -> code_line code_block .)
    BOOL            reduce using rule 31 (code_block -> code_line code_block .)
    LET             reduce using rule 31 (code_block -> code_line code_block .)
    CONST           reduce using rule 31 (code_block -> code_line code_block .)
    LBRACKET        reduce using rule 31 (code_block -> code_line code_block .)
    $end            reduce using rule 31 (code_block -> code_line code_block .)
    RBRACE          reduce using rule 31 (code_block -> code_line code_block .)


state 31

    (32) code_line -> code SEMICOLON .

    ID              reduce using rule 32 (code_line -> code SEMICOLON .)
    INT             reduce using rule 32 (code_line -> code SEMICOLON .)
    FLOAT           reduce using rule 32 (code_line -> code SEMICOLON .)
    STRING          reduce using rule 32 (code_line -> code SEMICOLON .)
    CHAR            reduce using rule 32 (code_line -> code SEMICOLON .)
    BOOL            reduce using rule 32 (code_line -> code SEMICOLON .)
    LET             reduce using rule 32 (code_line -> code SEMICOLON .)
    CONST           reduce using rule 32 (code_line -> code SEMICOLON .)
    LBRACKET        reduce using rule 32 (code_line -> code SEMICOLON .)
    IF              reduce using rule 32 (code_line -> code SEMICOLON .)
    MATCH           reduce using rule 32 (code_line -> code SEMICOLON .)
    FN              reduce using rule 32 (code_line -> code SEMICOLON .)
    $end            reduce using rule 32 (code_line -> code SEMICOLON .)
    RBRACE          reduce using rule 32 (code_line -> code SEMICOLON .)


state 32

    (18) if_statement -> IF LPAREN . comparison_value RPAREN block_function
    (19) if_statement -> IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (64) comparison_value -> . value comparison value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    comparison_value               shift and go to state 58
    value                          shift and go to state 59
    array                          shift and go to state 26

state 33

    (20) if_statement -> IF function . comparison value block_function
    (21) if_statement -> IF function . comparison value block_function else_if_statement
    (74) comparison -> . LESS_THAN
    (75) comparison -> . GREATER_THAN
    (76) comparison -> . LESS_THAN_EQUAL
    (77) comparison -> . GREATER_THAN_EQUAL
    (78) comparison -> . NOT_EQUAL
    (79) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 37
    GREATER_THAN    shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    NOT_EQUAL       shift and go to state 41
    EQUAL_EQUAL     shift and go to state 42

    comparison                     shift and go to state 61

state 34

    (22) if_statement -> IF LET . EQUAL value block_function
    (23) if_statement -> IF LET . EQUAL value else_if_statement

    EQUAL           shift and go to state 62


state 35

    (38) function -> ID . LPAREN RPAREN
    (39) function -> ID . LPAREN value RPAREN
    (40) function -> ID . LPAREN arguments_production RPAREN
    (41) function -> ID . DOT ID LPAREN RPAREN
    (42) function -> ID . DOT ID LPAREN value RPAREN
    (43) function -> ID . DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 51
    DOT             shift and go to state 52


state 36

    (63) comparison_production -> comparison_value comparison . comparison_production
    (62) comparison_production -> . comparison_value
    (63) comparison_production -> . comparison_value comparison comparison_production
    (64) comparison_value -> . value comparison value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    comparison_value               shift and go to state 11
    comparison_production          shift and go to state 63
    value                          shift and go to state 59
    array                          shift and go to state 26

state 37

    (74) comparison -> LESS_THAN .

    INT             reduce using rule 74 (comparison -> LESS_THAN .)
    FLOAT           reduce using rule 74 (comparison -> LESS_THAN .)
    STRING          reduce using rule 74 (comparison -> LESS_THAN .)
    CHAR            reduce using rule 74 (comparison -> LESS_THAN .)
    BOOL            reduce using rule 74 (comparison -> LESS_THAN .)
    ID              reduce using rule 74 (comparison -> LESS_THAN .)
    LBRACKET        reduce using rule 74 (comparison -> LESS_THAN .)


state 38

    (75) comparison -> GREATER_THAN .

    INT             reduce using rule 75 (comparison -> GREATER_THAN .)
    FLOAT           reduce using rule 75 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 75 (comparison -> GREATER_THAN .)
    CHAR            reduce using rule 75 (comparison -> GREATER_THAN .)
    BOOL            reduce using rule 75 (comparison -> GREATER_THAN .)
    ID              reduce using rule 75 (comparison -> GREATER_THAN .)
    LBRACKET        reduce using rule 75 (comparison -> GREATER_THAN .)


state 39

    (76) comparison -> LESS_THAN_EQUAL .

    INT             reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    STRING          reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    CHAR            reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    BOOL            reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    ID              reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)
    LBRACKET        reduce using rule 76 (comparison -> LESS_THAN_EQUAL .)


state 40

    (77) comparison -> GREATER_THAN_EQUAL .

    INT             reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    STRING          reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    CHAR            reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    BOOL            reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    ID              reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)
    LBRACKET        reduce using rule 77 (comparison -> GREATER_THAN_EQUAL .)


state 41

    (78) comparison -> NOT_EQUAL .

    INT             reduce using rule 78 (comparison -> NOT_EQUAL .)
    FLOAT           reduce using rule 78 (comparison -> NOT_EQUAL .)
    STRING          reduce using rule 78 (comparison -> NOT_EQUAL .)
    CHAR            reduce using rule 78 (comparison -> NOT_EQUAL .)
    BOOL            reduce using rule 78 (comparison -> NOT_EQUAL .)
    ID              reduce using rule 78 (comparison -> NOT_EQUAL .)
    LBRACKET        reduce using rule 78 (comparison -> NOT_EQUAL .)


state 42

    (79) comparison -> EQUAL_EQUAL .

    INT             reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    FLOAT           reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    STRING          reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    CHAR            reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    BOOL            reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    ID              reduce using rule 79 (comparison -> EQUAL_EQUAL .)
    LBRACKET        reduce using rule 79 (comparison -> EQUAL_EQUAL .)


state 43

    (65) logic_value -> value logic_operator . value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 64
    array                          shift and go to state 26

state 44

    (64) comparison_value -> value comparison . value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 65
    array                          shift and go to state 26

state 45

    (87) logic_operator -> AND .

    INT             reduce using rule 87 (logic_operator -> AND .)
    FLOAT           reduce using rule 87 (logic_operator -> AND .)
    STRING          reduce using rule 87 (logic_operator -> AND .)
    CHAR            reduce using rule 87 (logic_operator -> AND .)
    BOOL            reduce using rule 87 (logic_operator -> AND .)
    ID              reduce using rule 87 (logic_operator -> AND .)
    LBRACKET        reduce using rule 87 (logic_operator -> AND .)


state 46

    (88) logic_operator -> OR .

    INT             reduce using rule 88 (logic_operator -> OR .)
    FLOAT           reduce using rule 88 (logic_operator -> OR .)
    STRING          reduce using rule 88 (logic_operator -> OR .)
    CHAR            reduce using rule 88 (logic_operator -> OR .)
    BOOL            reduce using rule 88 (logic_operator -> OR .)
    ID              reduce using rule 88 (logic_operator -> OR .)
    LBRACKET        reduce using rule 88 (logic_operator -> OR .)


state 47

    (89) logic_operator -> NOT .

    INT             reduce using rule 89 (logic_operator -> NOT .)
    FLOAT           reduce using rule 89 (logic_operator -> NOT .)
    STRING          reduce using rule 89 (logic_operator -> NOT .)
    CHAR            reduce using rule 89 (logic_operator -> NOT .)
    BOOL            reduce using rule 89 (logic_operator -> NOT .)
    ID              reduce using rule 89 (logic_operator -> NOT .)
    LBRACKET        reduce using rule 89 (logic_operator -> NOT .)


state 48

    (46) statement -> LET ID . EQUAL value
    (51) statement -> LET ID . EQUAL data_structures

    EQUAL           shift and go to state 66


state 49

    (47) statement -> LET MUT . ID EQUAL value
    (53) statement -> LET MUT . ID EQUAL data_structures

    ID              shift and go to state 67


state 50

    (13) match_statement -> MATCH ID . LBRACE match_body RBRACE

    LBRACE          shift and go to state 68


state 51

    (38) function -> ID LPAREN . RPAREN
    (39) function -> ID LPAREN . value RPAREN
    (40) function -> ID LPAREN . arguments_production RPAREN
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (60) arguments_production -> . value
    (61) arguments_production -> . value COMMA arguments_production
    (56) array -> . LBRACKET array_elements RBRACKET

    RPAREN          shift and go to state 69
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 70
    arguments_production           shift and go to state 71
    array                          shift and go to state 26

state 52

    (41) function -> ID DOT . ID LPAREN RPAREN
    (42) function -> ID DOT . ID LPAREN value RPAREN
    (43) function -> ID DOT . ID LPAREN arguments_production RPAREN

    ID              shift and go to state 72


state 53

    (49) statement -> ID EQUAL . ID
    (50) statement -> ID EQUAL . aritmetic_operation_production
    (52) statement -> ID EQUAL . data_structures
    (66) aritmetic_operation_production -> . aritmetic_operation
    (67) aritmetic_operation_production -> . value aritmetic_operator aritmetic_operation
    (54) data_structures -> . tuple
    (55) data_structures -> . array
    (68) aritmetic_operation -> . value aritmetic_operator value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (59) tuple -> . LPAREN arguments_production RPAREN
    (56) array -> . LBRACKET array_elements RBRACKET

    ID              shift and go to state 73
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    LPAREN          shift and go to state 80
    LBRACKET        shift and go to state 28

    aritmetic_operation_production shift and go to state 74
    data_structures                shift and go to state 75
    aritmetic_operation            shift and go to state 76
    value                          shift and go to state 77
    tuple                          shift and go to state 78
    array                          shift and go to state 79

state 54

    (24) fn_statement -> FN MAIN . LPAREN RPAREN block_function

    LPAREN          shift and go to state 81


state 55

    (48) statement -> CONST ID . EQUAL value

    EQUAL           shift and go to state 82


state 56

    (56) array -> LBRACKET array_elements . RBRACKET
    (58) array_elements -> array_elements . COMMA INT

    RBRACKET        shift and go to state 83
    COMMA           shift and go to state 84


state 57

    (57) array_elements -> INT .

    RBRACKET        reduce using rule 57 (array_elements -> INT .)
    COMMA           reduce using rule 57 (array_elements -> INT .)


state 58

    (18) if_statement -> IF LPAREN comparison_value . RPAREN block_function
    (19) if_statement -> IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 85


state 59

    (64) comparison_value -> value . comparison value
    (74) comparison -> . LESS_THAN
    (75) comparison -> . GREATER_THAN
    (76) comparison -> . LESS_THAN_EQUAL
    (77) comparison -> . GREATER_THAN_EQUAL
    (78) comparison -> . NOT_EQUAL
    (79) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 37
    GREATER_THAN    shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    NOT_EQUAL       shift and go to state 41
    EQUAL_EQUAL     shift and go to state 42

    comparison                     shift and go to state 44

state 60

    (85) value -> ID .

    LESS_THAN       reduce using rule 85 (value -> ID .)
    GREATER_THAN    reduce using rule 85 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 85 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 85 (value -> ID .)
    NOT_EQUAL       reduce using rule 85 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 85 (value -> ID .)
    SEMICOLON       reduce using rule 85 (value -> ID .)
    RPAREN          reduce using rule 85 (value -> ID .)
    COMMA           reduce using rule 85 (value -> ID .)
    LBRACE          reduce using rule 85 (value -> ID .)
    ELSE            reduce using rule 85 (value -> ID .)
    PIPE            reduce using rule 85 (value -> ID .)
    FAT_ARROW       reduce using rule 85 (value -> ID .)
    PLUS            reduce using rule 85 (value -> ID .)
    MINUS_OPERATOR  reduce using rule 85 (value -> ID .)
    TIMES           reduce using rule 85 (value -> ID .)
    DIVIDE          reduce using rule 85 (value -> ID .)
    MODULE          reduce using rule 85 (value -> ID .)


state 61

    (20) if_statement -> IF function comparison . value block_function
    (21) if_statement -> IF function comparison . value block_function else_if_statement
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 86
    array                          shift and go to state 26

state 62

    (22) if_statement -> IF LET EQUAL . value block_function
    (23) if_statement -> IF LET EQUAL . value else_if_statement
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 87
    array                          shift and go to state 26

state 63

    (63) comparison_production -> comparison_value comparison comparison_production .

    SEMICOLON       reduce using rule 63 (comparison_production -> comparison_value comparison comparison_production .)


state 64

    (65) logic_value -> value logic_operator value .

    SEMICOLON       reduce using rule 65 (logic_value -> value logic_operator value .)


state 65

    (64) comparison_value -> value comparison value .

    LESS_THAN       reduce using rule 64 (comparison_value -> value comparison value .)
    GREATER_THAN    reduce using rule 64 (comparison_value -> value comparison value .)
    LESS_THAN_EQUAL reduce using rule 64 (comparison_value -> value comparison value .)
    GREATER_THAN_EQUAL reduce using rule 64 (comparison_value -> value comparison value .)
    NOT_EQUAL       reduce using rule 64 (comparison_value -> value comparison value .)
    EQUAL_EQUAL     reduce using rule 64 (comparison_value -> value comparison value .)
    SEMICOLON       reduce using rule 64 (comparison_value -> value comparison value .)
    RPAREN          reduce using rule 64 (comparison_value -> value comparison value .)


state 66

    (46) statement -> LET ID EQUAL . value
    (51) statement -> LET ID EQUAL . data_structures
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (54) data_structures -> . tuple
    (55) data_structures -> . array
    (56) array -> . LBRACKET array_elements RBRACKET
    (59) tuple -> . LPAREN arguments_production RPAREN

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28
    LPAREN          shift and go to state 80

    value                          shift and go to state 88
    data_structures                shift and go to state 89
    array                          shift and go to state 90
    tuple                          shift and go to state 78

state 67

    (47) statement -> LET MUT ID . EQUAL value
    (53) statement -> LET MUT ID . EQUAL data_structures

    EQUAL           shift and go to state 91


state 68

    (13) match_statement -> MATCH ID LBRACE . match_body RBRACE
    (11) match_body -> . match_body_line
    (12) match_body -> . match_body_line match_body match_case_default
    (8) match_body_line -> . match_cases
    (14) match_cases -> . match_case
    (15) match_cases -> . match_case match_cases
    (16) match_case -> . match_pattern FAT_ARROW block_function
    (9) match_pattern -> . value
    (10) match_pattern -> . value PIPE match_pattern
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    match_body                     shift and go to state 92
    match_body_line                shift and go to state 93
    match_cases                    shift and go to state 94
    match_case                     shift and go to state 95
    match_pattern                  shift and go to state 96
    value                          shift and go to state 97
    array                          shift and go to state 26

state 69

    (38) function -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 38 (function -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 38 (function -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 38 (function -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 38 (function -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 38 (function -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 38 (function -> ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 38 (function -> ID LPAREN RPAREN .)


state 70

    (39) function -> ID LPAREN value . RPAREN
    (60) arguments_production -> value .
    (61) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 98
    COMMA           shift and go to state 99

  ! RPAREN          [ reduce using rule 60 (arguments_production -> value .) ]


state 71

    (40) function -> ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 100


state 72

    (41) function -> ID DOT ID . LPAREN RPAREN
    (42) function -> ID DOT ID . LPAREN value RPAREN
    (43) function -> ID DOT ID . LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 101


state 73

    (49) statement -> ID EQUAL ID .
    (85) value -> ID .

    SEMICOLON       reduce using rule 49 (statement -> ID EQUAL ID .)
    PLUS            reduce using rule 85 (value -> ID .)
    MINUS_OPERATOR  reduce using rule 85 (value -> ID .)
    TIMES           reduce using rule 85 (value -> ID .)
    DIVIDE          reduce using rule 85 (value -> ID .)
    MODULE          reduce using rule 85 (value -> ID .)


state 74

    (50) statement -> ID EQUAL aritmetic_operation_production .

    SEMICOLON       reduce using rule 50 (statement -> ID EQUAL aritmetic_operation_production .)


state 75

    (52) statement -> ID EQUAL data_structures .

    SEMICOLON       reduce using rule 52 (statement -> ID EQUAL data_structures .)


state 76

    (66) aritmetic_operation_production -> aritmetic_operation .

    SEMICOLON       reduce using rule 66 (aritmetic_operation_production -> aritmetic_operation .)


state 77

    (67) aritmetic_operation_production -> value . aritmetic_operator aritmetic_operation
    (68) aritmetic_operation -> value . aritmetic_operator value
    (69) aritmetic_operator -> . PLUS
    (70) aritmetic_operator -> . MINUS_OPERATOR
    (71) aritmetic_operator -> . TIMES
    (72) aritmetic_operator -> . DIVIDE
    (73) aritmetic_operator -> . MODULE

    PLUS            shift and go to state 103
    MINUS_OPERATOR  shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULE          shift and go to state 107

    aritmetic_operator             shift and go to state 102

state 78

    (54) data_structures -> tuple .

    SEMICOLON       reduce using rule 54 (data_structures -> tuple .)


state 79

    (55) data_structures -> array .
    (86) value -> array .

    SEMICOLON       reduce using rule 55 (data_structures -> array .)
    PLUS            reduce using rule 86 (value -> array .)
    MINUS_OPERATOR  reduce using rule 86 (value -> array .)
    TIMES           reduce using rule 86 (value -> array .)
    DIVIDE          reduce using rule 86 (value -> array .)
    MODULE          reduce using rule 86 (value -> array .)


state 80

    (59) tuple -> LPAREN . arguments_production RPAREN
    (60) arguments_production -> . value
    (61) arguments_production -> . value COMMA arguments_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    arguments_production           shift and go to state 108
    value                          shift and go to state 109
    array                          shift and go to state 26

state 81

    (24) fn_statement -> FN MAIN LPAREN . RPAREN block_function

    RPAREN          shift and go to state 110


state 82

    (48) statement -> CONST ID EQUAL . value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 111
    array                          shift and go to state 26

state 83

    (56) array -> LBRACKET array_elements RBRACKET .

    AND             reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    OR              reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    NOT             reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    LESS_THAN       reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    GREATER_THAN    reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    LESS_THAN_EQUAL reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    GREATER_THAN_EQUAL reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    NOT_EQUAL       reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    EQUAL_EQUAL     reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    SEMICOLON       reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    RPAREN          reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    COMMA           reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    PLUS            reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    MINUS_OPERATOR  reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    TIMES           reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    DIVIDE          reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    MODULE          reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    LBRACE          reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    ELSE            reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    PIPE            reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)
    FAT_ARROW       reduce using rule 56 (array -> LBRACKET array_elements RBRACKET .)


state 84

    (58) array_elements -> array_elements COMMA . INT

    INT             shift and go to state 112


state 85

    (18) if_statement -> IF LPAREN comparison_value RPAREN . block_function
    (19) if_statement -> IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 113

state 86

    (20) if_statement -> IF function comparison value . block_function
    (21) if_statement -> IF function comparison value . block_function else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 115

state 87

    (22) if_statement -> IF LET EQUAL value . block_function
    (23) if_statement -> IF LET EQUAL value . else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE
    (25) else_if_statement -> . ELSE block_function
    (26) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    LBRACE          shift and go to state 114
    ELSE            shift and go to state 118

    block_function                 shift and go to state 116
    else_if_statement              shift and go to state 117

state 88

    (46) statement -> LET ID EQUAL value .

    SEMICOLON       reduce using rule 46 (statement -> LET ID EQUAL value .)


state 89

    (51) statement -> LET ID EQUAL data_structures .

    SEMICOLON       reduce using rule 51 (statement -> LET ID EQUAL data_structures .)


state 90

    (86) value -> array .
    (55) data_structures -> array .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 55 (data_structures -> array .)
    SEMICOLON       reduce using rule 55 (data_structures -> array .)

  ! SEMICOLON       [ reduce using rule 86 (value -> array .) ]


state 91

    (47) statement -> LET MUT ID EQUAL . value
    (53) statement -> LET MUT ID EQUAL . data_structures
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (54) data_structures -> . tuple
    (55) data_structures -> . array
    (56) array -> . LBRACKET array_elements RBRACKET
    (59) tuple -> . LPAREN arguments_production RPAREN

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28
    LPAREN          shift and go to state 80

    value                          shift and go to state 119
    data_structures                shift and go to state 120
    array                          shift and go to state 90
    tuple                          shift and go to state 78

state 92

    (13) match_statement -> MATCH ID LBRACE match_body . RBRACE

    RBRACE          shift and go to state 121


state 93

    (11) match_body -> match_body_line .
    (12) match_body -> match_body_line . match_body match_case_default
    (11) match_body -> . match_body_line
    (12) match_body -> . match_body_line match_body match_case_default
    (8) match_body_line -> . match_cases
    (14) match_cases -> . match_case
    (15) match_cases -> . match_case match_cases
    (16) match_case -> . match_pattern FAT_ARROW block_function
    (9) match_pattern -> . value
    (10) match_pattern -> . value PIPE match_pattern
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    RBRACE          reduce using rule 11 (match_body -> match_body_line .)
    UNDERSCORE      reduce using rule 11 (match_body -> match_body_line .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    match_body_line                shift and go to state 93
    match_body                     shift and go to state 122
    match_cases                    shift and go to state 94
    match_case                     shift and go to state 95
    match_pattern                  shift and go to state 96
    value                          shift and go to state 97
    array                          shift and go to state 26

state 94

    (8) match_body_line -> match_cases .

    INT             reduce using rule 8 (match_body_line -> match_cases .)
    FLOAT           reduce using rule 8 (match_body_line -> match_cases .)
    STRING          reduce using rule 8 (match_body_line -> match_cases .)
    CHAR            reduce using rule 8 (match_body_line -> match_cases .)
    BOOL            reduce using rule 8 (match_body_line -> match_cases .)
    ID              reduce using rule 8 (match_body_line -> match_cases .)
    LBRACKET        reduce using rule 8 (match_body_line -> match_cases .)
    RBRACE          reduce using rule 8 (match_body_line -> match_cases .)
    UNDERSCORE      reduce using rule 8 (match_body_line -> match_cases .)


state 95

    (14) match_cases -> match_case .
    (15) match_cases -> match_case . match_cases
    (14) match_cases -> . match_case
    (15) match_cases -> . match_case match_cases
    (16) match_case -> . match_pattern FAT_ARROW block_function
    (9) match_pattern -> . value
    (10) match_pattern -> . value PIPE match_pattern
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACE          reduce using rule 14 (match_cases -> match_case .)
    UNDERSCORE      reduce using rule 14 (match_cases -> match_case .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

  ! INT             [ reduce using rule 14 (match_cases -> match_case .) ]
  ! FLOAT           [ reduce using rule 14 (match_cases -> match_case .) ]
  ! STRING          [ reduce using rule 14 (match_cases -> match_case .) ]
  ! CHAR            [ reduce using rule 14 (match_cases -> match_case .) ]
  ! BOOL            [ reduce using rule 14 (match_cases -> match_case .) ]
  ! ID              [ reduce using rule 14 (match_cases -> match_case .) ]
  ! LBRACKET        [ reduce using rule 14 (match_cases -> match_case .) ]

    match_case                     shift and go to state 95
    match_cases                    shift and go to state 123
    match_pattern                  shift and go to state 96
    value                          shift and go to state 97
    array                          shift and go to state 26

state 96

    (16) match_case -> match_pattern . FAT_ARROW block_function

    FAT_ARROW       shift and go to state 124


state 97

    (9) match_pattern -> value .
    (10) match_pattern -> value . PIPE match_pattern

    FAT_ARROW       reduce using rule 9 (match_pattern -> value .)
    PIPE            shift and go to state 125


state 98

    (39) function -> ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 39 (function -> ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 39 (function -> ID LPAREN value RPAREN .)


state 99

    (61) arguments_production -> value COMMA . arguments_production
    (60) arguments_production -> . value
    (61) arguments_production -> . value COMMA arguments_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 109
    arguments_production           shift and go to state 126
    array                          shift and go to state 26

state 100

    (40) function -> ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 40 (function -> ID LPAREN arguments_production RPAREN .)


state 101

    (41) function -> ID DOT ID LPAREN . RPAREN
    (42) function -> ID DOT ID LPAREN . value RPAREN
    (43) function -> ID DOT ID LPAREN . arguments_production RPAREN
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (60) arguments_production -> . value
    (61) arguments_production -> . value COMMA arguments_production
    (56) array -> . LBRACKET array_elements RBRACKET

    RPAREN          shift and go to state 127
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 128
    arguments_production           shift and go to state 129
    array                          shift and go to state 26

state 102

    (67) aritmetic_operation_production -> value aritmetic_operator . aritmetic_operation
    (68) aritmetic_operation -> value aritmetic_operator . value
    (68) aritmetic_operation -> . value aritmetic_operator value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 130
    aritmetic_operation            shift and go to state 131
    array                          shift and go to state 26

state 103

    (69) aritmetic_operator -> PLUS .

    INT             reduce using rule 69 (aritmetic_operator -> PLUS .)
    FLOAT           reduce using rule 69 (aritmetic_operator -> PLUS .)
    STRING          reduce using rule 69 (aritmetic_operator -> PLUS .)
    CHAR            reduce using rule 69 (aritmetic_operator -> PLUS .)
    BOOL            reduce using rule 69 (aritmetic_operator -> PLUS .)
    ID              reduce using rule 69 (aritmetic_operator -> PLUS .)
    LBRACKET        reduce using rule 69 (aritmetic_operator -> PLUS .)


state 104

    (70) aritmetic_operator -> MINUS_OPERATOR .

    INT             reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    FLOAT           reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    STRING          reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    CHAR            reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    BOOL            reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    ID              reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)
    LBRACKET        reduce using rule 70 (aritmetic_operator -> MINUS_OPERATOR .)


state 105

    (71) aritmetic_operator -> TIMES .

    INT             reduce using rule 71 (aritmetic_operator -> TIMES .)
    FLOAT           reduce using rule 71 (aritmetic_operator -> TIMES .)
    STRING          reduce using rule 71 (aritmetic_operator -> TIMES .)
    CHAR            reduce using rule 71 (aritmetic_operator -> TIMES .)
    BOOL            reduce using rule 71 (aritmetic_operator -> TIMES .)
    ID              reduce using rule 71 (aritmetic_operator -> TIMES .)
    LBRACKET        reduce using rule 71 (aritmetic_operator -> TIMES .)


state 106

    (72) aritmetic_operator -> DIVIDE .

    INT             reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    FLOAT           reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    STRING          reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    CHAR            reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    BOOL            reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    ID              reduce using rule 72 (aritmetic_operator -> DIVIDE .)
    LBRACKET        reduce using rule 72 (aritmetic_operator -> DIVIDE .)


state 107

    (73) aritmetic_operator -> MODULE .

    INT             reduce using rule 73 (aritmetic_operator -> MODULE .)
    FLOAT           reduce using rule 73 (aritmetic_operator -> MODULE .)
    STRING          reduce using rule 73 (aritmetic_operator -> MODULE .)
    CHAR            reduce using rule 73 (aritmetic_operator -> MODULE .)
    BOOL            reduce using rule 73 (aritmetic_operator -> MODULE .)
    ID              reduce using rule 73 (aritmetic_operator -> MODULE .)
    LBRACKET        reduce using rule 73 (aritmetic_operator -> MODULE .)


state 108

    (59) tuple -> LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 132


state 109

    (60) arguments_production -> value .
    (61) arguments_production -> value . COMMA arguments_production

    RPAREN          reduce using rule 60 (arguments_production -> value .)
    COMMA           shift and go to state 99


state 110

    (24) fn_statement -> FN MAIN LPAREN RPAREN . block_function
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 133

state 111

    (48) statement -> CONST ID EQUAL value .

    SEMICOLON       reduce using rule 48 (statement -> CONST ID EQUAL value .)


state 112

    (58) array_elements -> array_elements COMMA INT .

    RBRACKET        reduce using rule 58 (array_elements -> array_elements COMMA INT .)
    COMMA           reduce using rule 58 (array_elements -> array_elements COMMA INT .)


state 113

    (18) if_statement -> IF LPAREN comparison_value RPAREN block_function .
    (19) if_statement -> IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (25) else_if_statement -> . ELSE block_function
    (26) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    IF              reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    MATCH           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    FN              reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    ID              reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    INT             reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    FLOAT           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    STRING          reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    CHAR            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    BOOL            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    LET             reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    CONST           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    LBRACKET        reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    $end            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    ELSE            shift and go to state 118

    else_if_statement              shift and go to state 134

state 114

    (28) block_function -> LBRACE . RBRACE
    (29) block_function -> LBRACE . code_block RBRACE
    (30) code_block -> . code_line
    (31) code_block -> . code_line code_block
    (32) code_line -> . code SEMICOLON
    (33) code -> . function
    (34) code -> . comparison_production
    (35) code -> . value
    (36) code -> . logic_value
    (37) code -> . statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (62) comparison_production -> . comparison_value
    (63) comparison_production -> . comparison_value comparison comparison_production
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (65) logic_value -> . value logic_operator value
    (46) statement -> . LET ID EQUAL value
    (47) statement -> . LET MUT ID EQUAL value
    (48) statement -> . CONST ID EQUAL value
    (49) statement -> . ID EQUAL ID
    (50) statement -> . ID EQUAL aritmetic_operation_production
    (51) statement -> . LET ID EQUAL data_structures
    (52) statement -> . ID EQUAL data_structures
    (53) statement -> . LET MUT ID EQUAL data_structures
    (64) comparison_value -> . value comparison value
    (56) array -> . LBRACKET array_elements RBRACKET

    RBRACE          shift and go to state 135
    ID              shift and go to state 16
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    LET             shift and go to state 14
    CONST           shift and go to state 27
    LBRACKET        shift and go to state 28

    code_block                     shift and go to state 136
    code_line                      shift and go to state 5
    code                           shift and go to state 9
    function                       shift and go to state 12
    comparison_production          shift and go to state 18
    value                          shift and go to state 13
    logic_value                    shift and go to state 19
    statement                      shift and go to state 20
    comparison_value               shift and go to state 11
    array                          shift and go to state 26

state 115

    (20) if_statement -> IF function comparison value block_function .
    (21) if_statement -> IF function comparison value block_function . else_if_statement
    (25) else_if_statement -> . ELSE block_function
    (26) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    IF              reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    MATCH           reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    FN              reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    ID              reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    INT             reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    FLOAT           reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    STRING          reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    CHAR            reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    BOOL            reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    LET             reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    CONST           reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    LBRACKET        reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    $end            reduce using rule 20 (if_statement -> IF function comparison value block_function .)
    ELSE            shift and go to state 118

    else_if_statement              shift and go to state 137

state 116

    (22) if_statement -> IF LET EQUAL value block_function .

    IF              reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    MATCH           reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    FN              reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    ID              reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    INT             reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    FLOAT           reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    STRING          reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    CHAR            reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    BOOL            reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    LET             reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    CONST           reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    LBRACKET        reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)
    $end            reduce using rule 22 (if_statement -> IF LET EQUAL value block_function .)


state 117

    (23) if_statement -> IF LET EQUAL value else_if_statement .

    IF              reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    MATCH           reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    FN              reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    ID              reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    INT             reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    FLOAT           reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    STRING          reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    CHAR            reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    BOOL            reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    LET             reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    CONST           reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    LBRACKET        reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)
    $end            reduce using rule 23 (if_statement -> IF LET EQUAL value else_if_statement .)


state 118

    (25) else_if_statement -> ELSE . block_function
    (26) else_if_statement -> ELSE . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> ELSE . IF function comparison value block_function else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    IF              shift and go to state 139
    LBRACE          shift and go to state 114

    block_function                 shift and go to state 138

state 119

    (47) statement -> LET MUT ID EQUAL value .

    SEMICOLON       reduce using rule 47 (statement -> LET MUT ID EQUAL value .)


state 120

    (53) statement -> LET MUT ID EQUAL data_structures .

    SEMICOLON       reduce using rule 53 (statement -> LET MUT ID EQUAL data_structures .)


state 121

    (13) match_statement -> MATCH ID LBRACE match_body RBRACE .

    IF              reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    MATCH           reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    FN              reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    ID              reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    INT             reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    FLOAT           reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    STRING          reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    CHAR            reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    BOOL            reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    LET             reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    CONST           reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    LBRACKET        reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    $end            reduce using rule 13 (match_statement -> MATCH ID LBRACE match_body RBRACE .)


state 122

    (12) match_body -> match_body_line match_body . match_case_default
    (17) match_case_default -> . UNDERSCORE FAT_ARROW block_function

    UNDERSCORE      shift and go to state 141

    match_case_default             shift and go to state 140

state 123

    (15) match_cases -> match_case match_cases .

    INT             reduce using rule 15 (match_cases -> match_case match_cases .)
    FLOAT           reduce using rule 15 (match_cases -> match_case match_cases .)
    STRING          reduce using rule 15 (match_cases -> match_case match_cases .)
    CHAR            reduce using rule 15 (match_cases -> match_case match_cases .)
    BOOL            reduce using rule 15 (match_cases -> match_case match_cases .)
    ID              reduce using rule 15 (match_cases -> match_case match_cases .)
    LBRACKET        reduce using rule 15 (match_cases -> match_case match_cases .)
    RBRACE          reduce using rule 15 (match_cases -> match_case match_cases .)
    UNDERSCORE      reduce using rule 15 (match_cases -> match_case match_cases .)


state 124

    (16) match_case -> match_pattern FAT_ARROW . block_function
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 142

state 125

    (10) match_pattern -> value PIPE . match_pattern
    (9) match_pattern -> . value
    (10) match_pattern -> . value PIPE match_pattern
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 97
    match_pattern                  shift and go to state 143
    array                          shift and go to state 26

state 126

    (61) arguments_production -> value COMMA arguments_production .

    RPAREN          reduce using rule 61 (arguments_production -> value COMMA arguments_production .)


state 127

    (41) function -> ID DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 41 (function -> ID DOT ID LPAREN RPAREN .)


state 128

    (42) function -> ID DOT ID LPAREN value . RPAREN
    (60) arguments_production -> value .
    (61) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 144
    COMMA           shift and go to state 99

  ! RPAREN          [ reduce using rule 60 (arguments_production -> value .) ]


state 129

    (43) function -> ID DOT ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 145


state 130

    (68) aritmetic_operation -> value aritmetic_operator value .
    (68) aritmetic_operation -> value . aritmetic_operator value
    (69) aritmetic_operator -> . PLUS
    (70) aritmetic_operator -> . MINUS_OPERATOR
    (71) aritmetic_operator -> . TIMES
    (72) aritmetic_operator -> . DIVIDE
    (73) aritmetic_operator -> . MODULE

    SEMICOLON       reduce using rule 68 (aritmetic_operation -> value aritmetic_operator value .)
    PLUS            shift and go to state 103
    MINUS_OPERATOR  shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 106
    MODULE          shift and go to state 107

    aritmetic_operator             shift and go to state 146

state 131

    (67) aritmetic_operation_production -> value aritmetic_operator aritmetic_operation .

    SEMICOLON       reduce using rule 67 (aritmetic_operation_production -> value aritmetic_operator aritmetic_operation .)


state 132

    (59) tuple -> LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 59 (tuple -> LPAREN arguments_production RPAREN .)


state 133

    (24) fn_statement -> FN MAIN LPAREN RPAREN block_function .

    IF              reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    MATCH           reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    FN              reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    ID              reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    INT             reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    FLOAT           reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    STRING          reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    CHAR            reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    BOOL            reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    LET             reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    CONST           reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    LBRACKET        reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)
    $end            reduce using rule 24 (fn_statement -> FN MAIN LPAREN RPAREN block_function .)


state 134

    (19) if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .

    IF              reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    MATCH           reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FN              reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    ID              reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    INT             reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FLOAT           reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    STRING          reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CHAR            reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    BOOL            reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LET             reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CONST           reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LBRACKET        reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    $end            reduce using rule 19 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 135

    (28) block_function -> LBRACE RBRACE .

    ELSE            reduce using rule 28 (block_function -> LBRACE RBRACE .)
    IF              reduce using rule 28 (block_function -> LBRACE RBRACE .)
    MATCH           reduce using rule 28 (block_function -> LBRACE RBRACE .)
    FN              reduce using rule 28 (block_function -> LBRACE RBRACE .)
    ID              reduce using rule 28 (block_function -> LBRACE RBRACE .)
    INT             reduce using rule 28 (block_function -> LBRACE RBRACE .)
    FLOAT           reduce using rule 28 (block_function -> LBRACE RBRACE .)
    STRING          reduce using rule 28 (block_function -> LBRACE RBRACE .)
    CHAR            reduce using rule 28 (block_function -> LBRACE RBRACE .)
    BOOL            reduce using rule 28 (block_function -> LBRACE RBRACE .)
    LET             reduce using rule 28 (block_function -> LBRACE RBRACE .)
    CONST           reduce using rule 28 (block_function -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 28 (block_function -> LBRACE RBRACE .)
    $end            reduce using rule 28 (block_function -> LBRACE RBRACE .)
    RBRACE          reduce using rule 28 (block_function -> LBRACE RBRACE .)
    UNDERSCORE      reduce using rule 28 (block_function -> LBRACE RBRACE .)


state 136

    (29) block_function -> LBRACE code_block . RBRACE

    RBRACE          shift and go to state 147


state 137

    (21) if_statement -> IF function comparison value block_function else_if_statement .

    IF              reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    MATCH           reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    FN              reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    ID              reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    INT             reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    FLOAT           reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    STRING          reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    CHAR            reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    BOOL            reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    LET             reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    CONST           reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    LBRACKET        reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)
    $end            reduce using rule 21 (if_statement -> IF function comparison value block_function else_if_statement .)


state 138

    (25) else_if_statement -> ELSE block_function .

    IF              reduce using rule 25 (else_if_statement -> ELSE block_function .)
    MATCH           reduce using rule 25 (else_if_statement -> ELSE block_function .)
    FN              reduce using rule 25 (else_if_statement -> ELSE block_function .)
    ID              reduce using rule 25 (else_if_statement -> ELSE block_function .)
    INT             reduce using rule 25 (else_if_statement -> ELSE block_function .)
    FLOAT           reduce using rule 25 (else_if_statement -> ELSE block_function .)
    STRING          reduce using rule 25 (else_if_statement -> ELSE block_function .)
    CHAR            reduce using rule 25 (else_if_statement -> ELSE block_function .)
    BOOL            reduce using rule 25 (else_if_statement -> ELSE block_function .)
    LET             reduce using rule 25 (else_if_statement -> ELSE block_function .)
    CONST           reduce using rule 25 (else_if_statement -> ELSE block_function .)
    LBRACKET        reduce using rule 25 (else_if_statement -> ELSE block_function .)
    $end            reduce using rule 25 (else_if_statement -> ELSE block_function .)


state 139

    (26) else_if_statement -> ELSE IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> ELSE IF . function comparison value block_function else_if_statement
    (38) function -> . ID LPAREN RPAREN
    (39) function -> . ID LPAREN value RPAREN
    (40) function -> . ID LPAREN arguments_production RPAREN
    (41) function -> . ID DOT ID LPAREN RPAREN
    (42) function -> . ID DOT ID LPAREN value RPAREN
    (43) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 148
    ID              shift and go to state 35

    function                       shift and go to state 149

state 140

    (12) match_body -> match_body_line match_body match_case_default .

    RBRACE          reduce using rule 12 (match_body -> match_body_line match_body match_case_default .)
    UNDERSCORE      reduce using rule 12 (match_body -> match_body_line match_body match_case_default .)


state 141

    (17) match_case_default -> UNDERSCORE . FAT_ARROW block_function

    FAT_ARROW       shift and go to state 150


state 142

    (16) match_case -> match_pattern FAT_ARROW block_function .

    INT             reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    FLOAT           reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    STRING          reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    CHAR            reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    BOOL            reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    ID              reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    LBRACKET        reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    RBRACE          reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)
    UNDERSCORE      reduce using rule 16 (match_case -> match_pattern FAT_ARROW block_function .)


state 143

    (10) match_pattern -> value PIPE match_pattern .

    FAT_ARROW       reduce using rule 10 (match_pattern -> value PIPE match_pattern .)


state 144

    (42) function -> ID DOT ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 42 (function -> ID DOT ID LPAREN value RPAREN .)


state 145

    (43) function -> ID DOT ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 43 (function -> ID DOT ID LPAREN arguments_production RPAREN .)


state 146

    (68) aritmetic_operation -> value aritmetic_operator . value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 151
    array                          shift and go to state 26

state 147

    (29) block_function -> LBRACE code_block RBRACE .

    ELSE            reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    IF              reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    MATCH           reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    FN              reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    ID              reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    INT             reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    FLOAT           reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    STRING          reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    CHAR            reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    BOOL            reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    LET             reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    CONST           reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    LBRACKET        reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    $end            reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    RBRACE          reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)
    UNDERSCORE      reduce using rule 29 (block_function -> LBRACE code_block RBRACE .)


state 148

    (26) else_if_statement -> ELSE IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (64) comparison_value -> . value comparison value
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    comparison_value               shift and go to state 152
    value                          shift and go to state 59
    array                          shift and go to state 26

state 149

    (27) else_if_statement -> ELSE IF function . comparison value block_function else_if_statement
    (74) comparison -> . LESS_THAN
    (75) comparison -> . GREATER_THAN
    (76) comparison -> . LESS_THAN_EQUAL
    (77) comparison -> . GREATER_THAN_EQUAL
    (78) comparison -> . NOT_EQUAL
    (79) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 37
    GREATER_THAN    shift and go to state 38
    LESS_THAN_EQUAL shift and go to state 39
    GREATER_THAN_EQUAL shift and go to state 40
    NOT_EQUAL       shift and go to state 41
    EQUAL_EQUAL     shift and go to state 42

    comparison                     shift and go to state 153

state 150

    (17) match_case_default -> UNDERSCORE FAT_ARROW . block_function
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 154

state 151

    (68) aritmetic_operation -> value aritmetic_operator value .

    SEMICOLON       reduce using rule 68 (aritmetic_operation -> value aritmetic_operator value .)


state 152

    (26) else_if_statement -> ELSE IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 155


state 153

    (27) else_if_statement -> ELSE IF function comparison . value block_function else_if_statement
    (80) value -> . INT
    (81) value -> . FLOAT
    (82) value -> . STRING
    (83) value -> . CHAR
    (84) value -> . BOOL
    (85) value -> . ID
    (86) value -> . array
    (56) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    STRING          shift and go to state 23
    CHAR            shift and go to state 24
    BOOL            shift and go to state 25
    ID              shift and go to state 60
    LBRACKET        shift and go to state 28

    value                          shift and go to state 156
    array                          shift and go to state 26

state 154

    (17) match_case_default -> UNDERSCORE FAT_ARROW block_function .

    RBRACE          reduce using rule 17 (match_case_default -> UNDERSCORE FAT_ARROW block_function .)
    UNDERSCORE      reduce using rule 17 (match_case_default -> UNDERSCORE FAT_ARROW block_function .)


state 155

    (26) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 157

state 156

    (27) else_if_statement -> ELSE IF function comparison value . block_function else_if_statement
    (28) block_function -> . LBRACE RBRACE
    (29) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 114

    block_function                 shift and go to state 158

state 157

    (26) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (25) else_if_statement -> . ELSE block_function
    (26) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 118

    else_if_statement              shift and go to state 159

state 158

    (27) else_if_statement -> ELSE IF function comparison value block_function . else_if_statement
    (25) else_if_statement -> . ELSE block_function
    (26) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (27) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 118

    else_if_statement              shift and go to state 160

state 159

    (26) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .

    IF              reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    MATCH           reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FN              reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    ID              reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    INT             reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FLOAT           reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    STRING          reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CHAR            reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    BOOL            reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LET             reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CONST           reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LBRACKET        reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    $end            reduce using rule 26 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 160

    (27) else_if_statement -> ELSE IF function comparison value block_function else_if_statement .

    IF              reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    MATCH           reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    FN              reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    ID              reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    INT             reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    FLOAT           reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    STRING          reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    CHAR            reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    BOOL            reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    LET             reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    CONST           reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    LBRACKET        reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    $end            reduce using rule 27 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for LET in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 5 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for INT in state 95 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 95 resolved as shift
WARNING: shift/reduce conflict for STRING in state 95 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 95 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 95 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 128 resolved as shift
WARNING: reduce/reduce conflict in state 90 resolved using rule (data_structures -> array)
WARNING: rejected rule (value -> array) in state 90
