Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARROW
    AS
    ASYNC
    AT
    AWAIT
    BREAK
    CASE
    COLON
    COMMENS
    CONST
    CONTINUE
    CRATE
    DIVIDE
    DOUBLE_COLON
    DOUBLE_QUOTE
    DYN
    ENUM
    EQUAL
    EXTERN
    FAT_ARROW
    FN
    FOR
    IMPL
    IN
    LBRACKET
    LET
    LOOP
    MAIN
    MATCH
    MINUS
    MOD
    MODULO
    MOVE
    MUT
    NAME_FUNCTION
    PIPE
    PLUS
    PUB
    RBRACKET
    REF
    RETURN
    SELF
    STATIC
    STRUCT
    SUPER
    TIMES
    TRAIT
    TYPE
    UNDERSCORE
    UNION
    UNSAFE
    USE
    WHERE
    WHILE
    sELF

Grammar

Rule 0     S' -> body
Rule 1     body -> code_block
Rule 2     body -> if_statement
Rule 3     if_statement -> IF LPAREN comparison_value RPAREN block_function
Rule 4     if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 5     if_statement -> IF function comparison value block_function
Rule 6     if_statement -> IF function comparison value block_function else_if_statement
Rule 7     else_if_statement -> ELSE block_function
Rule 8     else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 9     else_if_statement -> ELSE IF function comparison value block_function else_if_statement
Rule 10    block_function -> LBRACE RBRACE
Rule 11    block_function -> LBRACE code_block RBRACE
Rule 12    code_block -> code_line
Rule 13    code_block -> code_line code_block
Rule 14    code_line -> code SEMICOLON
Rule 15    code -> function
Rule 16    code -> comparison_production
Rule 17    code -> value
Rule 18    code -> logic_value
Rule 19    function -> ID LPAREN RPAREN
Rule 20    function -> ID LPAREN value RPAREN
Rule 21    function -> ID LPAREN arguments_production RPAREN
Rule 22    function -> ID DOT ID LPAREN RPAREN
Rule 23    function -> ID DOT ID LPAREN value RPAREN
Rule 24    function -> ID DOT ID LPAREN arguments_production RPAREN
Rule 25    arguments_production -> value
Rule 26    arguments_production -> value COMMA arguments_production
Rule 27    comparison_production -> comparison_value
Rule 28    comparison_production -> comparison_value comparison comparison_production
Rule 29    comparison_value -> value comparison value
Rule 30    logic_value -> value logic_operator value
Rule 31    comparison -> LESS_THAN
Rule 32    comparison -> GREATER_THAN
Rule 33    comparison -> LESS_THAN_EQUAL
Rule 34    comparison -> GREATER_THAN_EQUAL
Rule 35    comparison -> NOT_EQUAL
Rule 36    comparison -> EQUAL_EQUAL
Rule 37    value -> INT
Rule 38    value -> FLOAT
Rule 39    value -> STRING
Rule 40    value -> CHAR
Rule 41    value -> BOOL
Rule 42    value -> ID
Rule 43    logic_operator -> AND
Rule 44    logic_operator -> OR
Rule 45    logic_operator -> NOT

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 43
ARROW                : 
AS                   : 
ASYNC                : 
AT                   : 
AWAIT                : 
BOOL                 : 41
BREAK                : 
CASE                 : 
CHAR                 : 40
COLON                : 
COMMA                : 26
COMMENS              : 
CONST                : 
CONTINUE             : 
CRATE                : 
DIVIDE               : 
DOT                  : 22 23 24
DOUBLE_COLON         : 
DOUBLE_QUOTE         : 
DYN                  : 
ELSE                 : 7 8 9
ENUM                 : 
EQUAL                : 
EQUAL_EQUAL          : 36
EXTERN               : 
FAT_ARROW            : 
FLOAT                : 38
FN                   : 
FOR                  : 
GREATER_THAN         : 32
GREATER_THAN_EQUAL   : 34
ID                   : 19 20 21 22 22 23 23 24 24 42
IF                   : 3 4 5 6 8 9
IMPL                 : 
IN                   : 
INT                  : 37
LBRACE               : 10 11
LBRACKET             : 
LESS_THAN            : 31
LESS_THAN_EQUAL      : 33
LET                  : 
LOOP                 : 
LPAREN               : 3 4 8 19 20 21 22 23 24
MAIN                 : 
MATCH                : 
MINUS                : 
MOD                  : 
MODULO               : 
MOVE                 : 
MUT                  : 
NAME_FUNCTION        : 
NOT                  : 45
NOT_EQUAL            : 35
OR                   : 44
PIPE                 : 
PLUS                 : 
PUB                  : 
RBRACE               : 10 11
RBRACKET             : 
REF                  : 
RETURN               : 
RPAREN               : 3 4 8 19 20 21 22 23 24
SELF                 : 
SEMICOLON            : 14
STATIC               : 
STRING               : 39
STRUCT               : 
SUPER                : 
TIMES                : 
TRAIT                : 
TYPE                 : 
UNDERSCORE           : 
UNION                : 
UNSAFE               : 
USE                  : 
WHERE                : 
WHILE                : 
error                : 
sELF                 : 

Nonterminals, with rules where they appear

arguments_production : 21 24 26
block_function       : 3 4 5 6 7 8 9
body                 : 0
code                 : 14
code_block           : 1 11 13
code_line            : 12 13
comparison           : 5 6 9 28 29
comparison_production : 16 28
comparison_value     : 3 4 8 27 28
else_if_statement    : 4 6 8 9
function             : 5 6 9 15
if_statement         : 2
logic_operator       : 30
logic_value          : 18
value                : 5 6 9 17 20 23 25 26 29 29 30 30

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . code_block
    (2) body -> . if_statement
    (12) code_block -> . code_line
    (13) code_block -> . code_line code_block
    (3) if_statement -> . IF LPAREN comparison_value RPAREN block_function
    (4) if_statement -> . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (5) if_statement -> . IF function comparison value block_function
    (6) if_statement -> . IF function comparison value block_function else_if_statement
    (14) code_line -> . code SEMICOLON
    (15) code -> . function
    (16) code -> . comparison_production
    (17) code -> . value
    (18) code -> . logic_value
    (19) function -> . ID LPAREN RPAREN
    (20) function -> . ID LPAREN value RPAREN
    (21) function -> . ID LPAREN arguments_production RPAREN
    (22) function -> . ID DOT ID LPAREN RPAREN
    (23) function -> . ID DOT ID LPAREN value RPAREN
    (24) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (27) comparison_production -> . comparison_value
    (28) comparison_production -> . comparison_value comparison comparison_production
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID
    (30) logic_value -> . value logic_operator value
    (29) comparison_value -> . value comparison value

    IF              shift and go to state 5
    ID              shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17

    body                           shift and go to state 1
    code_block                     shift and go to state 2
    if_statement                   shift and go to state 3
    code_line                      shift and go to state 4
    comparison_value               shift and go to state 6
    function                       shift and go to state 7
    value                          shift and go to state 8
    code                           shift and go to state 9
    comparison_production          shift and go to state 10
    logic_value                    shift and go to state 11

state 1

    (0) S' -> body .



state 2

    (1) body -> code_block .

    $end            reduce using rule 1 (body -> code_block .)


state 3

    (2) body -> if_statement .

    $end            reduce using rule 2 (body -> if_statement .)


state 4

    (12) code_block -> code_line .
    (13) code_block -> code_line . code_block
    (12) code_block -> . code_line
    (13) code_block -> . code_line code_block
    (14) code_line -> . code SEMICOLON
    (15) code -> . function
    (16) code -> . comparison_production
    (17) code -> . value
    (18) code -> . logic_value
    (19) function -> . ID LPAREN RPAREN
    (20) function -> . ID LPAREN value RPAREN
    (21) function -> . ID LPAREN arguments_production RPAREN
    (22) function -> . ID DOT ID LPAREN RPAREN
    (23) function -> . ID DOT ID LPAREN value RPAREN
    (24) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (27) comparison_production -> . comparison_value
    (28) comparison_production -> . comparison_value comparison comparison_production
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID
    (30) logic_value -> . value logic_operator value
    (29) comparison_value -> . value comparison value

    $end            reduce using rule 12 (code_block -> code_line .)
    RBRACE          reduce using rule 12 (code_block -> code_line .)
    ID              shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17

    code_line                      shift and go to state 4
    code_block                     shift and go to state 18
    code                           shift and go to state 9
    function                       shift and go to state 7
    comparison_production          shift and go to state 10
    value                          shift and go to state 8
    logic_value                    shift and go to state 11
    comparison_value               shift and go to state 6

state 5

    (3) if_statement -> IF . LPAREN comparison_value RPAREN block_function
    (4) if_statement -> IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (5) if_statement -> IF . function comparison value block_function
    (6) if_statement -> IF . function comparison value block_function else_if_statement
    (19) function -> . ID LPAREN RPAREN
    (20) function -> . ID LPAREN value RPAREN
    (21) function -> . ID LPAREN arguments_production RPAREN
    (22) function -> . ID DOT ID LPAREN RPAREN
    (23) function -> . ID DOT ID LPAREN value RPAREN
    (24) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 19
    ID              shift and go to state 21

    function                       shift and go to state 20

state 6

    (27) comparison_production -> comparison_value .
    (28) comparison_production -> comparison_value . comparison comparison_production
    (31) comparison -> . LESS_THAN
    (32) comparison -> . GREATER_THAN
    (33) comparison -> . LESS_THAN_EQUAL
    (34) comparison -> . GREATER_THAN_EQUAL
    (35) comparison -> . NOT_EQUAL
    (36) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 27 (comparison_production -> comparison_value .)
    LESS_THAN       shift and go to state 23
    GREATER_THAN    shift and go to state 24
    LESS_THAN_EQUAL shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    NOT_EQUAL       shift and go to state 27
    EQUAL_EQUAL     shift and go to state 28

    comparison                     shift and go to state 22

state 7

    (15) code -> function .

    SEMICOLON       reduce using rule 15 (code -> function .)


state 8

    (17) code -> value .
    (30) logic_value -> value . logic_operator value
    (29) comparison_value -> value . comparison value
    (43) logic_operator -> . AND
    (44) logic_operator -> . OR
    (45) logic_operator -> . NOT
    (31) comparison -> . LESS_THAN
    (32) comparison -> . GREATER_THAN
    (33) comparison -> . LESS_THAN_EQUAL
    (34) comparison -> . GREATER_THAN_EQUAL
    (35) comparison -> . NOT_EQUAL
    (36) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 17 (code -> value .)
    AND             shift and go to state 31
    OR              shift and go to state 32
    NOT             shift and go to state 33
    LESS_THAN       shift and go to state 23
    GREATER_THAN    shift and go to state 24
    LESS_THAN_EQUAL shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    NOT_EQUAL       shift and go to state 27
    EQUAL_EQUAL     shift and go to state 28

    logic_operator                 shift and go to state 29
    comparison                     shift and go to state 30

state 9

    (14) code_line -> code . SEMICOLON

    SEMICOLON       shift and go to state 34


state 10

    (16) code -> comparison_production .

    SEMICOLON       reduce using rule 16 (code -> comparison_production .)


state 11

    (18) code -> logic_value .

    SEMICOLON       reduce using rule 18 (code -> logic_value .)


state 12

    (19) function -> ID . LPAREN RPAREN
    (20) function -> ID . LPAREN value RPAREN
    (21) function -> ID . LPAREN arguments_production RPAREN
    (22) function -> ID . DOT ID LPAREN RPAREN
    (23) function -> ID . DOT ID LPAREN value RPAREN
    (24) function -> ID . DOT ID LPAREN arguments_production RPAREN
    (42) value -> ID .

    LPAREN          shift and go to state 35
    DOT             shift and go to state 36
    AND             reduce using rule 42 (value -> ID .)
    OR              reduce using rule 42 (value -> ID .)
    NOT             reduce using rule 42 (value -> ID .)
    LESS_THAN       reduce using rule 42 (value -> ID .)
    GREATER_THAN    reduce using rule 42 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 42 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 42 (value -> ID .)
    NOT_EQUAL       reduce using rule 42 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 42 (value -> ID .)
    SEMICOLON       reduce using rule 42 (value -> ID .)


state 13

    (37) value -> INT .

    AND             reduce using rule 37 (value -> INT .)
    OR              reduce using rule 37 (value -> INT .)
    NOT             reduce using rule 37 (value -> INT .)
    LESS_THAN       reduce using rule 37 (value -> INT .)
    GREATER_THAN    reduce using rule 37 (value -> INT .)
    LESS_THAN_EQUAL reduce using rule 37 (value -> INT .)
    GREATER_THAN_EQUAL reduce using rule 37 (value -> INT .)
    NOT_EQUAL       reduce using rule 37 (value -> INT .)
    EQUAL_EQUAL     reduce using rule 37 (value -> INT .)
    SEMICOLON       reduce using rule 37 (value -> INT .)
    RPAREN          reduce using rule 37 (value -> INT .)
    COMMA           reduce using rule 37 (value -> INT .)
    LBRACE          reduce using rule 37 (value -> INT .)


state 14

    (38) value -> FLOAT .

    AND             reduce using rule 38 (value -> FLOAT .)
    OR              reduce using rule 38 (value -> FLOAT .)
    NOT             reduce using rule 38 (value -> FLOAT .)
    LESS_THAN       reduce using rule 38 (value -> FLOAT .)
    GREATER_THAN    reduce using rule 38 (value -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 38 (value -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 38 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 38 (value -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 38 (value -> FLOAT .)
    SEMICOLON       reduce using rule 38 (value -> FLOAT .)
    RPAREN          reduce using rule 38 (value -> FLOAT .)
    COMMA           reduce using rule 38 (value -> FLOAT .)
    LBRACE          reduce using rule 38 (value -> FLOAT .)


state 15

    (39) value -> STRING .

    AND             reduce using rule 39 (value -> STRING .)
    OR              reduce using rule 39 (value -> STRING .)
    NOT             reduce using rule 39 (value -> STRING .)
    LESS_THAN       reduce using rule 39 (value -> STRING .)
    GREATER_THAN    reduce using rule 39 (value -> STRING .)
    LESS_THAN_EQUAL reduce using rule 39 (value -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 39 (value -> STRING .)
    NOT_EQUAL       reduce using rule 39 (value -> STRING .)
    EQUAL_EQUAL     reduce using rule 39 (value -> STRING .)
    SEMICOLON       reduce using rule 39 (value -> STRING .)
    RPAREN          reduce using rule 39 (value -> STRING .)
    COMMA           reduce using rule 39 (value -> STRING .)
    LBRACE          reduce using rule 39 (value -> STRING .)


state 16

    (40) value -> CHAR .

    AND             reduce using rule 40 (value -> CHAR .)
    OR              reduce using rule 40 (value -> CHAR .)
    NOT             reduce using rule 40 (value -> CHAR .)
    LESS_THAN       reduce using rule 40 (value -> CHAR .)
    GREATER_THAN    reduce using rule 40 (value -> CHAR .)
    LESS_THAN_EQUAL reduce using rule 40 (value -> CHAR .)
    GREATER_THAN_EQUAL reduce using rule 40 (value -> CHAR .)
    NOT_EQUAL       reduce using rule 40 (value -> CHAR .)
    EQUAL_EQUAL     reduce using rule 40 (value -> CHAR .)
    SEMICOLON       reduce using rule 40 (value -> CHAR .)
    RPAREN          reduce using rule 40 (value -> CHAR .)
    COMMA           reduce using rule 40 (value -> CHAR .)
    LBRACE          reduce using rule 40 (value -> CHAR .)


state 17

    (41) value -> BOOL .

    AND             reduce using rule 41 (value -> BOOL .)
    OR              reduce using rule 41 (value -> BOOL .)
    NOT             reduce using rule 41 (value -> BOOL .)
    LESS_THAN       reduce using rule 41 (value -> BOOL .)
    GREATER_THAN    reduce using rule 41 (value -> BOOL .)
    LESS_THAN_EQUAL reduce using rule 41 (value -> BOOL .)
    GREATER_THAN_EQUAL reduce using rule 41 (value -> BOOL .)
    NOT_EQUAL       reduce using rule 41 (value -> BOOL .)
    EQUAL_EQUAL     reduce using rule 41 (value -> BOOL .)
    SEMICOLON       reduce using rule 41 (value -> BOOL .)
    RPAREN          reduce using rule 41 (value -> BOOL .)
    COMMA           reduce using rule 41 (value -> BOOL .)
    LBRACE          reduce using rule 41 (value -> BOOL .)


state 18

    (13) code_block -> code_line code_block .

    $end            reduce using rule 13 (code_block -> code_line code_block .)
    RBRACE          reduce using rule 13 (code_block -> code_line code_block .)


state 19

    (3) if_statement -> IF LPAREN . comparison_value RPAREN block_function
    (4) if_statement -> IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (29) comparison_value -> . value comparison value
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    comparison_value               shift and go to state 37
    value                          shift and go to state 38

state 20

    (5) if_statement -> IF function . comparison value block_function
    (6) if_statement -> IF function . comparison value block_function else_if_statement
    (31) comparison -> . LESS_THAN
    (32) comparison -> . GREATER_THAN
    (33) comparison -> . LESS_THAN_EQUAL
    (34) comparison -> . GREATER_THAN_EQUAL
    (35) comparison -> . NOT_EQUAL
    (36) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 23
    GREATER_THAN    shift and go to state 24
    LESS_THAN_EQUAL shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    NOT_EQUAL       shift and go to state 27
    EQUAL_EQUAL     shift and go to state 28

    comparison                     shift and go to state 40

state 21

    (19) function -> ID . LPAREN RPAREN
    (20) function -> ID . LPAREN value RPAREN
    (21) function -> ID . LPAREN arguments_production RPAREN
    (22) function -> ID . DOT ID LPAREN RPAREN
    (23) function -> ID . DOT ID LPAREN value RPAREN
    (24) function -> ID . DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 35
    DOT             shift and go to state 36


state 22

    (28) comparison_production -> comparison_value comparison . comparison_production
    (27) comparison_production -> . comparison_value
    (28) comparison_production -> . comparison_value comparison comparison_production
    (29) comparison_value -> . value comparison value
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    comparison_value               shift and go to state 6
    comparison_production          shift and go to state 41
    value                          shift and go to state 38

state 23

    (31) comparison -> LESS_THAN .

    INT             reduce using rule 31 (comparison -> LESS_THAN .)
    FLOAT           reduce using rule 31 (comparison -> LESS_THAN .)
    STRING          reduce using rule 31 (comparison -> LESS_THAN .)
    CHAR            reduce using rule 31 (comparison -> LESS_THAN .)
    BOOL            reduce using rule 31 (comparison -> LESS_THAN .)
    ID              reduce using rule 31 (comparison -> LESS_THAN .)


state 24

    (32) comparison -> GREATER_THAN .

    INT             reduce using rule 32 (comparison -> GREATER_THAN .)
    FLOAT           reduce using rule 32 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 32 (comparison -> GREATER_THAN .)
    CHAR            reduce using rule 32 (comparison -> GREATER_THAN .)
    BOOL            reduce using rule 32 (comparison -> GREATER_THAN .)
    ID              reduce using rule 32 (comparison -> GREATER_THAN .)


state 25

    (33) comparison -> LESS_THAN_EQUAL .

    INT             reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)
    STRING          reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)
    CHAR            reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)
    BOOL            reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)
    ID              reduce using rule 33 (comparison -> LESS_THAN_EQUAL .)


state 26

    (34) comparison -> GREATER_THAN_EQUAL .

    INT             reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)
    STRING          reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)
    CHAR            reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)
    BOOL            reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)
    ID              reduce using rule 34 (comparison -> GREATER_THAN_EQUAL .)


state 27

    (35) comparison -> NOT_EQUAL .

    INT             reduce using rule 35 (comparison -> NOT_EQUAL .)
    FLOAT           reduce using rule 35 (comparison -> NOT_EQUAL .)
    STRING          reduce using rule 35 (comparison -> NOT_EQUAL .)
    CHAR            reduce using rule 35 (comparison -> NOT_EQUAL .)
    BOOL            reduce using rule 35 (comparison -> NOT_EQUAL .)
    ID              reduce using rule 35 (comparison -> NOT_EQUAL .)


state 28

    (36) comparison -> EQUAL_EQUAL .

    INT             reduce using rule 36 (comparison -> EQUAL_EQUAL .)
    FLOAT           reduce using rule 36 (comparison -> EQUAL_EQUAL .)
    STRING          reduce using rule 36 (comparison -> EQUAL_EQUAL .)
    CHAR            reduce using rule 36 (comparison -> EQUAL_EQUAL .)
    BOOL            reduce using rule 36 (comparison -> EQUAL_EQUAL .)
    ID              reduce using rule 36 (comparison -> EQUAL_EQUAL .)


state 29

    (30) logic_value -> value logic_operator . value
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 42

state 30

    (29) comparison_value -> value comparison . value
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 43

state 31

    (43) logic_operator -> AND .

    INT             reduce using rule 43 (logic_operator -> AND .)
    FLOAT           reduce using rule 43 (logic_operator -> AND .)
    STRING          reduce using rule 43 (logic_operator -> AND .)
    CHAR            reduce using rule 43 (logic_operator -> AND .)
    BOOL            reduce using rule 43 (logic_operator -> AND .)
    ID              reduce using rule 43 (logic_operator -> AND .)


state 32

    (44) logic_operator -> OR .

    INT             reduce using rule 44 (logic_operator -> OR .)
    FLOAT           reduce using rule 44 (logic_operator -> OR .)
    STRING          reduce using rule 44 (logic_operator -> OR .)
    CHAR            reduce using rule 44 (logic_operator -> OR .)
    BOOL            reduce using rule 44 (logic_operator -> OR .)
    ID              reduce using rule 44 (logic_operator -> OR .)


state 33

    (45) logic_operator -> NOT .

    INT             reduce using rule 45 (logic_operator -> NOT .)
    FLOAT           reduce using rule 45 (logic_operator -> NOT .)
    STRING          reduce using rule 45 (logic_operator -> NOT .)
    CHAR            reduce using rule 45 (logic_operator -> NOT .)
    BOOL            reduce using rule 45 (logic_operator -> NOT .)
    ID              reduce using rule 45 (logic_operator -> NOT .)


state 34

    (14) code_line -> code SEMICOLON .

    ID              reduce using rule 14 (code_line -> code SEMICOLON .)
    INT             reduce using rule 14 (code_line -> code SEMICOLON .)
    FLOAT           reduce using rule 14 (code_line -> code SEMICOLON .)
    STRING          reduce using rule 14 (code_line -> code SEMICOLON .)
    CHAR            reduce using rule 14 (code_line -> code SEMICOLON .)
    BOOL            reduce using rule 14 (code_line -> code SEMICOLON .)
    $end            reduce using rule 14 (code_line -> code SEMICOLON .)
    RBRACE          reduce using rule 14 (code_line -> code SEMICOLON .)


state 35

    (19) function -> ID LPAREN . RPAREN
    (20) function -> ID LPAREN . value RPAREN
    (21) function -> ID LPAREN . arguments_production RPAREN
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID
    (25) arguments_production -> . value
    (26) arguments_production -> . value COMMA arguments_production

    RPAREN          shift and go to state 44
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 45
    arguments_production           shift and go to state 46

state 36

    (22) function -> ID DOT . ID LPAREN RPAREN
    (23) function -> ID DOT . ID LPAREN value RPAREN
    (24) function -> ID DOT . ID LPAREN arguments_production RPAREN

    ID              shift and go to state 47


state 37

    (3) if_statement -> IF LPAREN comparison_value . RPAREN block_function
    (4) if_statement -> IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 48


state 38

    (29) comparison_value -> value . comparison value
    (31) comparison -> . LESS_THAN
    (32) comparison -> . GREATER_THAN
    (33) comparison -> . LESS_THAN_EQUAL
    (34) comparison -> . GREATER_THAN_EQUAL
    (35) comparison -> . NOT_EQUAL
    (36) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 23
    GREATER_THAN    shift and go to state 24
    LESS_THAN_EQUAL shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    NOT_EQUAL       shift and go to state 27
    EQUAL_EQUAL     shift and go to state 28

    comparison                     shift and go to state 30

state 39

    (42) value -> ID .

    LESS_THAN       reduce using rule 42 (value -> ID .)
    GREATER_THAN    reduce using rule 42 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 42 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 42 (value -> ID .)
    NOT_EQUAL       reduce using rule 42 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 42 (value -> ID .)
    SEMICOLON       reduce using rule 42 (value -> ID .)
    RPAREN          reduce using rule 42 (value -> ID .)
    COMMA           reduce using rule 42 (value -> ID .)
    LBRACE          reduce using rule 42 (value -> ID .)


state 40

    (5) if_statement -> IF function comparison . value block_function
    (6) if_statement -> IF function comparison . value block_function else_if_statement
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 49

state 41

    (28) comparison_production -> comparison_value comparison comparison_production .

    SEMICOLON       reduce using rule 28 (comparison_production -> comparison_value comparison comparison_production .)


state 42

    (30) logic_value -> value logic_operator value .

    SEMICOLON       reduce using rule 30 (logic_value -> value logic_operator value .)


state 43

    (29) comparison_value -> value comparison value .

    LESS_THAN       reduce using rule 29 (comparison_value -> value comparison value .)
    GREATER_THAN    reduce using rule 29 (comparison_value -> value comparison value .)
    LESS_THAN_EQUAL reduce using rule 29 (comparison_value -> value comparison value .)
    GREATER_THAN_EQUAL reduce using rule 29 (comparison_value -> value comparison value .)
    NOT_EQUAL       reduce using rule 29 (comparison_value -> value comparison value .)
    EQUAL_EQUAL     reduce using rule 29 (comparison_value -> value comparison value .)
    SEMICOLON       reduce using rule 29 (comparison_value -> value comparison value .)
    RPAREN          reduce using rule 29 (comparison_value -> value comparison value .)


state 44

    (19) function -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 19 (function -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 19 (function -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 19 (function -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 19 (function -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 19 (function -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 19 (function -> ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 19 (function -> ID LPAREN RPAREN .)


state 45

    (20) function -> ID LPAREN value . RPAREN
    (25) arguments_production -> value .
    (26) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 50
    COMMA           shift and go to state 51

  ! RPAREN          [ reduce using rule 25 (arguments_production -> value .) ]


state 46

    (21) function -> ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 52


state 47

    (22) function -> ID DOT ID . LPAREN RPAREN
    (23) function -> ID DOT ID . LPAREN value RPAREN
    (24) function -> ID DOT ID . LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 53


state 48

    (3) if_statement -> IF LPAREN comparison_value RPAREN . block_function
    (4) if_statement -> IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (10) block_function -> . LBRACE RBRACE
    (11) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 55

    block_function                 shift and go to state 54

state 49

    (5) if_statement -> IF function comparison value . block_function
    (6) if_statement -> IF function comparison value . block_function else_if_statement
    (10) block_function -> . LBRACE RBRACE
    (11) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 55

    block_function                 shift and go to state 56

state 50

    (20) function -> ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 20 (function -> ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 20 (function -> ID LPAREN value RPAREN .)


state 51

    (26) arguments_production -> value COMMA . arguments_production
    (25) arguments_production -> . value
    (26) arguments_production -> . value COMMA arguments_production
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 57
    arguments_production           shift and go to state 58

state 52

    (21) function -> ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 21 (function -> ID LPAREN arguments_production RPAREN .)


state 53

    (22) function -> ID DOT ID LPAREN . RPAREN
    (23) function -> ID DOT ID LPAREN . value RPAREN
    (24) function -> ID DOT ID LPAREN . arguments_production RPAREN
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID
    (25) arguments_production -> . value
    (26) arguments_production -> . value COMMA arguments_production

    RPAREN          shift and go to state 59
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 60
    arguments_production           shift and go to state 61

state 54

    (3) if_statement -> IF LPAREN comparison_value RPAREN block_function .
    (4) if_statement -> IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (7) else_if_statement -> . ELSE block_function
    (8) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    $end            reduce using rule 3 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    ELSE            shift and go to state 63

    else_if_statement              shift and go to state 62

state 55

    (10) block_function -> LBRACE . RBRACE
    (11) block_function -> LBRACE . code_block RBRACE
    (12) code_block -> . code_line
    (13) code_block -> . code_line code_block
    (14) code_line -> . code SEMICOLON
    (15) code -> . function
    (16) code -> . comparison_production
    (17) code -> . value
    (18) code -> . logic_value
    (19) function -> . ID LPAREN RPAREN
    (20) function -> . ID LPAREN value RPAREN
    (21) function -> . ID LPAREN arguments_production RPAREN
    (22) function -> . ID DOT ID LPAREN RPAREN
    (23) function -> . ID DOT ID LPAREN value RPAREN
    (24) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (27) comparison_production -> . comparison_value
    (28) comparison_production -> . comparison_value comparison comparison_production
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID
    (30) logic_value -> . value logic_operator value
    (29) comparison_value -> . value comparison value

    RBRACE          shift and go to state 64
    ID              shift and go to state 12
    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17

    code_block                     shift and go to state 65
    code_line                      shift and go to state 4
    code                           shift and go to state 9
    function                       shift and go to state 7
    comparison_production          shift and go to state 10
    value                          shift and go to state 8
    logic_value                    shift and go to state 11
    comparison_value               shift and go to state 6

state 56

    (5) if_statement -> IF function comparison value block_function .
    (6) if_statement -> IF function comparison value block_function . else_if_statement
    (7) else_if_statement -> . ELSE block_function
    (8) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    $end            reduce using rule 5 (if_statement -> IF function comparison value block_function .)
    ELSE            shift and go to state 63

    else_if_statement              shift and go to state 66

state 57

    (25) arguments_production -> value .
    (26) arguments_production -> value . COMMA arguments_production

    RPAREN          reduce using rule 25 (arguments_production -> value .)
    COMMA           shift and go to state 51


state 58

    (26) arguments_production -> value COMMA arguments_production .

    RPAREN          reduce using rule 26 (arguments_production -> value COMMA arguments_production .)


state 59

    (22) function -> ID DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 22 (function -> ID DOT ID LPAREN RPAREN .)


state 60

    (23) function -> ID DOT ID LPAREN value . RPAREN
    (25) arguments_production -> value .
    (26) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 67
    COMMA           shift and go to state 51

  ! RPAREN          [ reduce using rule 25 (arguments_production -> value .) ]


state 61

    (24) function -> ID DOT ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 68


state 62

    (4) if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .

    $end            reduce using rule 4 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 63

    (7) else_if_statement -> ELSE . block_function
    (8) else_if_statement -> ELSE . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> ELSE . IF function comparison value block_function else_if_statement
    (10) block_function -> . LBRACE RBRACE
    (11) block_function -> . LBRACE code_block RBRACE

    IF              shift and go to state 70
    LBRACE          shift and go to state 55

    block_function                 shift and go to state 69

state 64

    (10) block_function -> LBRACE RBRACE .

    ELSE            reduce using rule 10 (block_function -> LBRACE RBRACE .)
    $end            reduce using rule 10 (block_function -> LBRACE RBRACE .)


state 65

    (11) block_function -> LBRACE code_block . RBRACE

    RBRACE          shift and go to state 71


state 66

    (6) if_statement -> IF function comparison value block_function else_if_statement .

    $end            reduce using rule 6 (if_statement -> IF function comparison value block_function else_if_statement .)


state 67

    (23) function -> ID DOT ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 23 (function -> ID DOT ID LPAREN value RPAREN .)


state 68

    (24) function -> ID DOT ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 24 (function -> ID DOT ID LPAREN arguments_production RPAREN .)


state 69

    (7) else_if_statement -> ELSE block_function .

    $end            reduce using rule 7 (else_if_statement -> ELSE block_function .)


state 70

    (8) else_if_statement -> ELSE IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> ELSE IF . function comparison value block_function else_if_statement
    (19) function -> . ID LPAREN RPAREN
    (20) function -> . ID LPAREN value RPAREN
    (21) function -> . ID LPAREN arguments_production RPAREN
    (22) function -> . ID DOT ID LPAREN RPAREN
    (23) function -> . ID DOT ID LPAREN value RPAREN
    (24) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 72
    ID              shift and go to state 21

    function                       shift and go to state 73

state 71

    (11) block_function -> LBRACE code_block RBRACE .

    ELSE            reduce using rule 11 (block_function -> LBRACE code_block RBRACE .)
    $end            reduce using rule 11 (block_function -> LBRACE code_block RBRACE .)


state 72

    (8) else_if_statement -> ELSE IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (29) comparison_value -> . value comparison value
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    comparison_value               shift and go to state 74
    value                          shift and go to state 38

state 73

    (9) else_if_statement -> ELSE IF function . comparison value block_function else_if_statement
    (31) comparison -> . LESS_THAN
    (32) comparison -> . GREATER_THAN
    (33) comparison -> . LESS_THAN_EQUAL
    (34) comparison -> . GREATER_THAN_EQUAL
    (35) comparison -> . NOT_EQUAL
    (36) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 23
    GREATER_THAN    shift and go to state 24
    LESS_THAN_EQUAL shift and go to state 25
    GREATER_THAN_EQUAL shift and go to state 26
    NOT_EQUAL       shift and go to state 27
    EQUAL_EQUAL     shift and go to state 28

    comparison                     shift and go to state 75

state 74

    (8) else_if_statement -> ELSE IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 76


state 75

    (9) else_if_statement -> ELSE IF function comparison . value block_function else_if_statement
    (37) value -> . INT
    (38) value -> . FLOAT
    (39) value -> . STRING
    (40) value -> . CHAR
    (41) value -> . BOOL
    (42) value -> . ID

    INT             shift and go to state 13
    FLOAT           shift and go to state 14
    STRING          shift and go to state 15
    CHAR            shift and go to state 16
    BOOL            shift and go to state 17
    ID              shift and go to state 39

    value                          shift and go to state 77

state 76

    (8) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (10) block_function -> . LBRACE RBRACE
    (11) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 55

    block_function                 shift and go to state 78

state 77

    (9) else_if_statement -> ELSE IF function comparison value . block_function else_if_statement
    (10) block_function -> . LBRACE RBRACE
    (11) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 55

    block_function                 shift and go to state 79

state 78

    (8) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (7) else_if_statement -> . ELSE block_function
    (8) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 63

    else_if_statement              shift and go to state 80

state 79

    (9) else_if_statement -> ELSE IF function comparison value block_function . else_if_statement
    (7) else_if_statement -> . ELSE block_function
    (8) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (9) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 63

    else_if_statement              shift and go to state 81

state 80

    (8) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .

    $end            reduce using rule 8 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 81

    (9) else_if_statement -> ELSE IF function comparison value block_function else_if_statement .

    $end            reduce using rule 9 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 45 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 60 resolved as shift
