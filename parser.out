Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ARROW
    AS
    ASYNC
    AT
    AWAIT
    BREAK
    CASE
    COLON
    COMMENS
    CONTINUE
    CRATE
    DOUBLE_COLON
    DOUBLE_QUOTE
    DYN
    ENUM
    EXTERN
    FN
    FOR
    IMPL
    IN
    LOOP
    MAIN
    MINUS
    MOD
    MOVE
    NAME_FUNCTION
    PUB
    REF
    RETURN
    SELF
    STATIC
    STRUCT
    SUPER
    TRAIT
    TYPE
    UNION
    UNSAFE
    USE
    WHERE
    WHILE
    sELF

Grammar

Rule 0     S' -> principal
Rule 1     principal -> body
Rule 2     principal -> body principal
Rule 3     body -> code_block
Rule 4     body -> control_structure
Rule 5     control_structure -> if_statement
Rule 6     control_structure -> match_statement
Rule 7     match_body_line -> match_cases
Rule 8     match_pattern -> value
Rule 9     match_pattern -> value PIPE match_pattern
Rule 10    match_body -> match_body_line
Rule 11    match_body -> match_body_line match_body match_case_default
Rule 12    match_statement -> MATCH ID LBRACE match_body RBRACE
Rule 13    match_cases -> match_case
Rule 14    match_cases -> match_case match_cases
Rule 15    match_case -> match_pattern FAT_ARROW block_function
Rule 16    match_case_default -> UNDERSCORE FAT_ARROW block_function
Rule 17    if_statement -> IF LPAREN comparison_value RPAREN block_function
Rule 18    if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 19    if_statement -> IF function comparison value block_function
Rule 20    if_statement -> IF function comparison value block_function else_if_statement
Rule 21    if_statement -> IF LET EQUAL value block_function
Rule 22    if_statement -> IF LET EQUAL value else_if_statement
Rule 23    else_if_statement -> ELSE block_function
Rule 24    else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
Rule 25    else_if_statement -> ELSE IF function comparison value block_function else_if_statement
Rule 26    block_function -> LBRACE RBRACE
Rule 27    block_function -> LBRACE code_block RBRACE
Rule 28    code_block -> code_line
Rule 29    code_block -> code_line code_block
Rule 30    code_line -> code SEMICOLON
Rule 31    code -> function
Rule 32    code -> comparison_production
Rule 33    code -> value
Rule 34    code -> logic_value
Rule 35    code -> statement
Rule 36    function -> ID LPAREN RPAREN
Rule 37    function -> ID LPAREN value RPAREN
Rule 38    function -> ID LPAREN arguments_production RPAREN
Rule 39    function -> ID DOT ID LPAREN RPAREN
Rule 40    function -> ID DOT ID LPAREN value RPAREN
Rule 41    function -> ID DOT ID LPAREN arguments_production RPAREN
Rule 42    print -> PRINT LPAREN value RPAREN
Rule 43    print -> PRINT LPAREN STRING DOT ID RPAREN
Rule 44    statement -> LET ID EQUAL value
Rule 45    statement -> LET MUT ID EQUAL value
Rule 46    statement -> CONST ID EQUAL value
Rule 47    statement -> ID EQUAL ID
Rule 48    statement -> ID EQUAL aritmetic_operation_production
Rule 49    statement -> LET ID EQUAL data_structures
Rule 50    statement -> ID EQUAL data_structures
Rule 51    statement -> LET MUT ID EQUAL data_structures
Rule 52    data_structures -> tuple
Rule 53    data_structures -> array
Rule 54    array -> LBRACKET array_elements RBRACKET
Rule 55    array_elements -> INT
Rule 56    array_elements -> array_elements COMMA INT
Rule 57    tuple -> LPAREN arguments_production RPAREN
Rule 58    arguments_production -> value
Rule 59    arguments_production -> value COMMA arguments_production
Rule 60    comparison_production -> comparison_value
Rule 61    comparison_production -> comparison_value comparison comparison_production
Rule 62    comparison_value -> value comparison value
Rule 63    logic_value -> value logic_operator value
Rule 64    aritmetic_operation_production -> aritmetic_operation
Rule 65    aritmetic_operation_production -> value aritmetic_operator aritmetic_operation
Rule 66    aritmetic_operation -> value aritmetic_operator value
Rule 67    aritmetic_operator -> PLUS
Rule 68    aritmetic_operator -> MINUS_OPERATOR
Rule 69    aritmetic_operator -> TIMES
Rule 70    aritmetic_operator -> DIVIDE
Rule 71    aritmetic_operator -> MODULE
Rule 72    comparison -> LESS_THAN
Rule 73    comparison -> GREATER_THAN
Rule 74    comparison -> LESS_THAN_EQUAL
Rule 75    comparison -> GREATER_THAN_EQUAL
Rule 76    comparison -> NOT_EQUAL
Rule 77    comparison -> EQUAL_EQUAL
Rule 78    value -> INT
Rule 79    value -> FLOAT
Rule 80    value -> STRING
Rule 81    value -> CHAR
Rule 82    value -> BOOL
Rule 83    value -> ID
Rule 84    value -> array
Rule 85    logic_operator -> AND
Rule 86    logic_operator -> OR
Rule 87    logic_operator -> NOT

Terminals, with rules where they appear

AMPERSAND            : 
AND                  : 85
ARROW                : 
AS                   : 
ASYNC                : 
AT                   : 
AWAIT                : 
BOOL                 : 82
BREAK                : 
CASE                 : 
CHAR                 : 81
COLON                : 
COMMA                : 56 59
COMMENS              : 
CONST                : 46
CONTINUE             : 
CRATE                : 
DIVIDE               : 70
DOT                  : 39 40 41 43
DOUBLE_COLON         : 
DOUBLE_QUOTE         : 
DYN                  : 
ELSE                 : 23 24 25
ENUM                 : 
EQUAL                : 21 22 44 45 46 47 48 49 50 51
EQUAL_EQUAL          : 77
EXTERN               : 
FAT_ARROW            : 15 16
FLOAT                : 79
FN                   : 
FOR                  : 
GREATER_THAN         : 73
GREATER_THAN_EQUAL   : 75
ID                   : 12 36 37 38 39 39 40 40 41 41 43 44 45 46 47 47 48 49 50 51 83
IF                   : 17 18 19 20 21 22 24 25
IMPL                 : 
IN                   : 
INT                  : 55 56 78
LBRACE               : 12 26 27
LBRACKET             : 54
LESS_THAN            : 72
LESS_THAN_EQUAL      : 74
LET                  : 21 22 44 45 49 51
LOOP                 : 
LPAREN               : 17 18 24 36 37 38 39 40 41 42 43 57
MAIN                 : 
MATCH                : 12
MINUS                : 
MINUS_OPERATOR       : 68
MOD                  : 
MODULE               : 71
MOVE                 : 
MUT                  : 45 51
NAME_FUNCTION        : 
NOT                  : 87
NOT_EQUAL            : 76
OR                   : 86
PIPE                 : 9
PLUS                 : 67
PRINT                : 42 43
PUB                  : 
RBRACE               : 12 26 27
RBRACKET             : 54
REF                  : 
RETURN               : 
RPAREN               : 17 18 24 36 37 38 39 40 41 42 43 57
SELF                 : 
SEMICOLON            : 30
STATIC               : 
STRING               : 43 80
STRUCT               : 
SUPER                : 
TIMES                : 69
TRAIT                : 
TYPE                 : 
UNDERSCORE           : 16
UNION                : 
UNSAFE               : 
USE                  : 
WHERE                : 
WHILE                : 
error                : 
sELF                 : 

Nonterminals, with rules where they appear

arguments_production : 38 41 57 59
aritmetic_operation  : 64 65
aritmetic_operation_production : 48
aritmetic_operator   : 65 66
array                : 53 84
array_elements       : 54 56
block_function       : 15 16 17 18 19 20 21 23 24 25
body                 : 1 2
code                 : 30
code_block           : 3 27 29
code_line            : 28 29
comparison           : 19 20 25 61 62
comparison_production : 32 61
comparison_value     : 17 18 24 60 61
control_structure    : 4
data_structures      : 49 50 51
else_if_statement    : 18 20 22 24 25
function             : 19 20 25 31
if_statement         : 5
logic_operator       : 63
logic_value          : 34
match_body           : 11 12
match_body_line      : 10 11
match_case           : 13 14
match_case_default   : 11
match_cases          : 7 14
match_pattern        : 9 15
match_statement      : 6
principal            : 2 0
print                : 
statement            : 35
tuple                : 52
value                : 8 9 19 20 21 22 25 33 37 40 42 44 45 46 58 59 62 62 63 63 65 66 66

Parsing method: LALR

state 0

    (0) S' -> . principal
    (1) principal -> . body
    (2) principal -> . body principal
    (3) body -> . code_block
    (4) body -> . control_structure
    (28) code_block -> . code_line
    (29) code_block -> . code_line code_block
    (5) control_structure -> . if_statement
    (6) control_structure -> . match_statement
    (30) code_line -> . code SEMICOLON
    (17) if_statement -> . IF LPAREN comparison_value RPAREN block_function
    (18) if_statement -> . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (19) if_statement -> . IF function comparison value block_function
    (20) if_statement -> . IF function comparison value block_function else_if_statement
    (21) if_statement -> . IF LET EQUAL value block_function
    (22) if_statement -> . IF LET EQUAL value else_if_statement
    (12) match_statement -> . MATCH ID LBRACE match_body RBRACE
    (31) code -> . function
    (32) code -> . comparison_production
    (33) code -> . value
    (34) code -> . logic_value
    (35) code -> . statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (60) comparison_production -> . comparison_value
    (61) comparison_production -> . comparison_value comparison comparison_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (63) logic_value -> . value logic_operator value
    (44) statement -> . LET ID EQUAL value
    (45) statement -> . LET MUT ID EQUAL value
    (46) statement -> . CONST ID EQUAL value
    (47) statement -> . ID EQUAL ID
    (48) statement -> . ID EQUAL aritmetic_operation_production
    (49) statement -> . LET ID EQUAL data_structures
    (50) statement -> . ID EQUAL data_structures
    (51) statement -> . LET MUT ID EQUAL data_structures
    (62) comparison_value -> . value comparison value
    (54) array -> . LBRACKET array_elements RBRACKET

    IF              shift and go to state 9
    MATCH           shift and go to state 14
    ID              shift and go to state 15
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    LET             shift and go to state 13
    CONST           shift and go to state 25
    LBRACKET        shift and go to state 26

    principal                      shift and go to state 1
    body                           shift and go to state 2
    code_block                     shift and go to state 3
    control_structure              shift and go to state 4
    code_line                      shift and go to state 5
    if_statement                   shift and go to state 6
    match_statement                shift and go to state 7
    code                           shift and go to state 8
    comparison_value               shift and go to state 10
    function                       shift and go to state 11
    value                          shift and go to state 12
    comparison_production          shift and go to state 16
    logic_value                    shift and go to state 17
    statement                      shift and go to state 18
    array                          shift and go to state 24

state 1

    (0) S' -> principal .



state 2

    (1) principal -> body .
    (2) principal -> body . principal
    (1) principal -> . body
    (2) principal -> . body principal
    (3) body -> . code_block
    (4) body -> . control_structure
    (28) code_block -> . code_line
    (29) code_block -> . code_line code_block
    (5) control_structure -> . if_statement
    (6) control_structure -> . match_statement
    (30) code_line -> . code SEMICOLON
    (17) if_statement -> . IF LPAREN comparison_value RPAREN block_function
    (18) if_statement -> . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (19) if_statement -> . IF function comparison value block_function
    (20) if_statement -> . IF function comparison value block_function else_if_statement
    (21) if_statement -> . IF LET EQUAL value block_function
    (22) if_statement -> . IF LET EQUAL value else_if_statement
    (12) match_statement -> . MATCH ID LBRACE match_body RBRACE
    (31) code -> . function
    (32) code -> . comparison_production
    (33) code -> . value
    (34) code -> . logic_value
    (35) code -> . statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (60) comparison_production -> . comparison_value
    (61) comparison_production -> . comparison_value comparison comparison_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (63) logic_value -> . value logic_operator value
    (44) statement -> . LET ID EQUAL value
    (45) statement -> . LET MUT ID EQUAL value
    (46) statement -> . CONST ID EQUAL value
    (47) statement -> . ID EQUAL ID
    (48) statement -> . ID EQUAL aritmetic_operation_production
    (49) statement -> . LET ID EQUAL data_structures
    (50) statement -> . ID EQUAL data_structures
    (51) statement -> . LET MUT ID EQUAL data_structures
    (62) comparison_value -> . value comparison value
    (54) array -> . LBRACKET array_elements RBRACKET

    $end            reduce using rule 1 (principal -> body .)
    IF              shift and go to state 9
    MATCH           shift and go to state 14
    ID              shift and go to state 15
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    LET             shift and go to state 13
    CONST           shift and go to state 25
    LBRACKET        shift and go to state 26

    body                           shift and go to state 2
    principal                      shift and go to state 27
    code_block                     shift and go to state 3
    control_structure              shift and go to state 4
    code_line                      shift and go to state 5
    if_statement                   shift and go to state 6
    match_statement                shift and go to state 7
    code                           shift and go to state 8
    comparison_value               shift and go to state 10
    function                       shift and go to state 11
    value                          shift and go to state 12
    comparison_production          shift and go to state 16
    logic_value                    shift and go to state 17
    statement                      shift and go to state 18
    array                          shift and go to state 24

state 3

    (3) body -> code_block .

    IF              reduce using rule 3 (body -> code_block .)
    MATCH           reduce using rule 3 (body -> code_block .)
    ID              reduce using rule 3 (body -> code_block .)
    INT             reduce using rule 3 (body -> code_block .)
    FLOAT           reduce using rule 3 (body -> code_block .)
    STRING          reduce using rule 3 (body -> code_block .)
    CHAR            reduce using rule 3 (body -> code_block .)
    BOOL            reduce using rule 3 (body -> code_block .)
    LET             reduce using rule 3 (body -> code_block .)
    CONST           reduce using rule 3 (body -> code_block .)
    LBRACKET        reduce using rule 3 (body -> code_block .)
    $end            reduce using rule 3 (body -> code_block .)


state 4

    (4) body -> control_structure .

    IF              reduce using rule 4 (body -> control_structure .)
    MATCH           reduce using rule 4 (body -> control_structure .)
    ID              reduce using rule 4 (body -> control_structure .)
    INT             reduce using rule 4 (body -> control_structure .)
    FLOAT           reduce using rule 4 (body -> control_structure .)
    STRING          reduce using rule 4 (body -> control_structure .)
    CHAR            reduce using rule 4 (body -> control_structure .)
    BOOL            reduce using rule 4 (body -> control_structure .)
    LET             reduce using rule 4 (body -> control_structure .)
    CONST           reduce using rule 4 (body -> control_structure .)
    LBRACKET        reduce using rule 4 (body -> control_structure .)
    $end            reduce using rule 4 (body -> control_structure .)


state 5

    (28) code_block -> code_line .
    (29) code_block -> code_line . code_block
    (28) code_block -> . code_line
    (29) code_block -> . code_line code_block
    (30) code_line -> . code SEMICOLON
    (31) code -> . function
    (32) code -> . comparison_production
    (33) code -> . value
    (34) code -> . logic_value
    (35) code -> . statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (60) comparison_production -> . comparison_value
    (61) comparison_production -> . comparison_value comparison comparison_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (63) logic_value -> . value logic_operator value
    (44) statement -> . LET ID EQUAL value
    (45) statement -> . LET MUT ID EQUAL value
    (46) statement -> . CONST ID EQUAL value
    (47) statement -> . ID EQUAL ID
    (48) statement -> . ID EQUAL aritmetic_operation_production
    (49) statement -> . LET ID EQUAL data_structures
    (50) statement -> . ID EQUAL data_structures
    (51) statement -> . LET MUT ID EQUAL data_structures
    (62) comparison_value -> . value comparison value
    (54) array -> . LBRACKET array_elements RBRACKET

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    IF              reduce using rule 28 (code_block -> code_line .)
    MATCH           reduce using rule 28 (code_block -> code_line .)
    $end            reduce using rule 28 (code_block -> code_line .)
    RBRACE          reduce using rule 28 (code_block -> code_line .)
    ID              shift and go to state 15
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    LET             shift and go to state 13
    CONST           shift and go to state 25
    LBRACKET        shift and go to state 26

  ! ID              [ reduce using rule 28 (code_block -> code_line .) ]
  ! INT             [ reduce using rule 28 (code_block -> code_line .) ]
  ! FLOAT           [ reduce using rule 28 (code_block -> code_line .) ]
  ! STRING          [ reduce using rule 28 (code_block -> code_line .) ]
  ! CHAR            [ reduce using rule 28 (code_block -> code_line .) ]
  ! BOOL            [ reduce using rule 28 (code_block -> code_line .) ]
  ! LET             [ reduce using rule 28 (code_block -> code_line .) ]
  ! CONST           [ reduce using rule 28 (code_block -> code_line .) ]
  ! LBRACKET        [ reduce using rule 28 (code_block -> code_line .) ]

    code_line                      shift and go to state 5
    code_block                     shift and go to state 28
    code                           shift and go to state 8
    function                       shift and go to state 11
    comparison_production          shift and go to state 16
    value                          shift and go to state 12
    logic_value                    shift and go to state 17
    statement                      shift and go to state 18
    comparison_value               shift and go to state 10
    array                          shift and go to state 24

state 6

    (5) control_structure -> if_statement .

    IF              reduce using rule 5 (control_structure -> if_statement .)
    MATCH           reduce using rule 5 (control_structure -> if_statement .)
    ID              reduce using rule 5 (control_structure -> if_statement .)
    INT             reduce using rule 5 (control_structure -> if_statement .)
    FLOAT           reduce using rule 5 (control_structure -> if_statement .)
    STRING          reduce using rule 5 (control_structure -> if_statement .)
    CHAR            reduce using rule 5 (control_structure -> if_statement .)
    BOOL            reduce using rule 5 (control_structure -> if_statement .)
    LET             reduce using rule 5 (control_structure -> if_statement .)
    CONST           reduce using rule 5 (control_structure -> if_statement .)
    LBRACKET        reduce using rule 5 (control_structure -> if_statement .)
    $end            reduce using rule 5 (control_structure -> if_statement .)


state 7

    (6) control_structure -> match_statement .

    IF              reduce using rule 6 (control_structure -> match_statement .)
    MATCH           reduce using rule 6 (control_structure -> match_statement .)
    ID              reduce using rule 6 (control_structure -> match_statement .)
    INT             reduce using rule 6 (control_structure -> match_statement .)
    FLOAT           reduce using rule 6 (control_structure -> match_statement .)
    STRING          reduce using rule 6 (control_structure -> match_statement .)
    CHAR            reduce using rule 6 (control_structure -> match_statement .)
    BOOL            reduce using rule 6 (control_structure -> match_statement .)
    LET             reduce using rule 6 (control_structure -> match_statement .)
    CONST           reduce using rule 6 (control_structure -> match_statement .)
    LBRACKET        reduce using rule 6 (control_structure -> match_statement .)
    $end            reduce using rule 6 (control_structure -> match_statement .)


state 8

    (30) code_line -> code . SEMICOLON

    SEMICOLON       shift and go to state 29


state 9

    (17) if_statement -> IF . LPAREN comparison_value RPAREN block_function
    (18) if_statement -> IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (19) if_statement -> IF . function comparison value block_function
    (20) if_statement -> IF . function comparison value block_function else_if_statement
    (21) if_statement -> IF . LET EQUAL value block_function
    (22) if_statement -> IF . LET EQUAL value else_if_statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 30
    LET             shift and go to state 32
    ID              shift and go to state 33

    function                       shift and go to state 31

state 10

    (60) comparison_production -> comparison_value .
    (61) comparison_production -> comparison_value . comparison comparison_production
    (72) comparison -> . LESS_THAN
    (73) comparison -> . GREATER_THAN
    (74) comparison -> . LESS_THAN_EQUAL
    (75) comparison -> . GREATER_THAN_EQUAL
    (76) comparison -> . NOT_EQUAL
    (77) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 60 (comparison_production -> comparison_value .)
    LESS_THAN       shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN_EQUAL shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    EQUAL_EQUAL     shift and go to state 40

    comparison                     shift and go to state 34

state 11

    (31) code -> function .

    SEMICOLON       reduce using rule 31 (code -> function .)


state 12

    (33) code -> value .
    (63) logic_value -> value . logic_operator value
    (62) comparison_value -> value . comparison value
    (85) logic_operator -> . AND
    (86) logic_operator -> . OR
    (87) logic_operator -> . NOT
    (72) comparison -> . LESS_THAN
    (73) comparison -> . GREATER_THAN
    (74) comparison -> . LESS_THAN_EQUAL
    (75) comparison -> . GREATER_THAN_EQUAL
    (76) comparison -> . NOT_EQUAL
    (77) comparison -> . EQUAL_EQUAL

    SEMICOLON       reduce using rule 33 (code -> value .)
    AND             shift and go to state 43
    OR              shift and go to state 44
    NOT             shift and go to state 45
    LESS_THAN       shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN_EQUAL shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    EQUAL_EQUAL     shift and go to state 40

    logic_operator                 shift and go to state 41
    comparison                     shift and go to state 42

state 13

    (44) statement -> LET . ID EQUAL value
    (45) statement -> LET . MUT ID EQUAL value
    (49) statement -> LET . ID EQUAL data_structures
    (51) statement -> LET . MUT ID EQUAL data_structures

    ID              shift and go to state 46
    MUT             shift and go to state 47


state 14

    (12) match_statement -> MATCH . ID LBRACE match_body RBRACE

    ID              shift and go to state 48


state 15

    (36) function -> ID . LPAREN RPAREN
    (37) function -> ID . LPAREN value RPAREN
    (38) function -> ID . LPAREN arguments_production RPAREN
    (39) function -> ID . DOT ID LPAREN RPAREN
    (40) function -> ID . DOT ID LPAREN value RPAREN
    (41) function -> ID . DOT ID LPAREN arguments_production RPAREN
    (83) value -> ID .
    (47) statement -> ID . EQUAL ID
    (48) statement -> ID . EQUAL aritmetic_operation_production
    (50) statement -> ID . EQUAL data_structures

    LPAREN          shift and go to state 49
    DOT             shift and go to state 50
    AND             reduce using rule 83 (value -> ID .)
    OR              reduce using rule 83 (value -> ID .)
    NOT             reduce using rule 83 (value -> ID .)
    LESS_THAN       reduce using rule 83 (value -> ID .)
    GREATER_THAN    reduce using rule 83 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 83 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 83 (value -> ID .)
    NOT_EQUAL       reduce using rule 83 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 83 (value -> ID .)
    SEMICOLON       reduce using rule 83 (value -> ID .)
    EQUAL           shift and go to state 51


state 16

    (32) code -> comparison_production .

    SEMICOLON       reduce using rule 32 (code -> comparison_production .)


state 17

    (34) code -> logic_value .

    SEMICOLON       reduce using rule 34 (code -> logic_value .)


state 18

    (35) code -> statement .

    SEMICOLON       reduce using rule 35 (code -> statement .)


state 19

    (78) value -> INT .

    AND             reduce using rule 78 (value -> INT .)
    OR              reduce using rule 78 (value -> INT .)
    NOT             reduce using rule 78 (value -> INT .)
    LESS_THAN       reduce using rule 78 (value -> INT .)
    GREATER_THAN    reduce using rule 78 (value -> INT .)
    LESS_THAN_EQUAL reduce using rule 78 (value -> INT .)
    GREATER_THAN_EQUAL reduce using rule 78 (value -> INT .)
    NOT_EQUAL       reduce using rule 78 (value -> INT .)
    EQUAL_EQUAL     reduce using rule 78 (value -> INT .)
    SEMICOLON       reduce using rule 78 (value -> INT .)
    RPAREN          reduce using rule 78 (value -> INT .)
    COMMA           reduce using rule 78 (value -> INT .)
    PLUS            reduce using rule 78 (value -> INT .)
    MINUS_OPERATOR  reduce using rule 78 (value -> INT .)
    TIMES           reduce using rule 78 (value -> INT .)
    DIVIDE          reduce using rule 78 (value -> INT .)
    MODULE          reduce using rule 78 (value -> INT .)
    LBRACE          reduce using rule 78 (value -> INT .)
    ELSE            reduce using rule 78 (value -> INT .)
    PIPE            reduce using rule 78 (value -> INT .)
    FAT_ARROW       reduce using rule 78 (value -> INT .)


state 20

    (79) value -> FLOAT .

    AND             reduce using rule 79 (value -> FLOAT .)
    OR              reduce using rule 79 (value -> FLOAT .)
    NOT             reduce using rule 79 (value -> FLOAT .)
    LESS_THAN       reduce using rule 79 (value -> FLOAT .)
    GREATER_THAN    reduce using rule 79 (value -> FLOAT .)
    LESS_THAN_EQUAL reduce using rule 79 (value -> FLOAT .)
    GREATER_THAN_EQUAL reduce using rule 79 (value -> FLOAT .)
    NOT_EQUAL       reduce using rule 79 (value -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 79 (value -> FLOAT .)
    SEMICOLON       reduce using rule 79 (value -> FLOAT .)
    RPAREN          reduce using rule 79 (value -> FLOAT .)
    COMMA           reduce using rule 79 (value -> FLOAT .)
    PLUS            reduce using rule 79 (value -> FLOAT .)
    MINUS_OPERATOR  reduce using rule 79 (value -> FLOAT .)
    TIMES           reduce using rule 79 (value -> FLOAT .)
    DIVIDE          reduce using rule 79 (value -> FLOAT .)
    MODULE          reduce using rule 79 (value -> FLOAT .)
    LBRACE          reduce using rule 79 (value -> FLOAT .)
    ELSE            reduce using rule 79 (value -> FLOAT .)
    PIPE            reduce using rule 79 (value -> FLOAT .)
    FAT_ARROW       reduce using rule 79 (value -> FLOAT .)


state 21

    (80) value -> STRING .

    AND             reduce using rule 80 (value -> STRING .)
    OR              reduce using rule 80 (value -> STRING .)
    NOT             reduce using rule 80 (value -> STRING .)
    LESS_THAN       reduce using rule 80 (value -> STRING .)
    GREATER_THAN    reduce using rule 80 (value -> STRING .)
    LESS_THAN_EQUAL reduce using rule 80 (value -> STRING .)
    GREATER_THAN_EQUAL reduce using rule 80 (value -> STRING .)
    NOT_EQUAL       reduce using rule 80 (value -> STRING .)
    EQUAL_EQUAL     reduce using rule 80 (value -> STRING .)
    SEMICOLON       reduce using rule 80 (value -> STRING .)
    RPAREN          reduce using rule 80 (value -> STRING .)
    COMMA           reduce using rule 80 (value -> STRING .)
    PLUS            reduce using rule 80 (value -> STRING .)
    MINUS_OPERATOR  reduce using rule 80 (value -> STRING .)
    TIMES           reduce using rule 80 (value -> STRING .)
    DIVIDE          reduce using rule 80 (value -> STRING .)
    MODULE          reduce using rule 80 (value -> STRING .)
    LBRACE          reduce using rule 80 (value -> STRING .)
    ELSE            reduce using rule 80 (value -> STRING .)
    PIPE            reduce using rule 80 (value -> STRING .)
    FAT_ARROW       reduce using rule 80 (value -> STRING .)


state 22

    (81) value -> CHAR .

    AND             reduce using rule 81 (value -> CHAR .)
    OR              reduce using rule 81 (value -> CHAR .)
    NOT             reduce using rule 81 (value -> CHAR .)
    LESS_THAN       reduce using rule 81 (value -> CHAR .)
    GREATER_THAN    reduce using rule 81 (value -> CHAR .)
    LESS_THAN_EQUAL reduce using rule 81 (value -> CHAR .)
    GREATER_THAN_EQUAL reduce using rule 81 (value -> CHAR .)
    NOT_EQUAL       reduce using rule 81 (value -> CHAR .)
    EQUAL_EQUAL     reduce using rule 81 (value -> CHAR .)
    SEMICOLON       reduce using rule 81 (value -> CHAR .)
    RPAREN          reduce using rule 81 (value -> CHAR .)
    COMMA           reduce using rule 81 (value -> CHAR .)
    PLUS            reduce using rule 81 (value -> CHAR .)
    MINUS_OPERATOR  reduce using rule 81 (value -> CHAR .)
    TIMES           reduce using rule 81 (value -> CHAR .)
    DIVIDE          reduce using rule 81 (value -> CHAR .)
    MODULE          reduce using rule 81 (value -> CHAR .)
    LBRACE          reduce using rule 81 (value -> CHAR .)
    ELSE            reduce using rule 81 (value -> CHAR .)
    PIPE            reduce using rule 81 (value -> CHAR .)
    FAT_ARROW       reduce using rule 81 (value -> CHAR .)


state 23

    (82) value -> BOOL .

    AND             reduce using rule 82 (value -> BOOL .)
    OR              reduce using rule 82 (value -> BOOL .)
    NOT             reduce using rule 82 (value -> BOOL .)
    LESS_THAN       reduce using rule 82 (value -> BOOL .)
    GREATER_THAN    reduce using rule 82 (value -> BOOL .)
    LESS_THAN_EQUAL reduce using rule 82 (value -> BOOL .)
    GREATER_THAN_EQUAL reduce using rule 82 (value -> BOOL .)
    NOT_EQUAL       reduce using rule 82 (value -> BOOL .)
    EQUAL_EQUAL     reduce using rule 82 (value -> BOOL .)
    SEMICOLON       reduce using rule 82 (value -> BOOL .)
    RPAREN          reduce using rule 82 (value -> BOOL .)
    COMMA           reduce using rule 82 (value -> BOOL .)
    PLUS            reduce using rule 82 (value -> BOOL .)
    MINUS_OPERATOR  reduce using rule 82 (value -> BOOL .)
    TIMES           reduce using rule 82 (value -> BOOL .)
    DIVIDE          reduce using rule 82 (value -> BOOL .)
    MODULE          reduce using rule 82 (value -> BOOL .)
    LBRACE          reduce using rule 82 (value -> BOOL .)
    ELSE            reduce using rule 82 (value -> BOOL .)
    PIPE            reduce using rule 82 (value -> BOOL .)
    FAT_ARROW       reduce using rule 82 (value -> BOOL .)


state 24

    (84) value -> array .

    AND             reduce using rule 84 (value -> array .)
    OR              reduce using rule 84 (value -> array .)
    NOT             reduce using rule 84 (value -> array .)
    LESS_THAN       reduce using rule 84 (value -> array .)
    GREATER_THAN    reduce using rule 84 (value -> array .)
    LESS_THAN_EQUAL reduce using rule 84 (value -> array .)
    GREATER_THAN_EQUAL reduce using rule 84 (value -> array .)
    NOT_EQUAL       reduce using rule 84 (value -> array .)
    EQUAL_EQUAL     reduce using rule 84 (value -> array .)
    SEMICOLON       reduce using rule 84 (value -> array .)
    RPAREN          reduce using rule 84 (value -> array .)
    COMMA           reduce using rule 84 (value -> array .)
    LBRACE          reduce using rule 84 (value -> array .)
    ELSE            reduce using rule 84 (value -> array .)
    PIPE            reduce using rule 84 (value -> array .)
    FAT_ARROW       reduce using rule 84 (value -> array .)
    PLUS            reduce using rule 84 (value -> array .)
    MINUS_OPERATOR  reduce using rule 84 (value -> array .)
    TIMES           reduce using rule 84 (value -> array .)
    DIVIDE          reduce using rule 84 (value -> array .)
    MODULE          reduce using rule 84 (value -> array .)


state 25

    (46) statement -> CONST . ID EQUAL value

    ID              shift and go to state 52


state 26

    (54) array -> LBRACKET . array_elements RBRACKET
    (55) array_elements -> . INT
    (56) array_elements -> . array_elements COMMA INT

    INT             shift and go to state 54

    array_elements                 shift and go to state 53

state 27

    (2) principal -> body principal .

    $end            reduce using rule 2 (principal -> body principal .)


state 28

    (29) code_block -> code_line code_block .

    IF              reduce using rule 29 (code_block -> code_line code_block .)
    MATCH           reduce using rule 29 (code_block -> code_line code_block .)
    ID              reduce using rule 29 (code_block -> code_line code_block .)
    INT             reduce using rule 29 (code_block -> code_line code_block .)
    FLOAT           reduce using rule 29 (code_block -> code_line code_block .)
    STRING          reduce using rule 29 (code_block -> code_line code_block .)
    CHAR            reduce using rule 29 (code_block -> code_line code_block .)
    BOOL            reduce using rule 29 (code_block -> code_line code_block .)
    LET             reduce using rule 29 (code_block -> code_line code_block .)
    CONST           reduce using rule 29 (code_block -> code_line code_block .)
    LBRACKET        reduce using rule 29 (code_block -> code_line code_block .)
    $end            reduce using rule 29 (code_block -> code_line code_block .)
    RBRACE          reduce using rule 29 (code_block -> code_line code_block .)


state 29

    (30) code_line -> code SEMICOLON .

    ID              reduce using rule 30 (code_line -> code SEMICOLON .)
    INT             reduce using rule 30 (code_line -> code SEMICOLON .)
    FLOAT           reduce using rule 30 (code_line -> code SEMICOLON .)
    STRING          reduce using rule 30 (code_line -> code SEMICOLON .)
    CHAR            reduce using rule 30 (code_line -> code SEMICOLON .)
    BOOL            reduce using rule 30 (code_line -> code SEMICOLON .)
    LET             reduce using rule 30 (code_line -> code SEMICOLON .)
    CONST           reduce using rule 30 (code_line -> code SEMICOLON .)
    LBRACKET        reduce using rule 30 (code_line -> code SEMICOLON .)
    IF              reduce using rule 30 (code_line -> code SEMICOLON .)
    MATCH           reduce using rule 30 (code_line -> code SEMICOLON .)
    $end            reduce using rule 30 (code_line -> code SEMICOLON .)
    RBRACE          reduce using rule 30 (code_line -> code SEMICOLON .)


state 30

    (17) if_statement -> IF LPAREN . comparison_value RPAREN block_function
    (18) if_statement -> IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (62) comparison_value -> . value comparison value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    comparison_value               shift and go to state 55
    value                          shift and go to state 56
    array                          shift and go to state 24

state 31

    (19) if_statement -> IF function . comparison value block_function
    (20) if_statement -> IF function . comparison value block_function else_if_statement
    (72) comparison -> . LESS_THAN
    (73) comparison -> . GREATER_THAN
    (74) comparison -> . LESS_THAN_EQUAL
    (75) comparison -> . GREATER_THAN_EQUAL
    (76) comparison -> . NOT_EQUAL
    (77) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN_EQUAL shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    EQUAL_EQUAL     shift and go to state 40

    comparison                     shift and go to state 58

state 32

    (21) if_statement -> IF LET . EQUAL value block_function
    (22) if_statement -> IF LET . EQUAL value else_if_statement

    EQUAL           shift and go to state 59


state 33

    (36) function -> ID . LPAREN RPAREN
    (37) function -> ID . LPAREN value RPAREN
    (38) function -> ID . LPAREN arguments_production RPAREN
    (39) function -> ID . DOT ID LPAREN RPAREN
    (40) function -> ID . DOT ID LPAREN value RPAREN
    (41) function -> ID . DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 49
    DOT             shift and go to state 50


state 34

    (61) comparison_production -> comparison_value comparison . comparison_production
    (60) comparison_production -> . comparison_value
    (61) comparison_production -> . comparison_value comparison comparison_production
    (62) comparison_value -> . value comparison value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    comparison_value               shift and go to state 10
    comparison_production          shift and go to state 60
    value                          shift and go to state 56
    array                          shift and go to state 24

state 35

    (72) comparison -> LESS_THAN .

    INT             reduce using rule 72 (comparison -> LESS_THAN .)
    FLOAT           reduce using rule 72 (comparison -> LESS_THAN .)
    STRING          reduce using rule 72 (comparison -> LESS_THAN .)
    CHAR            reduce using rule 72 (comparison -> LESS_THAN .)
    BOOL            reduce using rule 72 (comparison -> LESS_THAN .)
    ID              reduce using rule 72 (comparison -> LESS_THAN .)
    LBRACKET        reduce using rule 72 (comparison -> LESS_THAN .)


state 36

    (73) comparison -> GREATER_THAN .

    INT             reduce using rule 73 (comparison -> GREATER_THAN .)
    FLOAT           reduce using rule 73 (comparison -> GREATER_THAN .)
    STRING          reduce using rule 73 (comparison -> GREATER_THAN .)
    CHAR            reduce using rule 73 (comparison -> GREATER_THAN .)
    BOOL            reduce using rule 73 (comparison -> GREATER_THAN .)
    ID              reduce using rule 73 (comparison -> GREATER_THAN .)
    LBRACKET        reduce using rule 73 (comparison -> GREATER_THAN .)


state 37

    (74) comparison -> LESS_THAN_EQUAL .

    INT             reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    FLOAT           reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    STRING          reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    CHAR            reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    BOOL            reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    ID              reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)
    LBRACKET        reduce using rule 74 (comparison -> LESS_THAN_EQUAL .)


state 38

    (75) comparison -> GREATER_THAN_EQUAL .

    INT             reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    FLOAT           reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    STRING          reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    CHAR            reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    BOOL            reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    ID              reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)
    LBRACKET        reduce using rule 75 (comparison -> GREATER_THAN_EQUAL .)


state 39

    (76) comparison -> NOT_EQUAL .

    INT             reduce using rule 76 (comparison -> NOT_EQUAL .)
    FLOAT           reduce using rule 76 (comparison -> NOT_EQUAL .)
    STRING          reduce using rule 76 (comparison -> NOT_EQUAL .)
    CHAR            reduce using rule 76 (comparison -> NOT_EQUAL .)
    BOOL            reduce using rule 76 (comparison -> NOT_EQUAL .)
    ID              reduce using rule 76 (comparison -> NOT_EQUAL .)
    LBRACKET        reduce using rule 76 (comparison -> NOT_EQUAL .)


state 40

    (77) comparison -> EQUAL_EQUAL .

    INT             reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    FLOAT           reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    STRING          reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    CHAR            reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    BOOL            reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    ID              reduce using rule 77 (comparison -> EQUAL_EQUAL .)
    LBRACKET        reduce using rule 77 (comparison -> EQUAL_EQUAL .)


state 41

    (63) logic_value -> value logic_operator . value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 61
    array                          shift and go to state 24

state 42

    (62) comparison_value -> value comparison . value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 62
    array                          shift and go to state 24

state 43

    (85) logic_operator -> AND .

    INT             reduce using rule 85 (logic_operator -> AND .)
    FLOAT           reduce using rule 85 (logic_operator -> AND .)
    STRING          reduce using rule 85 (logic_operator -> AND .)
    CHAR            reduce using rule 85 (logic_operator -> AND .)
    BOOL            reduce using rule 85 (logic_operator -> AND .)
    ID              reduce using rule 85 (logic_operator -> AND .)
    LBRACKET        reduce using rule 85 (logic_operator -> AND .)


state 44

    (86) logic_operator -> OR .

    INT             reduce using rule 86 (logic_operator -> OR .)
    FLOAT           reduce using rule 86 (logic_operator -> OR .)
    STRING          reduce using rule 86 (logic_operator -> OR .)
    CHAR            reduce using rule 86 (logic_operator -> OR .)
    BOOL            reduce using rule 86 (logic_operator -> OR .)
    ID              reduce using rule 86 (logic_operator -> OR .)
    LBRACKET        reduce using rule 86 (logic_operator -> OR .)


state 45

    (87) logic_operator -> NOT .

    INT             reduce using rule 87 (logic_operator -> NOT .)
    FLOAT           reduce using rule 87 (logic_operator -> NOT .)
    STRING          reduce using rule 87 (logic_operator -> NOT .)
    CHAR            reduce using rule 87 (logic_operator -> NOT .)
    BOOL            reduce using rule 87 (logic_operator -> NOT .)
    ID              reduce using rule 87 (logic_operator -> NOT .)
    LBRACKET        reduce using rule 87 (logic_operator -> NOT .)


state 46

    (44) statement -> LET ID . EQUAL value
    (49) statement -> LET ID . EQUAL data_structures

    EQUAL           shift and go to state 63


state 47

    (45) statement -> LET MUT . ID EQUAL value
    (51) statement -> LET MUT . ID EQUAL data_structures

    ID              shift and go to state 64


state 48

    (12) match_statement -> MATCH ID . LBRACE match_body RBRACE

    LBRACE          shift and go to state 65


state 49

    (36) function -> ID LPAREN . RPAREN
    (37) function -> ID LPAREN . value RPAREN
    (38) function -> ID LPAREN . arguments_production RPAREN
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (58) arguments_production -> . value
    (59) arguments_production -> . value COMMA arguments_production
    (54) array -> . LBRACKET array_elements RBRACKET

    RPAREN          shift and go to state 66
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 67
    arguments_production           shift and go to state 68
    array                          shift and go to state 24

state 50

    (39) function -> ID DOT . ID LPAREN RPAREN
    (40) function -> ID DOT . ID LPAREN value RPAREN
    (41) function -> ID DOT . ID LPAREN arguments_production RPAREN

    ID              shift and go to state 69


state 51

    (47) statement -> ID EQUAL . ID
    (48) statement -> ID EQUAL . aritmetic_operation_production
    (50) statement -> ID EQUAL . data_structures
    (64) aritmetic_operation_production -> . aritmetic_operation
    (65) aritmetic_operation_production -> . value aritmetic_operator aritmetic_operation
    (52) data_structures -> . tuple
    (53) data_structures -> . array
    (66) aritmetic_operation -> . value aritmetic_operator value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (57) tuple -> . LPAREN arguments_production RPAREN
    (54) array -> . LBRACKET array_elements RBRACKET

    ID              shift and go to state 70
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    LPAREN          shift and go to state 77
    LBRACKET        shift and go to state 26

    aritmetic_operation_production shift and go to state 71
    data_structures                shift and go to state 72
    aritmetic_operation            shift and go to state 73
    value                          shift and go to state 74
    tuple                          shift and go to state 75
    array                          shift and go to state 76

state 52

    (46) statement -> CONST ID . EQUAL value

    EQUAL           shift and go to state 78


state 53

    (54) array -> LBRACKET array_elements . RBRACKET
    (56) array_elements -> array_elements . COMMA INT

    RBRACKET        shift and go to state 79
    COMMA           shift and go to state 80


state 54

    (55) array_elements -> INT .

    RBRACKET        reduce using rule 55 (array_elements -> INT .)
    COMMA           reduce using rule 55 (array_elements -> INT .)


state 55

    (17) if_statement -> IF LPAREN comparison_value . RPAREN block_function
    (18) if_statement -> IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 81


state 56

    (62) comparison_value -> value . comparison value
    (72) comparison -> . LESS_THAN
    (73) comparison -> . GREATER_THAN
    (74) comparison -> . LESS_THAN_EQUAL
    (75) comparison -> . GREATER_THAN_EQUAL
    (76) comparison -> . NOT_EQUAL
    (77) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN_EQUAL shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    EQUAL_EQUAL     shift and go to state 40

    comparison                     shift and go to state 42

state 57

    (83) value -> ID .

    LESS_THAN       reduce using rule 83 (value -> ID .)
    GREATER_THAN    reduce using rule 83 (value -> ID .)
    LESS_THAN_EQUAL reduce using rule 83 (value -> ID .)
    GREATER_THAN_EQUAL reduce using rule 83 (value -> ID .)
    NOT_EQUAL       reduce using rule 83 (value -> ID .)
    EQUAL_EQUAL     reduce using rule 83 (value -> ID .)
    SEMICOLON       reduce using rule 83 (value -> ID .)
    RPAREN          reduce using rule 83 (value -> ID .)
    COMMA           reduce using rule 83 (value -> ID .)
    LBRACE          reduce using rule 83 (value -> ID .)
    ELSE            reduce using rule 83 (value -> ID .)
    PIPE            reduce using rule 83 (value -> ID .)
    FAT_ARROW       reduce using rule 83 (value -> ID .)
    PLUS            reduce using rule 83 (value -> ID .)
    MINUS_OPERATOR  reduce using rule 83 (value -> ID .)
    TIMES           reduce using rule 83 (value -> ID .)
    DIVIDE          reduce using rule 83 (value -> ID .)
    MODULE          reduce using rule 83 (value -> ID .)


state 58

    (19) if_statement -> IF function comparison . value block_function
    (20) if_statement -> IF function comparison . value block_function else_if_statement
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 82
    array                          shift and go to state 24

state 59

    (21) if_statement -> IF LET EQUAL . value block_function
    (22) if_statement -> IF LET EQUAL . value else_if_statement
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 83
    array                          shift and go to state 24

state 60

    (61) comparison_production -> comparison_value comparison comparison_production .

    SEMICOLON       reduce using rule 61 (comparison_production -> comparison_value comparison comparison_production .)


state 61

    (63) logic_value -> value logic_operator value .

    SEMICOLON       reduce using rule 63 (logic_value -> value logic_operator value .)


state 62

    (62) comparison_value -> value comparison value .

    LESS_THAN       reduce using rule 62 (comparison_value -> value comparison value .)
    GREATER_THAN    reduce using rule 62 (comparison_value -> value comparison value .)
    LESS_THAN_EQUAL reduce using rule 62 (comparison_value -> value comparison value .)
    GREATER_THAN_EQUAL reduce using rule 62 (comparison_value -> value comparison value .)
    NOT_EQUAL       reduce using rule 62 (comparison_value -> value comparison value .)
    EQUAL_EQUAL     reduce using rule 62 (comparison_value -> value comparison value .)
    SEMICOLON       reduce using rule 62 (comparison_value -> value comparison value .)
    RPAREN          reduce using rule 62 (comparison_value -> value comparison value .)


state 63

    (44) statement -> LET ID EQUAL . value
    (49) statement -> LET ID EQUAL . data_structures
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (52) data_structures -> . tuple
    (53) data_structures -> . array
    (54) array -> . LBRACKET array_elements RBRACKET
    (57) tuple -> . LPAREN arguments_production RPAREN

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26
    LPAREN          shift and go to state 77

    value                          shift and go to state 84
    data_structures                shift and go to state 85
    array                          shift and go to state 86
    tuple                          shift and go to state 75

state 64

    (45) statement -> LET MUT ID . EQUAL value
    (51) statement -> LET MUT ID . EQUAL data_structures

    EQUAL           shift and go to state 87


state 65

    (12) match_statement -> MATCH ID LBRACE . match_body RBRACE
    (10) match_body -> . match_body_line
    (11) match_body -> . match_body_line match_body match_case_default
    (7) match_body_line -> . match_cases
    (13) match_cases -> . match_case
    (14) match_cases -> . match_case match_cases
    (15) match_case -> . match_pattern FAT_ARROW block_function
    (8) match_pattern -> . value
    (9) match_pattern -> . value PIPE match_pattern
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    match_body                     shift and go to state 88
    match_body_line                shift and go to state 89
    match_cases                    shift and go to state 90
    match_case                     shift and go to state 91
    match_pattern                  shift and go to state 92
    value                          shift and go to state 93
    array                          shift and go to state 24

state 66

    (36) function -> ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 36 (function -> ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 36 (function -> ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 36 (function -> ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 36 (function -> ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 36 (function -> ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 36 (function -> ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 36 (function -> ID LPAREN RPAREN .)


state 67

    (37) function -> ID LPAREN value . RPAREN
    (58) arguments_production -> value .
    (59) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 94
    COMMA           shift and go to state 95

  ! RPAREN          [ reduce using rule 58 (arguments_production -> value .) ]


state 68

    (38) function -> ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 96


state 69

    (39) function -> ID DOT ID . LPAREN RPAREN
    (40) function -> ID DOT ID . LPAREN value RPAREN
    (41) function -> ID DOT ID . LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 97


state 70

    (47) statement -> ID EQUAL ID .
    (83) value -> ID .

    SEMICOLON       reduce using rule 47 (statement -> ID EQUAL ID .)
    PLUS            reduce using rule 83 (value -> ID .)
    MINUS_OPERATOR  reduce using rule 83 (value -> ID .)
    TIMES           reduce using rule 83 (value -> ID .)
    DIVIDE          reduce using rule 83 (value -> ID .)
    MODULE          reduce using rule 83 (value -> ID .)


state 71

    (48) statement -> ID EQUAL aritmetic_operation_production .

    SEMICOLON       reduce using rule 48 (statement -> ID EQUAL aritmetic_operation_production .)


state 72

    (50) statement -> ID EQUAL data_structures .

    SEMICOLON       reduce using rule 50 (statement -> ID EQUAL data_structures .)


state 73

    (64) aritmetic_operation_production -> aritmetic_operation .

    SEMICOLON       reduce using rule 64 (aritmetic_operation_production -> aritmetic_operation .)


state 74

    (65) aritmetic_operation_production -> value . aritmetic_operator aritmetic_operation
    (66) aritmetic_operation -> value . aritmetic_operator value
    (67) aritmetic_operator -> . PLUS
    (68) aritmetic_operator -> . MINUS_OPERATOR
    (69) aritmetic_operator -> . TIMES
    (70) aritmetic_operator -> . DIVIDE
    (71) aritmetic_operator -> . MODULE

    PLUS            shift and go to state 99
    MINUS_OPERATOR  shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MODULE          shift and go to state 103

    aritmetic_operator             shift and go to state 98

state 75

    (52) data_structures -> tuple .

    SEMICOLON       reduce using rule 52 (data_structures -> tuple .)


state 76

    (53) data_structures -> array .
    (84) value -> array .

    SEMICOLON       reduce using rule 53 (data_structures -> array .)
    PLUS            reduce using rule 84 (value -> array .)
    MINUS_OPERATOR  reduce using rule 84 (value -> array .)
    TIMES           reduce using rule 84 (value -> array .)
    DIVIDE          reduce using rule 84 (value -> array .)
    MODULE          reduce using rule 84 (value -> array .)


state 77

    (57) tuple -> LPAREN . arguments_production RPAREN
    (58) arguments_production -> . value
    (59) arguments_production -> . value COMMA arguments_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    arguments_production           shift and go to state 104
    value                          shift and go to state 105
    array                          shift and go to state 24

state 78

    (46) statement -> CONST ID EQUAL . value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 106
    array                          shift and go to state 24

state 79

    (54) array -> LBRACKET array_elements RBRACKET .

    AND             reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    OR              reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    NOT             reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    LESS_THAN       reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    GREATER_THAN    reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    LESS_THAN_EQUAL reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    GREATER_THAN_EQUAL reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    NOT_EQUAL       reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    EQUAL_EQUAL     reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    SEMICOLON       reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    RPAREN          reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    COMMA           reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    PLUS            reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    MINUS_OPERATOR  reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    TIMES           reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    DIVIDE          reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    MODULE          reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    LBRACE          reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    ELSE            reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    PIPE            reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)
    FAT_ARROW       reduce using rule 54 (array -> LBRACKET array_elements RBRACKET .)


state 80

    (56) array_elements -> array_elements COMMA . INT

    INT             shift and go to state 107


state 81

    (17) if_statement -> IF LPAREN comparison_value RPAREN . block_function
    (18) if_statement -> IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 108

state 82

    (19) if_statement -> IF function comparison value . block_function
    (20) if_statement -> IF function comparison value . block_function else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 110

state 83

    (21) if_statement -> IF LET EQUAL value . block_function
    (22) if_statement -> IF LET EQUAL value . else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE
    (23) else_if_statement -> . ELSE block_function
    (24) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    LBRACE          shift and go to state 109
    ELSE            shift and go to state 113

    block_function                 shift and go to state 111
    else_if_statement              shift and go to state 112

state 84

    (44) statement -> LET ID EQUAL value .

    SEMICOLON       reduce using rule 44 (statement -> LET ID EQUAL value .)


state 85

    (49) statement -> LET ID EQUAL data_structures .

    SEMICOLON       reduce using rule 49 (statement -> LET ID EQUAL data_structures .)


state 86

    (84) value -> array .
    (53) data_structures -> array .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (data_structures -> array .)
    SEMICOLON       reduce using rule 53 (data_structures -> array .)

  ! SEMICOLON       [ reduce using rule 84 (value -> array .) ]


state 87

    (45) statement -> LET MUT ID EQUAL . value
    (51) statement -> LET MUT ID EQUAL . data_structures
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (52) data_structures -> . tuple
    (53) data_structures -> . array
    (54) array -> . LBRACKET array_elements RBRACKET
    (57) tuple -> . LPAREN arguments_production RPAREN

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26
    LPAREN          shift and go to state 77

    value                          shift and go to state 114
    data_structures                shift and go to state 115
    array                          shift and go to state 86
    tuple                          shift and go to state 75

state 88

    (12) match_statement -> MATCH ID LBRACE match_body . RBRACE

    RBRACE          shift and go to state 116


state 89

    (10) match_body -> match_body_line .
    (11) match_body -> match_body_line . match_body match_case_default
    (10) match_body -> . match_body_line
    (11) match_body -> . match_body_line match_body match_case_default
    (7) match_body_line -> . match_cases
    (13) match_cases -> . match_case
    (14) match_cases -> . match_case match_cases
    (15) match_case -> . match_pattern FAT_ARROW block_function
    (8) match_pattern -> . value
    (9) match_pattern -> . value PIPE match_pattern
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    RBRACE          reduce using rule 10 (match_body -> match_body_line .)
    UNDERSCORE      reduce using rule 10 (match_body -> match_body_line .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    match_body_line                shift and go to state 89
    match_body                     shift and go to state 117
    match_cases                    shift and go to state 90
    match_case                     shift and go to state 91
    match_pattern                  shift and go to state 92
    value                          shift and go to state 93
    array                          shift and go to state 24

state 90

    (7) match_body_line -> match_cases .

    INT             reduce using rule 7 (match_body_line -> match_cases .)
    FLOAT           reduce using rule 7 (match_body_line -> match_cases .)
    STRING          reduce using rule 7 (match_body_line -> match_cases .)
    CHAR            reduce using rule 7 (match_body_line -> match_cases .)
    BOOL            reduce using rule 7 (match_body_line -> match_cases .)
    ID              reduce using rule 7 (match_body_line -> match_cases .)
    LBRACKET        reduce using rule 7 (match_body_line -> match_cases .)
    RBRACE          reduce using rule 7 (match_body_line -> match_cases .)
    UNDERSCORE      reduce using rule 7 (match_body_line -> match_cases .)


state 91

    (13) match_cases -> match_case .
    (14) match_cases -> match_case . match_cases
    (13) match_cases -> . match_case
    (14) match_cases -> . match_case match_cases
    (15) match_case -> . match_pattern FAT_ARROW block_function
    (8) match_pattern -> . value
    (9) match_pattern -> . value PIPE match_pattern
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    RBRACE          reduce using rule 13 (match_cases -> match_case .)
    UNDERSCORE      reduce using rule 13 (match_cases -> match_case .)
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

  ! INT             [ reduce using rule 13 (match_cases -> match_case .) ]
  ! FLOAT           [ reduce using rule 13 (match_cases -> match_case .) ]
  ! STRING          [ reduce using rule 13 (match_cases -> match_case .) ]
  ! CHAR            [ reduce using rule 13 (match_cases -> match_case .) ]
  ! BOOL            [ reduce using rule 13 (match_cases -> match_case .) ]
  ! ID              [ reduce using rule 13 (match_cases -> match_case .) ]
  ! LBRACKET        [ reduce using rule 13 (match_cases -> match_case .) ]

    match_case                     shift and go to state 91
    match_cases                    shift and go to state 118
    match_pattern                  shift and go to state 92
    value                          shift and go to state 93
    array                          shift and go to state 24

state 92

    (15) match_case -> match_pattern . FAT_ARROW block_function

    FAT_ARROW       shift and go to state 119


state 93

    (8) match_pattern -> value .
    (9) match_pattern -> value . PIPE match_pattern

    FAT_ARROW       reduce using rule 8 (match_pattern -> value .)
    PIPE            shift and go to state 120


state 94

    (37) function -> ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 37 (function -> ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 37 (function -> ID LPAREN value RPAREN .)


state 95

    (59) arguments_production -> value COMMA . arguments_production
    (58) arguments_production -> . value
    (59) arguments_production -> . value COMMA arguments_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 105
    arguments_production           shift and go to state 121
    array                          shift and go to state 24

state 96

    (38) function -> ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 38 (function -> ID LPAREN arguments_production RPAREN .)


state 97

    (39) function -> ID DOT ID LPAREN . RPAREN
    (40) function -> ID DOT ID LPAREN . value RPAREN
    (41) function -> ID DOT ID LPAREN . arguments_production RPAREN
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (58) arguments_production -> . value
    (59) arguments_production -> . value COMMA arguments_production
    (54) array -> . LBRACKET array_elements RBRACKET

    RPAREN          shift and go to state 122
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 123
    arguments_production           shift and go to state 124
    array                          shift and go to state 24

state 98

    (65) aritmetic_operation_production -> value aritmetic_operator . aritmetic_operation
    (66) aritmetic_operation -> value aritmetic_operator . value
    (66) aritmetic_operation -> . value aritmetic_operator value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 125
    aritmetic_operation            shift and go to state 126
    array                          shift and go to state 24

state 99

    (67) aritmetic_operator -> PLUS .

    INT             reduce using rule 67 (aritmetic_operator -> PLUS .)
    FLOAT           reduce using rule 67 (aritmetic_operator -> PLUS .)
    STRING          reduce using rule 67 (aritmetic_operator -> PLUS .)
    CHAR            reduce using rule 67 (aritmetic_operator -> PLUS .)
    BOOL            reduce using rule 67 (aritmetic_operator -> PLUS .)
    ID              reduce using rule 67 (aritmetic_operator -> PLUS .)
    LBRACKET        reduce using rule 67 (aritmetic_operator -> PLUS .)


state 100

    (68) aritmetic_operator -> MINUS_OPERATOR .

    INT             reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    FLOAT           reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    STRING          reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    CHAR            reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    BOOL            reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    ID              reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)
    LBRACKET        reduce using rule 68 (aritmetic_operator -> MINUS_OPERATOR .)


state 101

    (69) aritmetic_operator -> TIMES .

    INT             reduce using rule 69 (aritmetic_operator -> TIMES .)
    FLOAT           reduce using rule 69 (aritmetic_operator -> TIMES .)
    STRING          reduce using rule 69 (aritmetic_operator -> TIMES .)
    CHAR            reduce using rule 69 (aritmetic_operator -> TIMES .)
    BOOL            reduce using rule 69 (aritmetic_operator -> TIMES .)
    ID              reduce using rule 69 (aritmetic_operator -> TIMES .)
    LBRACKET        reduce using rule 69 (aritmetic_operator -> TIMES .)


state 102

    (70) aritmetic_operator -> DIVIDE .

    INT             reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    FLOAT           reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    STRING          reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    CHAR            reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    BOOL            reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    ID              reduce using rule 70 (aritmetic_operator -> DIVIDE .)
    LBRACKET        reduce using rule 70 (aritmetic_operator -> DIVIDE .)


state 103

    (71) aritmetic_operator -> MODULE .

    INT             reduce using rule 71 (aritmetic_operator -> MODULE .)
    FLOAT           reduce using rule 71 (aritmetic_operator -> MODULE .)
    STRING          reduce using rule 71 (aritmetic_operator -> MODULE .)
    CHAR            reduce using rule 71 (aritmetic_operator -> MODULE .)
    BOOL            reduce using rule 71 (aritmetic_operator -> MODULE .)
    ID              reduce using rule 71 (aritmetic_operator -> MODULE .)
    LBRACKET        reduce using rule 71 (aritmetic_operator -> MODULE .)


state 104

    (57) tuple -> LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 127


state 105

    (58) arguments_production -> value .
    (59) arguments_production -> value . COMMA arguments_production

    RPAREN          reduce using rule 58 (arguments_production -> value .)
    COMMA           shift and go to state 95


state 106

    (46) statement -> CONST ID EQUAL value .

    SEMICOLON       reduce using rule 46 (statement -> CONST ID EQUAL value .)


state 107

    (56) array_elements -> array_elements COMMA INT .

    RBRACKET        reduce using rule 56 (array_elements -> array_elements COMMA INT .)
    COMMA           reduce using rule 56 (array_elements -> array_elements COMMA INT .)


state 108

    (17) if_statement -> IF LPAREN comparison_value RPAREN block_function .
    (18) if_statement -> IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (23) else_if_statement -> . ELSE block_function
    (24) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    IF              reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    MATCH           reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    ID              reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    INT             reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    FLOAT           reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    STRING          reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    CHAR            reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    BOOL            reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    LET             reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    CONST           reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    LBRACKET        reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    $end            reduce using rule 17 (if_statement -> IF LPAREN comparison_value RPAREN block_function .)
    ELSE            shift and go to state 113

    else_if_statement              shift and go to state 128

state 109

    (26) block_function -> LBRACE . RBRACE
    (27) block_function -> LBRACE . code_block RBRACE
    (28) code_block -> . code_line
    (29) code_block -> . code_line code_block
    (30) code_line -> . code SEMICOLON
    (31) code -> . function
    (32) code -> . comparison_production
    (33) code -> . value
    (34) code -> . logic_value
    (35) code -> . statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN
    (60) comparison_production -> . comparison_value
    (61) comparison_production -> . comparison_value comparison comparison_production
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (63) logic_value -> . value logic_operator value
    (44) statement -> . LET ID EQUAL value
    (45) statement -> . LET MUT ID EQUAL value
    (46) statement -> . CONST ID EQUAL value
    (47) statement -> . ID EQUAL ID
    (48) statement -> . ID EQUAL aritmetic_operation_production
    (49) statement -> . LET ID EQUAL data_structures
    (50) statement -> . ID EQUAL data_structures
    (51) statement -> . LET MUT ID EQUAL data_structures
    (62) comparison_value -> . value comparison value
    (54) array -> . LBRACKET array_elements RBRACKET

    RBRACE          shift and go to state 129
    ID              shift and go to state 15
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    LET             shift and go to state 13
    CONST           shift and go to state 25
    LBRACKET        shift and go to state 26

    code_block                     shift and go to state 130
    code_line                      shift and go to state 5
    code                           shift and go to state 8
    function                       shift and go to state 11
    comparison_production          shift and go to state 16
    value                          shift and go to state 12
    logic_value                    shift and go to state 17
    statement                      shift and go to state 18
    comparison_value               shift and go to state 10
    array                          shift and go to state 24

state 110

    (19) if_statement -> IF function comparison value block_function .
    (20) if_statement -> IF function comparison value block_function . else_if_statement
    (23) else_if_statement -> . ELSE block_function
    (24) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    IF              reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    MATCH           reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    ID              reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    INT             reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    FLOAT           reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    STRING          reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    CHAR            reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    BOOL            reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    LET             reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    CONST           reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    LBRACKET        reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    $end            reduce using rule 19 (if_statement -> IF function comparison value block_function .)
    ELSE            shift and go to state 113

    else_if_statement              shift and go to state 131

state 111

    (21) if_statement -> IF LET EQUAL value block_function .

    IF              reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    MATCH           reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    ID              reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    INT             reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    FLOAT           reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    STRING          reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    CHAR            reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    BOOL            reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    LET             reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    CONST           reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    LBRACKET        reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)
    $end            reduce using rule 21 (if_statement -> IF LET EQUAL value block_function .)


state 112

    (22) if_statement -> IF LET EQUAL value else_if_statement .

    IF              reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    MATCH           reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    ID              reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    INT             reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    FLOAT           reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    STRING          reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    CHAR            reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    BOOL            reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    LET             reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    CONST           reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    LBRACKET        reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)
    $end            reduce using rule 22 (if_statement -> IF LET EQUAL value else_if_statement .)


state 113

    (23) else_if_statement -> ELSE . block_function
    (24) else_if_statement -> ELSE . IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> ELSE . IF function comparison value block_function else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    IF              shift and go to state 133
    LBRACE          shift and go to state 109

    block_function                 shift and go to state 132

state 114

    (45) statement -> LET MUT ID EQUAL value .

    SEMICOLON       reduce using rule 45 (statement -> LET MUT ID EQUAL value .)


state 115

    (51) statement -> LET MUT ID EQUAL data_structures .

    SEMICOLON       reduce using rule 51 (statement -> LET MUT ID EQUAL data_structures .)


state 116

    (12) match_statement -> MATCH ID LBRACE match_body RBRACE .

    IF              reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    MATCH           reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    ID              reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    INT             reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    FLOAT           reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    STRING          reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    CHAR            reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    BOOL            reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    LET             reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    CONST           reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    LBRACKET        reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)
    $end            reduce using rule 12 (match_statement -> MATCH ID LBRACE match_body RBRACE .)


state 117

    (11) match_body -> match_body_line match_body . match_case_default
    (16) match_case_default -> . UNDERSCORE FAT_ARROW block_function

    UNDERSCORE      shift and go to state 135

    match_case_default             shift and go to state 134

state 118

    (14) match_cases -> match_case match_cases .

    INT             reduce using rule 14 (match_cases -> match_case match_cases .)
    FLOAT           reduce using rule 14 (match_cases -> match_case match_cases .)
    STRING          reduce using rule 14 (match_cases -> match_case match_cases .)
    CHAR            reduce using rule 14 (match_cases -> match_case match_cases .)
    BOOL            reduce using rule 14 (match_cases -> match_case match_cases .)
    ID              reduce using rule 14 (match_cases -> match_case match_cases .)
    LBRACKET        reduce using rule 14 (match_cases -> match_case match_cases .)
    RBRACE          reduce using rule 14 (match_cases -> match_case match_cases .)
    UNDERSCORE      reduce using rule 14 (match_cases -> match_case match_cases .)


state 119

    (15) match_case -> match_pattern FAT_ARROW . block_function
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 136

state 120

    (9) match_pattern -> value PIPE . match_pattern
    (8) match_pattern -> . value
    (9) match_pattern -> . value PIPE match_pattern
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 93
    match_pattern                  shift and go to state 137
    array                          shift and go to state 24

state 121

    (59) arguments_production -> value COMMA arguments_production .

    RPAREN          reduce using rule 59 (arguments_production -> value COMMA arguments_production .)


state 122

    (39) function -> ID DOT ID LPAREN RPAREN .

    SEMICOLON       reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN       reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN    reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    LESS_THAN_EQUAL reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    NOT_EQUAL       reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)
    EQUAL_EQUAL     reduce using rule 39 (function -> ID DOT ID LPAREN RPAREN .)


state 123

    (40) function -> ID DOT ID LPAREN value . RPAREN
    (58) arguments_production -> value .
    (59) arguments_production -> value . COMMA arguments_production

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 138
    COMMA           shift and go to state 95

  ! RPAREN          [ reduce using rule 58 (arguments_production -> value .) ]


state 124

    (41) function -> ID DOT ID LPAREN arguments_production . RPAREN

    RPAREN          shift and go to state 139


state 125

    (66) aritmetic_operation -> value aritmetic_operator value .
    (66) aritmetic_operation -> value . aritmetic_operator value
    (67) aritmetic_operator -> . PLUS
    (68) aritmetic_operator -> . MINUS_OPERATOR
    (69) aritmetic_operator -> . TIMES
    (70) aritmetic_operator -> . DIVIDE
    (71) aritmetic_operator -> . MODULE

    SEMICOLON       reduce using rule 66 (aritmetic_operation -> value aritmetic_operator value .)
    PLUS            shift and go to state 99
    MINUS_OPERATOR  shift and go to state 100
    TIMES           shift and go to state 101
    DIVIDE          shift and go to state 102
    MODULE          shift and go to state 103

    aritmetic_operator             shift and go to state 140

state 126

    (65) aritmetic_operation_production -> value aritmetic_operator aritmetic_operation .

    SEMICOLON       reduce using rule 65 (aritmetic_operation_production -> value aritmetic_operator aritmetic_operation .)


state 127

    (57) tuple -> LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 57 (tuple -> LPAREN arguments_production RPAREN .)


state 128

    (18) if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .

    IF              reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    MATCH           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    ID              reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    INT             reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FLOAT           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    STRING          reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CHAR            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    BOOL            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LET             reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CONST           reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LBRACKET        reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    $end            reduce using rule 18 (if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 129

    (26) block_function -> LBRACE RBRACE .

    ELSE            reduce using rule 26 (block_function -> LBRACE RBRACE .)
    IF              reduce using rule 26 (block_function -> LBRACE RBRACE .)
    MATCH           reduce using rule 26 (block_function -> LBRACE RBRACE .)
    ID              reduce using rule 26 (block_function -> LBRACE RBRACE .)
    INT             reduce using rule 26 (block_function -> LBRACE RBRACE .)
    FLOAT           reduce using rule 26 (block_function -> LBRACE RBRACE .)
    STRING          reduce using rule 26 (block_function -> LBRACE RBRACE .)
    CHAR            reduce using rule 26 (block_function -> LBRACE RBRACE .)
    BOOL            reduce using rule 26 (block_function -> LBRACE RBRACE .)
    LET             reduce using rule 26 (block_function -> LBRACE RBRACE .)
    CONST           reduce using rule 26 (block_function -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 26 (block_function -> LBRACE RBRACE .)
    $end            reduce using rule 26 (block_function -> LBRACE RBRACE .)
    RBRACE          reduce using rule 26 (block_function -> LBRACE RBRACE .)
    UNDERSCORE      reduce using rule 26 (block_function -> LBRACE RBRACE .)


state 130

    (27) block_function -> LBRACE code_block . RBRACE

    RBRACE          shift and go to state 141


state 131

    (20) if_statement -> IF function comparison value block_function else_if_statement .

    IF              reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    MATCH           reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    ID              reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    INT             reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    FLOAT           reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    STRING          reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    CHAR            reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    BOOL            reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    LET             reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    CONST           reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    LBRACKET        reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)
    $end            reduce using rule 20 (if_statement -> IF function comparison value block_function else_if_statement .)


state 132

    (23) else_if_statement -> ELSE block_function .

    IF              reduce using rule 23 (else_if_statement -> ELSE block_function .)
    MATCH           reduce using rule 23 (else_if_statement -> ELSE block_function .)
    ID              reduce using rule 23 (else_if_statement -> ELSE block_function .)
    INT             reduce using rule 23 (else_if_statement -> ELSE block_function .)
    FLOAT           reduce using rule 23 (else_if_statement -> ELSE block_function .)
    STRING          reduce using rule 23 (else_if_statement -> ELSE block_function .)
    CHAR            reduce using rule 23 (else_if_statement -> ELSE block_function .)
    BOOL            reduce using rule 23 (else_if_statement -> ELSE block_function .)
    LET             reduce using rule 23 (else_if_statement -> ELSE block_function .)
    CONST           reduce using rule 23 (else_if_statement -> ELSE block_function .)
    LBRACKET        reduce using rule 23 (else_if_statement -> ELSE block_function .)
    $end            reduce using rule 23 (else_if_statement -> ELSE block_function .)


state 133

    (24) else_if_statement -> ELSE IF . LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> ELSE IF . function comparison value block_function else_if_statement
    (36) function -> . ID LPAREN RPAREN
    (37) function -> . ID LPAREN value RPAREN
    (38) function -> . ID LPAREN arguments_production RPAREN
    (39) function -> . ID DOT ID LPAREN RPAREN
    (40) function -> . ID DOT ID LPAREN value RPAREN
    (41) function -> . ID DOT ID LPAREN arguments_production RPAREN

    LPAREN          shift and go to state 142
    ID              shift and go to state 33

    function                       shift and go to state 143

state 134

    (11) match_body -> match_body_line match_body match_case_default .

    RBRACE          reduce using rule 11 (match_body -> match_body_line match_body match_case_default .)
    UNDERSCORE      reduce using rule 11 (match_body -> match_body_line match_body match_case_default .)


state 135

    (16) match_case_default -> UNDERSCORE . FAT_ARROW block_function

    FAT_ARROW       shift and go to state 144


state 136

    (15) match_case -> match_pattern FAT_ARROW block_function .

    INT             reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    FLOAT           reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    STRING          reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    CHAR            reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    BOOL            reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    ID              reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    LBRACKET        reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    RBRACE          reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)
    UNDERSCORE      reduce using rule 15 (match_case -> match_pattern FAT_ARROW block_function .)


state 137

    (9) match_pattern -> value PIPE match_pattern .

    FAT_ARROW       reduce using rule 9 (match_pattern -> value PIPE match_pattern .)


state 138

    (40) function -> ID DOT ID LPAREN value RPAREN .

    SEMICOLON       reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN       reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN    reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    LESS_THAN_EQUAL reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    NOT_EQUAL       reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)
    EQUAL_EQUAL     reduce using rule 40 (function -> ID DOT ID LPAREN value RPAREN .)


state 139

    (41) function -> ID DOT ID LPAREN arguments_production RPAREN .

    SEMICOLON       reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN       reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN    reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    LESS_THAN_EQUAL reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    GREATER_THAN_EQUAL reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    NOT_EQUAL       reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)
    EQUAL_EQUAL     reduce using rule 41 (function -> ID DOT ID LPAREN arguments_production RPAREN .)


state 140

    (66) aritmetic_operation -> value aritmetic_operator . value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 145
    array                          shift and go to state 24

state 141

    (27) block_function -> LBRACE code_block RBRACE .

    ELSE            reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    IF              reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    MATCH           reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    ID              reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    INT             reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    FLOAT           reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    STRING          reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    CHAR            reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    BOOL            reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    LET             reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    CONST           reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    LBRACKET        reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    $end            reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    RBRACE          reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)
    UNDERSCORE      reduce using rule 27 (block_function -> LBRACE code_block RBRACE .)


state 142

    (24) else_if_statement -> ELSE IF LPAREN . comparison_value RPAREN block_function else_if_statement
    (62) comparison_value -> . value comparison value
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    comparison_value               shift and go to state 146
    value                          shift and go to state 56
    array                          shift and go to state 24

state 143

    (25) else_if_statement -> ELSE IF function . comparison value block_function else_if_statement
    (72) comparison -> . LESS_THAN
    (73) comparison -> . GREATER_THAN
    (74) comparison -> . LESS_THAN_EQUAL
    (75) comparison -> . GREATER_THAN_EQUAL
    (76) comparison -> . NOT_EQUAL
    (77) comparison -> . EQUAL_EQUAL

    LESS_THAN       shift and go to state 35
    GREATER_THAN    shift and go to state 36
    LESS_THAN_EQUAL shift and go to state 37
    GREATER_THAN_EQUAL shift and go to state 38
    NOT_EQUAL       shift and go to state 39
    EQUAL_EQUAL     shift and go to state 40

    comparison                     shift and go to state 147

state 144

    (16) match_case_default -> UNDERSCORE FAT_ARROW . block_function
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 148

state 145

    (66) aritmetic_operation -> value aritmetic_operator value .

    SEMICOLON       reduce using rule 66 (aritmetic_operation -> value aritmetic_operator value .)


state 146

    (24) else_if_statement -> ELSE IF LPAREN comparison_value . RPAREN block_function else_if_statement

    RPAREN          shift and go to state 149


state 147

    (25) else_if_statement -> ELSE IF function comparison . value block_function else_if_statement
    (78) value -> . INT
    (79) value -> . FLOAT
    (80) value -> . STRING
    (81) value -> . CHAR
    (82) value -> . BOOL
    (83) value -> . ID
    (84) value -> . array
    (54) array -> . LBRACKET array_elements RBRACKET

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    CHAR            shift and go to state 22
    BOOL            shift and go to state 23
    ID              shift and go to state 57
    LBRACKET        shift and go to state 26

    value                          shift and go to state 150
    array                          shift and go to state 24

state 148

    (16) match_case_default -> UNDERSCORE FAT_ARROW block_function .

    RBRACE          reduce using rule 16 (match_case_default -> UNDERSCORE FAT_ARROW block_function .)
    UNDERSCORE      reduce using rule 16 (match_case_default -> UNDERSCORE FAT_ARROW block_function .)


state 149

    (24) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN . block_function else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 151

state 150

    (25) else_if_statement -> ELSE IF function comparison value . block_function else_if_statement
    (26) block_function -> . LBRACE RBRACE
    (27) block_function -> . LBRACE code_block RBRACE

    LBRACE          shift and go to state 109

    block_function                 shift and go to state 152

state 151

    (24) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function . else_if_statement
    (23) else_if_statement -> . ELSE block_function
    (24) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 113

    else_if_statement              shift and go to state 153

state 152

    (25) else_if_statement -> ELSE IF function comparison value block_function . else_if_statement
    (23) else_if_statement -> . ELSE block_function
    (24) else_if_statement -> . ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement
    (25) else_if_statement -> . ELSE IF function comparison value block_function else_if_statement

    ELSE            shift and go to state 113

    else_if_statement              shift and go to state 154

state 153

    (24) else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .

    IF              reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    MATCH           reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    ID              reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    INT             reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    FLOAT           reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    STRING          reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CHAR            reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    BOOL            reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LET             reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    CONST           reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    LBRACKET        reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)
    $end            reduce using rule 24 (else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement .)


state 154

    (25) else_if_statement -> ELSE IF function comparison value block_function else_if_statement .

    IF              reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    MATCH           reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    ID              reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    INT             reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    FLOAT           reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    STRING          reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    CHAR            reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    BOOL            reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    LET             reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    CONST           reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    LBRACKET        reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)
    $end            reduce using rule 25 (else_if_statement -> ELSE IF function comparison value block_function else_if_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for LET in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 5 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for INT in state 91 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 91 resolved as shift
WARNING: shift/reduce conflict for STRING in state 91 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 91 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 91 resolved as shift
WARNING: shift/reduce conflict for ID in state 91 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 91 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 123 resolved as shift
WARNING: reduce/reduce conflict in state 86 resolved using rule (data_structures -> array)
WARNING: rejected rule (value -> array) in state 86
