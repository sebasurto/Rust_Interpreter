
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AMPERSAND_AMPERSAND ARROW AS ASYNC AT AWAIT BANG BOOL BREAK CASE CHAR COLON COMMA COMMENS CONST CONTINUE CRATE DEFAULT_MATCH DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTE DYN ELSE ENUM EQUAL EQUAL_EQUAL EXTERN FALSE FAT_ARROW FLOAT FN FOR GREATER_THAN GREATER_THAN_EQUAL ID IF IMPL IN INT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUAL LET LOOP LPAREN MAIN MATCH MINUS MOD MODULO MOVE MUT NAME_FUNCTION NOT_EQUAL PIPE PIPE_PIPE PLUS PUB RBRACE RBRACKET REF RETURN RPAREN SELF SEMICOLON STATIC STRING STRUCT SUPER TIMES TRAIT TRUE TYPE UNDERSCORE UNION UNSAFE USE WHERE WHILE sELFsentence : let_statementmatch_body_line : match_casesmatch_pattern : value\n    | value PIPE match_patternmatch_body : match_body_line\n    | match_body_line match_bodyedc_match : MATCH ID LBRACE match_body RBRACEmatch_cases : match_case\n    | match_case match_casesmatch_case : match_pattern FAT_ARROW LBRACE code_body RBRACEmatch_case : DEFAULT_MATCH FAT_ARROW LBRACE code_body RBRACEcode_body : code_body_line \n    | code_body_line code_bodycode_body_line : expression SEMICOLON\n    | statement SEMICOLON\n    | SEMICOLONexpression : value\n    | expression PLUS expression\n    | expression MINUS expression\n    | expression TIMES expression\n    | expression DIVIDE expression\n    | expression MODULO expression\n    | expression EQUAL_EQUAL expression\n    | expression NOT_EQUAL expression\n    | expression GREATER_THAN expression\n    | expression GREATER_THAN_EQUAL expression\n    | expression LESS_THAN expression\n    | expression LESS_THAN_EQUAL expression\n    | expression PIPE_PIPE expression\n    | expression AMPERSAND_AMPERSAND expression\n    | expression PIPE expression\n    | expression AMPERSAND expression\n    | expression BANG expression\n    | expression EQUAL expression\n    | expression DOT ID\n    | expression LBRACKET expression RBRACKET\n    | expression LBRACE expression RBRACE\n    | expression COLON expression\n    | expression DOUBLE_COLON expression\n    | expression ARROW expression\n    | expression FAT_ARROW expression\n    | expression COMMA expression\n    | expression SEMICOLON expression\n    | expression AT expression\n    | expression UNDERSCORE expression\n    | expression DOUBLE_QUOTE expression\n    | expression CHAR expressionexpression : ID LPAREN RPAREN\n    | ID LPAREN parameters RPARENarray : LET ID EQUAL LBRACKET array_elements RBRACKETarray_elements : INT\n    | array_elements COMMA INT value : INT\n    | FLOAT\n    | STRING\n    | CHAR\n    | BOOL\n    | IDstatement : let_statement\n    | let_mut_statement\n    | const_statement\n    | if_statement\n    | while_statement\n    | for_statement\n    | match_statement\n    | function_statement\n    | return_statement\n    | break_statement\n    | continue_statementlet_statement : LET ID EQUAL expressionlet_mut_statement : LET MUT ID EQUAL expressionconst_statement : CONST ID EQUAL expressionif_statement : IF expression LBRACE code_body RBRACEwhile_statement : WHILE expression LBRACE code_body RBRACEfor_statement : FOR ID IN expression LBRACE code_body RBRACEmatch_statement : edc_matchfunction_statement : function\n    | function_mainfunction_main : FN MAIN LPAREN RPAREN LBRACE code_body RBRACEfunction : FN ID LPAREN RPAREN LBRACE code_body RBRACE\n    | FN ID LPAREN parameters RPAREN LBRACE code_body RBRACE\n    | FN ID LPAREN parameters RPAREN ARROW ID LBRACE code_body RBRACEparameters : ID\n    | ID COMMA parametersreturn_statement : RETURN expression SEMICOLONbreak_statement : BREAK SEMICOLONcontinue_statement : CONTINUE SEMICOLON'
    
_lr_action_items = {'LET':([0,],[3,]),'$end':([1,2,6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,70,71,72,73,74,75,76,77,79,80,81,],[0,-1,-58,-70,-17,-56,-53,-54,-55,-57,-48,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-35,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-36,-37,]),'ID':([3,5,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,78,],[4,6,45,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,65,6,6,6,6,6,6,6,6,6,6,6,6,45,]),'EQUAL':([4,6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[5,-58,15,-17,-56,-53,-54,-55,-57,-48,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-35,15,15,15,15,15,15,15,15,15,15,15,15,-49,-36,-37,]),'INT':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'FLOAT':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'STRING':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'CHAR':([5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[9,-58,44,-17,-56,-53,-54,-55,-57,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-48,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-35,44,44,44,44,44,44,44,44,44,44,44,44,-49,-36,-37,]),'BOOL':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'LPAREN':([6,],[14,]),'PLUS':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,16,-17,-56,-53,-54,-55,-57,-48,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-35,16,16,16,16,16,16,16,16,16,16,16,16,-49,-36,-37,]),'MINUS':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,17,-17,-56,-53,-54,-55,-57,-48,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-35,17,17,17,17,17,17,17,17,17,17,17,17,-49,-36,-37,]),'TIMES':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,18,-17,-56,-53,-54,-55,-57,-48,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-35,18,18,18,18,18,18,18,18,18,18,18,18,-49,-36,-37,]),'DIVIDE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,19,-17,-56,-53,-54,-55,-57,-48,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-35,19,19,19,19,19,19,19,19,19,19,19,19,-49,-36,-37,]),'MODULO':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,20,-17,-56,-53,-54,-55,-57,-48,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-35,20,20,20,20,20,20,20,20,20,20,20,20,-49,-36,-37,]),'EQUAL_EQUAL':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,21,-17,-56,-53,-54,-55,-57,-48,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-35,21,21,21,21,21,21,21,21,21,21,21,21,-49,-36,-37,]),'NOT_EQUAL':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,22,-17,-56,-53,-54,-55,-57,-48,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-35,22,22,22,22,22,22,22,22,22,22,22,22,-49,-36,-37,]),'GREATER_THAN':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,23,-17,-56,-53,-54,-55,-57,-48,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-35,23,23,23,23,23,23,23,23,23,23,23,23,-49,-36,-37,]),'GREATER_THAN_EQUAL':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,24,-17,-56,-53,-54,-55,-57,-48,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-35,24,24,24,24,24,24,24,24,24,24,24,24,-49,-36,-37,]),'LESS_THAN':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,25,-17,-56,-53,-54,-55,-57,-48,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-35,25,25,25,25,25,25,25,25,25,25,25,25,-49,-36,-37,]),'LESS_THAN_EQUAL':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,26,-17,-56,-53,-54,-55,-57,-48,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-35,26,26,26,26,26,26,26,26,26,26,26,26,-49,-36,-37,]),'PIPE_PIPE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,27,-17,-56,-53,-54,-55,-57,-48,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-35,27,27,27,27,27,27,27,27,27,27,27,27,-49,-36,-37,]),'AMPERSAND_AMPERSAND':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,28,-17,-56,-53,-54,-55,-57,-48,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-35,28,28,28,28,28,28,28,28,28,28,28,28,-49,-36,-37,]),'PIPE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,29,-17,-56,-53,-54,-55,-57,-48,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-35,29,29,29,29,29,29,29,29,29,29,29,29,-49,-36,-37,]),'AMPERSAND':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,30,-17,-56,-53,-54,-55,-57,-48,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-35,30,30,30,30,30,30,30,30,30,30,30,30,-49,-36,-37,]),'BANG':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,31,-17,-56,-53,-54,-55,-57,-48,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-35,31,31,31,31,31,31,31,31,31,31,31,31,-49,-36,-37,]),'DOT':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,32,-17,-56,-53,-54,-55,-57,-48,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-35,32,32,32,32,32,32,32,32,32,32,32,32,-49,-36,-37,]),'LBRACKET':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,33,-17,-56,-53,-54,-55,-57,-48,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-35,33,33,33,33,33,33,33,33,33,33,33,33,-49,-36,-37,]),'LBRACE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,34,-17,-56,-53,-54,-55,-57,-48,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-35,34,34,34,34,34,34,34,34,34,34,34,34,-49,-36,-37,]),'COLON':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,35,-17,-56,-53,-54,-55,-57,-48,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-35,35,35,35,35,35,35,35,35,35,35,35,35,-49,-36,-37,]),'DOUBLE_COLON':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,36,-17,-56,-53,-54,-55,-57,-48,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-35,36,36,36,36,36,36,36,36,36,36,36,36,-49,-36,-37,]),'ARROW':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,37,-17,-56,-53,-54,-55,-57,-48,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-35,37,37,37,37,37,37,37,37,37,37,37,37,-49,-36,-37,]),'FAT_ARROW':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,38,-17,-56,-53,-54,-55,-57,-48,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-35,38,38,38,38,38,38,38,38,38,38,38,38,-49,-36,-37,]),'COMMA':([6,7,8,9,10,11,12,13,45,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,39,-17,-56,-53,-54,-55,-57,78,-48,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-35,39,39,39,39,39,39,39,39,39,39,39,39,-49,-36,-37,]),'SEMICOLON':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,40,-17,-56,-53,-54,-55,-57,-48,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-35,40,40,40,40,40,40,40,40,40,40,40,40,-49,-36,-37,]),'AT':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,41,-17,-56,-53,-54,-55,-57,-48,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-35,41,41,41,41,41,41,41,41,41,41,41,41,-49,-36,-37,]),'UNDERSCORE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,42,-17,-56,-53,-54,-55,-57,-48,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-35,42,42,42,42,42,42,42,42,42,42,42,42,-49,-36,-37,]),'DOUBLE_QUOTE':([6,7,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,43,-17,-56,-53,-54,-55,-57,-48,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-35,43,43,43,43,43,43,43,43,43,43,43,43,-49,-36,-37,]),'RBRACKET':([6,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,-17,-56,-53,-54,-55,-57,-48,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-35,80,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-36,-37,]),'RBRACE':([6,8,9,10,11,12,13,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75,76,77,79,80,81,],[-58,-17,-56,-53,-54,-55,-57,-48,-34,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-35,81,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-36,-37,]),'RPAREN':([14,45,47,82,],[46,-83,79,-84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentence':([0,],[1,]),'let_statement':([0,],[2,]),'expression':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[7,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,76,77,]),'value':([5,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'parameters':([14,78,],[47,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentence","S'",1,None,None,None),
  ('sentence -> let_statement','sentence',1,'p_sentence','main.py',12),
  ('match_body_line -> match_cases','match_body_line',1,'p_match_body_line','main.py',18),
  ('match_pattern -> value','match_pattern',1,'p_match_pattern','main.py',22),
  ('match_pattern -> value PIPE match_pattern','match_pattern',3,'p_match_pattern','main.py',23),
  ('match_body -> match_body_line','match_body',1,'p_match_body','main.py',27),
  ('match_body -> match_body_line match_body','match_body',2,'p_match_body','main.py',28),
  ('edc_match -> MATCH ID LBRACE match_body RBRACE','edc_match',5,'p_edc_match','main.py',32),
  ('match_cases -> match_case','match_cases',1,'p_match_cases','main.py',36),
  ('match_cases -> match_case match_cases','match_cases',2,'p_match_cases','main.py',37),
  ('match_case -> match_pattern FAT_ARROW LBRACE code_body RBRACE','match_case',5,'p_match_case','main.py',41),
  ('match_case -> DEFAULT_MATCH FAT_ARROW LBRACE code_body RBRACE','match_case',5,'p_match_case_default','main.py',45),
  ('code_body -> code_body_line','code_body',1,'p_code_body','main.py',49),
  ('code_body -> code_body_line code_body','code_body',2,'p_code_body','main.py',50),
  ('code_body_line -> expression SEMICOLON','code_body_line',2,'p_code_body_line','main.py',54),
  ('code_body_line -> statement SEMICOLON','code_body_line',2,'p_code_body_line','main.py',55),
  ('code_body_line -> SEMICOLON','code_body_line',1,'p_code_body_line','main.py',56),
  ('expression -> value','expression',1,'p_expression','main.py',60),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',61),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',62),
  ('expression -> expression TIMES expression','expression',3,'p_expression','main.py',63),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',64),
  ('expression -> expression MODULO expression','expression',3,'p_expression','main.py',65),
  ('expression -> expression EQUAL_EQUAL expression','expression',3,'p_expression','main.py',66),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','main.py',67),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','main.py',68),
  ('expression -> expression GREATER_THAN_EQUAL expression','expression',3,'p_expression','main.py',69),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','main.py',70),
  ('expression -> expression LESS_THAN_EQUAL expression','expression',3,'p_expression','main.py',71),
  ('expression -> expression PIPE_PIPE expression','expression',3,'p_expression','main.py',72),
  ('expression -> expression AMPERSAND_AMPERSAND expression','expression',3,'p_expression','main.py',73),
  ('expression -> expression PIPE expression','expression',3,'p_expression','main.py',74),
  ('expression -> expression AMPERSAND expression','expression',3,'p_expression','main.py',75),
  ('expression -> expression BANG expression','expression',3,'p_expression','main.py',76),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','main.py',77),
  ('expression -> expression DOT ID','expression',3,'p_expression','main.py',78),
  ('expression -> expression LBRACKET expression RBRACKET','expression',4,'p_expression','main.py',79),
  ('expression -> expression LBRACE expression RBRACE','expression',4,'p_expression','main.py',80),
  ('expression -> expression COLON expression','expression',3,'p_expression','main.py',81),
  ('expression -> expression DOUBLE_COLON expression','expression',3,'p_expression','main.py',82),
  ('expression -> expression ARROW expression','expression',3,'p_expression','main.py',83),
  ('expression -> expression FAT_ARROW expression','expression',3,'p_expression','main.py',84),
  ('expression -> expression COMMA expression','expression',3,'p_expression','main.py',85),
  ('expression -> expression SEMICOLON expression','expression',3,'p_expression','main.py',86),
  ('expression -> expression AT expression','expression',3,'p_expression','main.py',87),
  ('expression -> expression UNDERSCORE expression','expression',3,'p_expression','main.py',88),
  ('expression -> expression DOUBLE_QUOTE expression','expression',3,'p_expression','main.py',89),
  ('expression -> expression CHAR expression','expression',3,'p_expression','main.py',90),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_expression_function_call','main.py',93),
  ('expression -> ID LPAREN parameters RPAREN','expression',4,'p_expression_function_call','main.py',94),
  ('array -> LET ID EQUAL LBRACKET array_elements RBRACKET','array',6,'p_let_array_i32','main.py',98),
  ('array_elements -> INT','array_elements',1,'p_array_elements_i32','main.py',101),
  ('array_elements -> array_elements COMMA INT','array_elements',3,'p_array_elements_i32','main.py',102),
  ('value -> INT','value',1,'p_value','main.py',106),
  ('value -> FLOAT','value',1,'p_value','main.py',107),
  ('value -> STRING','value',1,'p_value','main.py',108),
  ('value -> CHAR','value',1,'p_value','main.py',109),
  ('value -> BOOL','value',1,'p_value','main.py',110),
  ('value -> ID','value',1,'p_value','main.py',111),
  ('statement -> let_statement','statement',1,'p_statement','main.py',115),
  ('statement -> let_mut_statement','statement',1,'p_statement','main.py',116),
  ('statement -> const_statement','statement',1,'p_statement','main.py',117),
  ('statement -> if_statement','statement',1,'p_statement','main.py',118),
  ('statement -> while_statement','statement',1,'p_statement','main.py',119),
  ('statement -> for_statement','statement',1,'p_statement','main.py',120),
  ('statement -> match_statement','statement',1,'p_statement','main.py',121),
  ('statement -> function_statement','statement',1,'p_statement','main.py',122),
  ('statement -> return_statement','statement',1,'p_statement','main.py',123),
  ('statement -> break_statement','statement',1,'p_statement','main.py',124),
  ('statement -> continue_statement','statement',1,'p_statement','main.py',125),
  ('let_statement -> LET ID EQUAL expression','let_statement',4,'p_let_statement','main.py',129),
  ('let_mut_statement -> LET MUT ID EQUAL expression','let_mut_statement',5,'p_let_mut_statement','main.py',133),
  ('const_statement -> CONST ID EQUAL expression','const_statement',4,'p_const_statement','main.py',137),
  ('if_statement -> IF expression LBRACE code_body RBRACE','if_statement',5,'p_if_statement','main.py',142),
  ('while_statement -> WHILE expression LBRACE code_body RBRACE','while_statement',5,'p_while_statement','main.py',147),
  ('for_statement -> FOR ID IN expression LBRACE code_body RBRACE','for_statement',7,'p_for_statement','main.py',152),
  ('match_statement -> edc_match','match_statement',1,'p_match_statement','main.py',156),
  ('function_statement -> function','function_statement',1,'p_function_statement','main.py',160),
  ('function_statement -> function_main','function_statement',1,'p_function_statement','main.py',161),
  ('function_main -> FN MAIN LPAREN RPAREN LBRACE code_body RBRACE','function_main',7,'p_function_main','main.py',165),
  ('function -> FN ID LPAREN RPAREN LBRACE code_body RBRACE','function',7,'p_function','main.py',169),
  ('function -> FN ID LPAREN parameters RPAREN LBRACE code_body RBRACE','function',8,'p_function','main.py',170),
  ('function -> FN ID LPAREN parameters RPAREN ARROW ID LBRACE code_body RBRACE','function',10,'p_function','main.py',171),
  ('parameters -> ID','parameters',1,'p_parameters','main.py',175),
  ('parameters -> ID COMMA parameters','parameters',3,'p_parameters','main.py',176),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','main.py',180),
  ('break_statement -> BREAK SEMICOLON','break_statement',2,'p_break_statement','main.py',184),
  ('continue_statement -> CONTINUE SEMICOLON','continue_statement',2,'p_continue_statement','main.py',188),
]
