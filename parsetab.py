
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftNOTleftORleftANDnonassocEQUAL_EQUALNOT_EQUALnonassocLESS_THANLESS_THAN_EQUALGREATER_THANGREATER_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULEAMPERSAND AND ARROW AS ASYNC AT AWAIT BOOL BREAK CASE CHAR COLON COMMA COMMENS CONST CONTINUE CRATE DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTE DYN ELSE ENUM EQUAL EQUAL_EQUAL EXTERN FAT_ARROW FLOAT FN FOR GREATER_THAN GREATER_THAN_EQUAL ID IF IMPL IN INT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUAL LET LOOP LPAREN MAIN MATCH MINUS MINUS_OPERATOR MOD MODULE MOVE MUT NAME_FUNCTION NOT NOT_EQUAL OR PIPE PLUS PRINT PUB RBRACE RBRACKET REF RETURN RPAREN SELF SEMICOLON STATIC STRING STRUCT SUPER TIMES TRAIT TYPE UNDERSCORE UNION UNSAFE USE WHERE WHILE sELF\n    principal : body \n              | body principal\n    body : code_block\n            | control_structure\n    control_structure : if_statement\n    if_statement : IF LPAREN comparison_value RPAREN block_function\n                 | IF LPAREN comparison_value RPAREN block_function else_if_statement\n                 | IF function comparison value block_function\n                 | IF function comparison value block_function else_if_statement\n                 | IF LET EQUAL value block_function\n                 | IF LET EQUAL value else_if_statement\n    \n    else_if_statement : ELSE block_function\n                      | ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement\n                      | ELSE IF function comparison value block_function else_if_statement\n    \n    block_function : LBRACE RBRACE \n                   | LBRACE code_block RBRACE \n\n    \n    code_block : code_line\n               | code_line code_block\n    \n    code_line : code SEMICOLON\n    code : function\n            | comparison_production\n            | value\n            | logic_value\n            | statement\n    function : ID LPAREN RPAREN\n                | ID LPAREN value RPAREN\n                | ID LPAREN arguments_production RPAREN\n                | ID DOT ID LPAREN RPAREN\n                | ID DOT ID LPAREN value RPAREN\n                | ID DOT ID LPAREN arguments_production RPAREN\n    \n    print : PRINT LPAREN value RPAREN\n          | PRINT LPAREN STRING DOT ID RPAREN \n    \n    statement : LET ID EQUAL value\n              | LET MUT ID EQUAL value\n              | CONST ID EQUAL value\n              | ID EQUAL ID\n              | ID EQUAL aritmetic_operation_production\n              | LET ID EQUAL data_structures\n              | ID EQUAL data_structures\n              | LET MUT ID EQUAL data_structures\n    data_structures : tupletuple : LPAREN arguments_production RPAREN\n    arguments_production : value\n                         | value COMMA arguments_production\n    \n    comparison_production : comparison_value\n                          | comparison_value comparison comparison_production\n    comparison_value : value comparison valuelogic_value : value logic_operator value\n    aritmetic_operation_production : aritmetic_operation\n                                   | value aritmetic_operator aritmetic_operation\n    aritmetic_operation : value aritmetic_operator value\n    aritmetic_operator : PLUS\n                       | MINUS_OPERATOR\n                       | TIMES\n                       | DIVIDE\n                       | MODULE\n    \n    comparison : LESS_THAN\n               | GREATER_THAN\n               | LESS_THAN_EQUAL\n               | GREATER_THAN_EQUAL\n               | NOT_EQUAL\n               | EQUAL_EQUAL\n    \n    value : INT\n          | FLOAT\n          | STRING\n          | CHAR\n          | BOOL\n          | ID\n    \n    logic_operator : AND\n                   | OR\n                   | NOT\n    '
    
_lr_action_items = {'IF':([0,2,3,4,5,6,24,25,89,91,92,93,94,104,105,107,108,113,123,124,],[8,8,-3,-4,-17,-5,-18,-19,-6,-8,-10,-11,109,-7,-15,-9,-12,-16,-13,-14,]),'ID':([0,2,3,4,5,6,8,12,22,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,109,112,113,114,118,123,124,],[16,16,-3,-4,16,-5,29,42,47,-18,-19,50,50,-57,-58,-59,-60,-61,-62,50,50,-69,-70,-71,57,50,61,62,50,50,50,50,50,50,50,50,50,-52,-53,-54,-55,-56,-6,16,-8,-10,-11,-7,-15,-9,-12,29,50,-16,50,50,-13,-14,]),'INT':([0,2,3,4,5,6,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,112,113,114,118,123,124,],[17,17,-3,-4,17,-5,-18,-19,17,17,-57,-58,-59,-60,-61,-62,17,17,-69,-70,-71,17,17,17,17,17,17,17,17,17,17,17,-52,-53,-54,-55,-56,-6,17,-8,-10,-11,-7,-15,-9,-12,17,-16,17,17,-13,-14,]),'FLOAT':([0,2,3,4,5,6,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,112,113,114,118,123,124,],[18,18,-3,-4,18,-5,-18,-19,18,18,-57,-58,-59,-60,-61,-62,18,18,-69,-70,-71,18,18,18,18,18,18,18,18,18,18,18,-52,-53,-54,-55,-56,-6,18,-8,-10,-11,-7,-15,-9,-12,18,-16,18,18,-13,-14,]),'STRING':([0,2,3,4,5,6,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,112,113,114,118,123,124,],[19,19,-3,-4,19,-5,-18,-19,19,19,-57,-58,-59,-60,-61,-62,19,19,-69,-70,-71,19,19,19,19,19,19,19,19,19,19,19,-52,-53,-54,-55,-56,-6,19,-8,-10,-11,-7,-15,-9,-12,19,-16,19,19,-13,-14,]),'CHAR':([0,2,3,4,5,6,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,112,113,114,118,123,124,],[20,20,-3,-4,20,-5,-18,-19,20,20,-57,-58,-59,-60,-61,-62,20,20,-69,-70,-71,20,20,20,20,20,20,20,20,20,20,20,-52,-53,-54,-55,-56,-6,20,-8,-10,-11,-7,-15,-9,-12,20,-16,20,20,-13,-14,]),'BOOL':([0,2,3,4,5,6,24,25,26,30,31,32,33,34,35,36,37,38,39,40,41,44,46,51,52,56,68,69,75,77,79,80,81,82,83,84,85,89,90,91,92,93,104,105,107,108,112,113,114,118,123,124,],[21,21,-3,-4,21,-5,-18,-19,21,21,-57,-58,-59,-60,-61,-62,21,21,-69,-70,-71,21,21,21,21,21,21,21,21,21,21,21,-52,-53,-54,-55,-56,-6,21,-8,-10,-11,-7,-15,-9,-12,21,-16,21,21,-13,-14,]),'LET':([0,2,3,4,5,6,8,24,25,89,90,91,92,93,104,105,107,108,113,123,124,],[12,12,-3,-4,12,-5,28,-18,-19,-6,12,-8,-10,-11,-7,-15,-9,-12,-16,-13,-14,]),'CONST':([0,2,3,4,5,6,24,25,89,90,91,92,93,104,105,107,108,113,123,124,],[22,22,-3,-4,22,-5,-18,-19,-6,22,-8,-10,-11,-7,-15,-9,-12,-16,-13,-14,]),'$end':([1,2,3,4,5,6,23,24,25,89,91,92,93,104,105,107,108,113,123,124,],[0,-1,-3,-4,-17,-5,-2,-18,-19,-6,-8,-10,-11,-7,-15,-9,-12,-16,-13,-14,]),'RBRACE':([5,24,25,90,106,],[-17,-18,-19,105,113,]),'SEMICOLON':([7,9,10,11,13,14,15,16,17,18,19,20,21,50,53,54,55,58,62,63,64,65,67,73,74,76,78,88,95,96,98,101,102,103,110,111,116,],[25,-45,-20,-22,-21,-23,-24,-68,-63,-64,-65,-66,-67,-68,-46,-48,-47,-25,-36,-37,-39,-49,-41,-33,-38,-26,-27,-35,-34,-40,-28,-51,-50,-42,-29,-30,-51,]),'LPAREN':([8,16,29,46,56,61,75,109,],[26,44,44,68,68,79,68,114,]),'LESS_THAN':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[31,31,-68,-63,-64,-65,-66,-67,31,31,-68,-47,-25,-26,-27,-28,-29,-30,31,]),'GREATER_THAN':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[32,32,-68,-63,-64,-65,-66,-67,32,32,-68,-47,-25,-26,-27,-28,-29,-30,32,]),'LESS_THAN_EQUAL':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[33,33,-68,-63,-64,-65,-66,-67,33,33,-68,-47,-25,-26,-27,-28,-29,-30,33,]),'GREATER_THAN_EQUAL':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[34,34,-68,-63,-64,-65,-66,-67,34,34,-68,-47,-25,-26,-27,-28,-29,-30,34,]),'NOT_EQUAL':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[35,35,-68,-63,-64,-65,-66,-67,35,35,-68,-47,-25,-26,-27,-28,-29,-30,35,]),'EQUAL_EQUAL':([9,11,16,17,18,19,20,21,27,49,50,55,58,76,78,98,110,111,115,],[36,36,-68,-63,-64,-65,-66,-67,36,36,-68,-47,-25,-26,-27,-28,-29,-30,36,]),'AND':([11,16,17,18,19,20,21,],[39,-68,-63,-64,-65,-66,-67,]),'OR':([11,16,17,18,19,20,21,],[40,-68,-63,-64,-65,-66,-67,]),'NOT':([11,16,17,18,19,20,21,],[41,-68,-63,-64,-65,-66,-67,]),'MUT':([12,],[43,]),'DOT':([16,29,],[45,45,]),'EQUAL':([16,28,42,47,57,],[46,52,56,69,75,]),'RPAREN':([17,18,19,20,21,44,48,50,55,59,60,79,86,87,97,99,100,117,],[-63,-64,-65,-66,-67,58,70,-68,-47,76,78,98,103,-43,-44,110,111,119,]),'COMMA':([17,18,19,20,21,50,59,87,99,],[-63,-64,-65,-66,-67,-68,77,77,77,]),'PLUS':([17,18,19,20,21,50,62,66,101,],[-63,-64,-65,-66,-67,-68,-68,81,81,]),'MINUS_OPERATOR':([17,18,19,20,21,50,62,66,101,],[-63,-64,-65,-66,-67,-68,-68,82,82,]),'TIMES':([17,18,19,20,21,50,62,66,101,],[-63,-64,-65,-66,-67,-68,-68,83,83,]),'DIVIDE':([17,18,19,20,21,50,62,66,101,],[-63,-64,-65,-66,-67,-68,-68,84,84,]),'MODULE':([17,18,19,20,21,50,62,66,101,],[-63,-64,-65,-66,-67,-68,-68,85,85,]),'LBRACE':([17,18,19,20,21,50,70,71,72,94,119,120,],[-63,-64,-65,-66,-67,-68,90,90,90,90,90,90,]),'ELSE':([17,18,19,20,21,50,72,89,91,105,113,121,122,],[-63,-64,-65,-66,-67,-68,94,94,94,-15,-16,94,94,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'principal':([0,2,],[1,23,]),'body':([0,2,],[2,2,]),'code_block':([0,2,5,90,],[3,3,24,106,]),'control_structure':([0,2,],[4,4,]),'code_line':([0,2,5,90,],[5,5,5,5,]),'if_statement':([0,2,],[6,6,]),'code':([0,2,5,90,],[7,7,7,7,]),'comparison_value':([0,2,5,26,30,90,114,],[9,9,9,48,9,9,117,]),'function':([0,2,5,8,90,109,],[10,10,10,27,10,115,]),'value':([0,2,5,26,30,37,38,44,46,51,52,56,68,69,75,77,79,80,90,112,114,118,],[11,11,11,49,49,54,55,59,66,71,72,73,87,88,95,87,99,101,11,116,49,120,]),'comparison_production':([0,2,5,30,90,],[13,13,13,53,13,]),'logic_value':([0,2,5,90,],[14,14,14,14,]),'statement':([0,2,5,90,],[15,15,15,15,]),'comparison':([9,11,27,49,115,],[30,38,51,38,118,]),'logic_operator':([11,],[37,]),'arguments_production':([44,68,77,79,],[60,86,97,100,]),'aritmetic_operation_production':([46,],[63,]),'data_structures':([46,56,75,],[64,74,96,]),'aritmetic_operation':([46,80,],[65,102,]),'tuple':([46,56,75,],[67,67,67,]),'aritmetic_operator':([66,101,],[80,112,]),'block_function':([70,71,72,94,119,120,],[89,91,92,108,121,122,]),'else_if_statement':([72,89,91,121,122,],[93,104,107,123,124,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> principal","S'",1,None,None,None),
  ('principal -> body','principal',1,'p_principal','sintaxis.py',18),
  ('principal -> body principal','principal',2,'p_principal','sintaxis.py',19),
  ('body -> code_block','body',1,'p_body','sintaxis.py',23),
  ('body -> control_structure','body',1,'p_body','sintaxis.py',24),
  ('control_structure -> if_statement','control_structure',1,'p_control_structure','sintaxis.py',28),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function','if_statement',5,'p_if_statement','sintaxis.py',32),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',33),
  ('if_statement -> IF function comparison value block_function','if_statement',5,'p_if_statement','sintaxis.py',34),
  ('if_statement -> IF function comparison value block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',35),
  ('if_statement -> IF LET EQUAL value block_function','if_statement',5,'p_if_statement','sintaxis.py',36),
  ('if_statement -> IF LET EQUAL value else_if_statement','if_statement',5,'p_if_statement','sintaxis.py',37),
  ('else_if_statement -> ELSE block_function','else_if_statement',2,'p_else_if_statement','sintaxis.py',42),
  ('else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',43),
  ('else_if_statement -> ELSE IF function comparison value block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',44),
  ('block_function -> LBRACE RBRACE','block_function',2,'p_block_function','sintaxis.py',49),
  ('block_function -> LBRACE code_block RBRACE','block_function',3,'p_block_function','sintaxis.py',50),
  ('code_block -> code_line','code_block',1,'p_code_block','sintaxis.py',56),
  ('code_block -> code_line code_block','code_block',2,'p_code_block','sintaxis.py',57),
  ('code_line -> code SEMICOLON','code_line',2,'p_code_line','sintaxis.py',62),
  ('code -> function','code',1,'p_code','sintaxis.py',66),
  ('code -> comparison_production','code',1,'p_code','sintaxis.py',67),
  ('code -> value','code',1,'p_code','sintaxis.py',68),
  ('code -> logic_value','code',1,'p_code','sintaxis.py',69),
  ('code -> statement','code',1,'p_code','sintaxis.py',70),
  ('function -> ID LPAREN RPAREN','function',3,'p_function','sintaxis.py',74),
  ('function -> ID LPAREN value RPAREN','function',4,'p_function','sintaxis.py',75),
  ('function -> ID LPAREN arguments_production RPAREN','function',4,'p_function','sintaxis.py',76),
  ('function -> ID DOT ID LPAREN RPAREN','function',5,'p_function','sintaxis.py',77),
  ('function -> ID DOT ID LPAREN value RPAREN','function',6,'p_function','sintaxis.py',78),
  ('function -> ID DOT ID LPAREN arguments_production RPAREN','function',6,'p_function','sintaxis.py',79),
  ('print -> PRINT LPAREN value RPAREN','print',4,'p_print','sintaxis.py',84),
  ('print -> PRINT LPAREN STRING DOT ID RPAREN','print',6,'p_print','sintaxis.py',85),
  ('statement -> LET ID EQUAL value','statement',4,'p_statement','sintaxis.py',90),
  ('statement -> LET MUT ID EQUAL value','statement',5,'p_statement','sintaxis.py',91),
  ('statement -> CONST ID EQUAL value','statement',4,'p_statement','sintaxis.py',92),
  ('statement -> ID EQUAL ID','statement',3,'p_statement','sintaxis.py',93),
  ('statement -> ID EQUAL aritmetic_operation_production','statement',3,'p_statement','sintaxis.py',94),
  ('statement -> LET ID EQUAL data_structures','statement',4,'p_statement','sintaxis.py',95),
  ('statement -> ID EQUAL data_structures','statement',3,'p_statement','sintaxis.py',96),
  ('statement -> LET MUT ID EQUAL data_structures','statement',5,'p_statement','sintaxis.py',97),
  ('data_structures -> tuple','data_structures',1,'p_data_structures','sintaxis.py',101),
  ('tuple -> LPAREN arguments_production RPAREN','tuple',3,'p_tuple','sintaxis.py',104),
  ('arguments_production -> value','arguments_production',1,'p_arguments_production','sintaxis.py',108),
  ('arguments_production -> value COMMA arguments_production','arguments_production',3,'p_arguments_production','sintaxis.py',109),
  ('comparison_production -> comparison_value','comparison_production',1,'p_comparison_production','sintaxis.py',115),
  ('comparison_production -> comparison_value comparison comparison_production','comparison_production',3,'p_comparison_production','sintaxis.py',116),
  ('comparison_value -> value comparison value','comparison_value',3,'p_comparison_value','sintaxis.py',120),
  ('logic_value -> value logic_operator value','logic_value',3,'p_logic_value','sintaxis.py',123),
  ('aritmetic_operation_production -> aritmetic_operation','aritmetic_operation_production',1,'p_aritmetic_operation_production','sintaxis.py',127),
  ('aritmetic_operation_production -> value aritmetic_operator aritmetic_operation','aritmetic_operation_production',3,'p_aritmetic_operation_production','sintaxis.py',128),
  ('aritmetic_operation -> value aritmetic_operator value','aritmetic_operation',3,'p_aritmetic_operation','sintaxis.py',132),
  ('aritmetic_operator -> PLUS','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',136),
  ('aritmetic_operator -> MINUS_OPERATOR','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',137),
  ('aritmetic_operator -> TIMES','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',138),
  ('aritmetic_operator -> DIVIDE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',139),
  ('aritmetic_operator -> MODULE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',140),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','sintaxis.py',144),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','sintaxis.py',145),
  ('comparison -> LESS_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',146),
  ('comparison -> GREATER_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',147),
  ('comparison -> NOT_EQUAL','comparison',1,'p_comparison','sintaxis.py',148),
  ('comparison -> EQUAL_EQUAL','comparison',1,'p_comparison','sintaxis.py',149),
  ('value -> INT','value',1,'p_value','sintaxis.py',154),
  ('value -> FLOAT','value',1,'p_value','sintaxis.py',155),
  ('value -> STRING','value',1,'p_value','sintaxis.py',156),
  ('value -> CHAR','value',1,'p_value','sintaxis.py',157),
  ('value -> BOOL','value',1,'p_value','sintaxis.py',158),
  ('value -> ID','value',1,'p_value','sintaxis.py',159),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintaxis.py',164),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintaxis.py',165),
  ('logic_operator -> NOT','logic_operator',1,'p_logic_operator','sintaxis.py',166),
]
