
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftNOTleftORleftANDnonassocEQUAL_EQUALNOT_EQUALnonassocLESS_THANLESS_THAN_EQUALGREATER_THANGREATER_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULEAMPERSAND AND ARROW AS ASYNC AT AWAIT BOOL BREAK CASE CHAR COLON COMMA COMMENS CONST CONTINUE CRATE DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTE DYN ELSE ENUM EQUAL EQUAL_EQUAL EXTERN FAT_ARROW FLOAT FN FOR GREATER_THAN GREATER_THAN_EQUAL ID IF IMPL IN INT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUAL LET LOOP LPAREN MAIN MATCH MINUS MINUS_OPERATOR MOD MODULE MOVE MUT NAME_FUNCTION NOT NOT_EQUAL OR PIPE PLUS PRINT PUB RBRACE RBRACKET REF RETURN RPAREN SELF SEMICOLON STATIC STRING STRUCT SUPER TIMES TRAIT TYPE UNDERSCORE UNION UNSAFE USE WHERE WHILE sELF\n    principal : body \n              | body principal\n    body : code_block\n            | control_structure\n    \n    control_structure : if_statement\n                        | match_statement\n                        | fn_statement\n    match_body_line : match_casesmatch_pattern : value\n    | value PIPE match_patternmatch_body : match_body_line\n    | match_body_line match_body match_case_defaultmatch_statement : MATCH ID LBRACE match_body RBRACEmatch_cases : match_case\n    | match_case match_cases match_case : match_pattern FAT_ARROW block_functionmatch_case_default : UNDERSCORE FAT_ARROW block_function\n    if_statement : IF LPAREN comparison_value RPAREN block_function\n                 | IF LPAREN comparison_value RPAREN block_function else_if_statement\n                 | IF function comparison value block_function\n                 | IF function comparison value block_function else_if_statement\n                 | IF LET EQUAL value block_function\n                 | IF LET EQUAL value else_if_statement\n    \n    fn_statement : FN MAIN LPAREN RPAREN block_function\n    \n    else_if_statement : ELSE block_function\n                      | ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement\n                      | ELSE IF function comparison value block_function else_if_statement\n    \n    block_function : LBRACE RBRACE \n                   | LBRACE code_block RBRACE \n\n    \n    code_block : code_line\n               | code_line code_block\n    \n    code_line : code SEMICOLON\n    code : function\n            | comparison_production\n            | value\n            | logic_value\n            | statement\n    function : ID LPAREN RPAREN\n                | ID LPAREN value RPAREN\n                | ID LPAREN arguments_production RPAREN\n                | ID DOT ID LPAREN RPAREN\n                | ID DOT ID LPAREN value RPAREN\n                | ID DOT ID LPAREN arguments_production RPAREN\n                \n    \n    print : PRINT LPAREN value RPAREN\n          | PRINT LPAREN STRING DOT ID RPAREN \n    \n    statement : LET ID EQUAL value\n              | LET MUT ID EQUAL value\n              | CONST ID EQUAL value\n              | ID EQUAL ID\n              | ID EQUAL aritmetic_operation_production\n              | LET ID EQUAL data_structures\n              | ID EQUAL data_structures\n              | LET MUT ID EQUAL data_structures\n    \n    data_structures : tuple\n                    | array\n    array : LBRACKET array_elements RBRACKETarray_elements : INT\n    | array_elements COMMA INTtuple : LPAREN arguments_production RPAREN\n    arguments_production : value\n                         | value COMMA arguments_production\n    \n    comparison_production : comparison_value\n                          | comparison_value comparison comparison_production\n    comparison_value : value comparison valuelogic_value : value logic_operator value\n    aritmetic_operation_production : aritmetic_operation\n                                   | value aritmetic_operator aritmetic_operation\n    aritmetic_operation : value aritmetic_operator value\n    aritmetic_operator : PLUS\n                       | MINUS_OPERATOR\n                       | TIMES\n                       | DIVIDE\n                       | MODULE\n    \n    comparison : LESS_THAN\n               | GREATER_THAN\n               | LESS_THAN_EQUAL\n               | GREATER_THAN_EQUAL\n               | NOT_EQUAL\n               | EQUAL_EQUAL\n    \n    value : INT\n          | FLOAT\n          | STRING\n          | CHAR\n          | BOOL\n          | ID\n          | array\n    \n    logic_operator : AND\n                   | OR\n                   | NOT\n    '
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,8,30,31,113,115,116,117,118,121,133,134,135,137,138,147,159,160,],[10,10,-3,-4,-30,-5,-6,-7,-31,-32,-18,-20,-22,-23,139,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'MATCH':([0,2,3,4,5,6,7,8,30,31,113,115,116,117,121,133,134,135,137,138,147,159,160,],[15,15,-3,-4,-30,-5,-6,-7,-31,-32,-18,-20,-22,-23,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'FN':([0,2,3,4,5,6,7,8,30,31,113,115,116,117,121,133,134,135,137,138,147,159,160,],[17,17,-3,-4,-30,-5,-6,-7,-31,-32,-18,-20,-22,-23,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'ID':([0,2,3,4,5,6,7,8,10,14,15,27,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,49,51,52,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,139,142,146,147,148,153,159,160,],[16,16,-3,-4,16,-5,-6,-7,35,48,50,55,-31,-32,60,60,-74,-75,-76,-77,-78,-79,60,60,-87,-88,-89,67,60,72,73,60,60,60,60,60,60,60,60,-8,60,60,60,60,-69,-70,-71,-72,-73,-18,16,-20,-22,-23,-13,-15,60,-24,-19,-28,-21,-25,35,-16,60,-29,60,60,-26,-27,]),'INT':([0,2,3,4,5,6,7,8,28,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,84,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[21,21,-3,-4,21,-5,-6,-7,57,-31,-32,21,21,-74,-75,-76,-77,-78,-79,21,21,-87,-88,-89,21,21,21,21,21,21,21,21,112,21,21,-8,21,21,21,21,-69,-70,-71,-72,-73,-18,21,-20,-22,-23,-13,-15,21,-24,-19,-28,-21,-25,-16,21,-29,21,21,-26,-27,]),'FLOAT':([0,2,3,4,5,6,7,8,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[22,22,-3,-4,22,-5,-6,-7,-31,-32,22,22,-74,-75,-76,-77,-78,-79,22,22,-87,-88,-89,22,22,22,22,22,22,22,22,22,22,-8,22,22,22,22,-69,-70,-71,-72,-73,-18,22,-20,-22,-23,-13,-15,22,-24,-19,-28,-21,-25,-16,22,-29,22,22,-26,-27,]),'STRING':([0,2,3,4,5,6,7,8,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[23,23,-3,-4,23,-5,-6,-7,-31,-32,23,23,-74,-75,-76,-77,-78,-79,23,23,-87,-88,-89,23,23,23,23,23,23,23,23,23,23,-8,23,23,23,23,-69,-70,-71,-72,-73,-18,23,-20,-22,-23,-13,-15,23,-24,-19,-28,-21,-25,-16,23,-29,23,23,-26,-27,]),'CHAR':([0,2,3,4,5,6,7,8,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[24,24,-3,-4,24,-5,-6,-7,-31,-32,24,24,-74,-75,-76,-77,-78,-79,24,24,-87,-88,-89,24,24,24,24,24,24,24,24,24,24,-8,24,24,24,24,-69,-70,-71,-72,-73,-18,24,-20,-22,-23,-13,-15,24,-24,-19,-28,-21,-25,-16,24,-29,24,24,-26,-27,]),'BOOL':([0,2,3,4,5,6,7,8,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[25,25,-3,-4,25,-5,-6,-7,-31,-32,25,25,-74,-75,-76,-77,-78,-79,25,25,-87,-88,-89,25,25,25,25,25,25,25,25,25,25,-8,25,25,25,25,-69,-70,-71,-72,-73,-18,25,-20,-22,-23,-13,-15,25,-24,-19,-28,-21,-25,-16,25,-29,25,25,-26,-27,]),'LET':([0,2,3,4,5,6,7,8,10,30,31,113,114,115,116,117,121,133,134,135,137,138,147,159,160,],[14,14,-3,-4,14,-5,-6,-7,34,-31,-32,-18,14,-20,-22,-23,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'CONST':([0,2,3,4,5,6,7,8,30,31,113,114,115,116,117,121,133,134,135,137,138,147,159,160,],[27,27,-3,-4,27,-5,-6,-7,-31,-32,-18,27,-20,-22,-23,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'LBRACKET':([0,2,3,4,5,6,7,8,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,51,53,61,62,66,68,80,82,91,93,94,95,99,101,102,103,104,105,106,107,113,114,115,116,117,121,123,125,133,134,135,137,138,142,146,147,148,153,159,160,],[28,28,-3,-4,28,-5,-6,-7,-31,-32,28,28,-74,-75,-76,-77,-78,-79,28,28,-87,-88,-89,28,28,28,28,28,28,28,28,28,28,-8,28,28,28,28,-69,-70,-71,-72,-73,-18,28,-20,-22,-23,-13,-15,28,-24,-19,-28,-21,-25,-16,28,-29,28,28,-26,-27,]),'$end':([1,2,3,4,5,6,7,8,29,30,31,113,115,116,117,121,133,134,135,137,138,147,159,160,],[0,-1,-3,-4,-30,-5,-6,-7,-2,-31,-32,-18,-20,-22,-23,-13,-24,-19,-28,-21,-25,-29,-26,-27,]),'RBRACE':([5,30,31,92,93,94,95,114,123,135,136,140,142,147,154,],[-30,-31,-32,121,-11,-8,-14,135,-15,-28,147,-12,-16,-29,-17,]),'SEMICOLON':([9,11,12,13,16,18,19,20,21,22,23,24,25,26,60,63,64,65,69,73,74,75,76,78,79,83,88,89,90,98,100,111,119,120,127,130,131,132,144,145,151,],[31,-62,-33,-35,-85,-34,-36,-37,-80,-81,-82,-83,-84,-86,-85,-63,-65,-64,-38,-49,-50,-52,-66,-54,-55,-56,-46,-51,-55,-39,-40,-48,-47,-53,-41,-68,-67,-59,-42,-43,-68,]),'LPAREN':([10,16,35,53,54,66,72,91,139,],[32,51,51,80,81,80,101,80,148,]),'LESS_THAN':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[37,37,-85,-80,-81,-82,-83,-84,-86,37,37,-85,-64,-38,-56,-39,-40,-41,-42,-43,37,]),'GREATER_THAN':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[38,38,-85,-80,-81,-82,-83,-84,-86,38,38,-85,-64,-38,-56,-39,-40,-41,-42,-43,38,]),'LESS_THAN_EQUAL':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[39,39,-85,-80,-81,-82,-83,-84,-86,39,39,-85,-64,-38,-56,-39,-40,-41,-42,-43,39,]),'GREATER_THAN_EQUAL':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[40,40,-85,-80,-81,-82,-83,-84,-86,40,40,-85,-64,-38,-56,-39,-40,-41,-42,-43,40,]),'NOT_EQUAL':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[41,41,-85,-80,-81,-82,-83,-84,-86,41,41,-85,-64,-38,-56,-39,-40,-41,-42,-43,41,]),'EQUAL_EQUAL':([11,13,16,21,22,23,24,25,26,33,59,60,65,69,83,98,100,127,144,145,149,],[42,42,-85,-80,-81,-82,-83,-84,-86,42,42,-85,-64,-38,-56,-39,-40,-41,-42,-43,42,]),'AND':([13,16,21,22,23,24,25,26,83,],[45,-85,-80,-81,-82,-83,-84,-86,-56,]),'OR':([13,16,21,22,23,24,25,26,83,],[46,-85,-80,-81,-82,-83,-84,-86,-56,]),'NOT':([13,16,21,22,23,24,25,26,83,],[47,-85,-80,-81,-82,-83,-84,-86,-56,]),'MUT':([14,],[49,]),'DOT':([16,35,],[52,52,]),'EQUAL':([16,34,48,55,67,],[53,62,66,82,91,]),'MAIN':([17,],[54,]),'RPAREN':([21,22,23,24,25,26,51,58,60,65,70,71,81,83,101,108,109,126,128,129,152,],[-80,-81,-82,-83,-84,-86,69,85,-85,-64,98,100,110,-56,127,132,-60,-61,144,145,155,]),'COMMA':([21,22,23,24,25,26,56,57,60,70,83,109,112,128,],[-80,-81,-82,-83,-84,-86,84,-57,-85,99,-56,99,-58,99,]),'PLUS':([21,22,23,24,25,26,60,73,77,79,83,130,],[-80,-81,-82,-83,-84,-86,-85,-85,103,-86,-56,103,]),'MINUS_OPERATOR':([21,22,23,24,25,26,60,73,77,79,83,130,],[-80,-81,-82,-83,-84,-86,-85,-85,104,-86,-56,104,]),'TIMES':([21,22,23,24,25,26,60,73,77,79,83,130,],[-80,-81,-82,-83,-84,-86,-85,-85,105,-86,-56,105,]),'DIVIDE':([21,22,23,24,25,26,60,73,77,79,83,130,],[-80,-81,-82,-83,-84,-86,-85,-85,106,-86,-56,106,]),'MODULE':([21,22,23,24,25,26,60,73,77,79,83,130,],[-80,-81,-82,-83,-84,-86,-85,-85,107,-86,-56,107,]),'LBRACE':([21,22,23,24,25,26,50,60,83,85,86,87,110,118,124,150,155,156,],[-80,-81,-82,-83,-84,-86,68,-85,-56,114,114,114,114,114,114,114,114,114,]),'ELSE':([21,22,23,24,25,26,60,83,87,113,115,135,147,157,158,],[-80,-81,-82,-83,-84,-86,-85,-56,118,118,118,-28,-29,118,118,]),'PIPE':([21,22,23,24,25,26,60,83,97,],[-80,-81,-82,-83,-84,-86,-85,-56,125,]),'FAT_ARROW':([21,22,23,24,25,26,60,83,96,97,141,143,],[-80,-81,-82,-83,-84,-86,-85,-56,124,-9,150,-10,]),'RBRACKET':([56,57,112,],[83,-57,-58,]),'UNDERSCORE':([93,94,95,122,123,135,140,142,147,154,],[-11,-8,-14,141,-15,-28,-12,-16,-29,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'principal':([0,2,],[1,29,]),'body':([0,2,],[2,2,]),'code_block':([0,2,5,114,],[3,3,30,136,]),'control_structure':([0,2,],[4,4,]),'code_line':([0,2,5,114,],[5,5,5,5,]),'if_statement':([0,2,],[6,6,]),'match_statement':([0,2,],[7,7,]),'fn_statement':([0,2,],[8,8,]),'code':([0,2,5,114,],[9,9,9,9,]),'comparison_value':([0,2,5,32,36,114,148,],[11,11,11,58,11,11,152,]),'function':([0,2,5,10,114,139,],[12,12,12,33,12,149,]),'value':([0,2,5,32,36,43,44,51,53,61,62,66,68,80,82,91,93,95,99,101,102,114,125,146,148,153,],[13,13,13,59,59,64,65,70,77,86,87,88,97,109,111,119,97,97,109,128,130,13,97,151,59,156,]),'comparison_production':([0,2,5,36,114,],[18,18,18,63,18,]),'logic_value':([0,2,5,114,],[19,19,19,19,]),'statement':([0,2,5,114,],[20,20,20,20,]),'array':([0,2,5,32,36,43,44,51,53,61,62,66,68,80,82,91,93,95,99,101,102,114,125,146,148,153,],[26,26,26,26,26,26,26,26,79,26,26,90,26,26,26,90,26,26,26,26,26,26,26,26,26,26,]),'comparison':([11,13,33,59,149,],[36,44,61,44,153,]),'logic_operator':([13,],[43,]),'array_elements':([28,],[56,]),'arguments_production':([51,80,99,101,],[71,108,126,129,]),'aritmetic_operation_production':([53,],[74,]),'data_structures':([53,66,91,],[75,89,120,]),'aritmetic_operation':([53,102,],[76,131,]),'tuple':([53,66,91,],[78,78,78,]),'match_body':([68,93,],[92,122,]),'match_body_line':([68,93,],[93,93,]),'match_cases':([68,93,95,],[94,94,123,]),'match_case':([68,93,95,],[95,95,95,]),'match_pattern':([68,93,95,125,],[96,96,96,143,]),'aritmetic_operator':([77,130,],[102,146,]),'block_function':([85,86,87,110,118,124,150,155,156,],[113,115,116,133,138,142,154,157,158,]),'else_if_statement':([87,113,115,157,158,],[117,134,137,159,160,]),'match_case_default':([122,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> principal","S'",1,None,None,None),
  ('principal -> body','principal',1,'p_principal','sintaxis.py',22),
  ('principal -> body principal','principal',2,'p_principal','sintaxis.py',23),
  ('body -> code_block','body',1,'p_body','sintaxis.py',27),
  ('body -> control_structure','body',1,'p_body','sintaxis.py',28),
  ('control_structure -> if_statement','control_structure',1,'p_control_structure','sintaxis.py',33),
  ('control_structure -> match_statement','control_structure',1,'p_control_structure','sintaxis.py',34),
  ('control_structure -> fn_statement','control_structure',1,'p_control_structure','sintaxis.py',35),
  ('match_body_line -> match_cases','match_body_line',1,'p_match_body_line','sintaxis.py',40),
  ('match_pattern -> value','match_pattern',1,'p_match_pattern','sintaxis.py',44),
  ('match_pattern -> value PIPE match_pattern','match_pattern',3,'p_match_pattern','sintaxis.py',45),
  ('match_body -> match_body_line','match_body',1,'p_match_body','sintaxis.py',49),
  ('match_body -> match_body_line match_body match_case_default','match_body',3,'p_match_body','sintaxis.py',50),
  ('match_statement -> MATCH ID LBRACE match_body RBRACE','match_statement',5,'p_match_statement','sintaxis.py',54),
  ('match_cases -> match_case','match_cases',1,'p_match_cases','sintaxis.py',58),
  ('match_cases -> match_case match_cases','match_cases',2,'p_match_cases','sintaxis.py',59),
  ('match_case -> match_pattern FAT_ARROW block_function','match_case',3,'p_match_case','sintaxis.py',63),
  ('match_case_default -> UNDERSCORE FAT_ARROW block_function','match_case_default',3,'p_match_case_default','sintaxis.py',67),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function','if_statement',5,'p_if_statement','sintaxis.py',71),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',72),
  ('if_statement -> IF function comparison value block_function','if_statement',5,'p_if_statement','sintaxis.py',73),
  ('if_statement -> IF function comparison value block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',74),
  ('if_statement -> IF LET EQUAL value block_function','if_statement',5,'p_if_statement','sintaxis.py',75),
  ('if_statement -> IF LET EQUAL value else_if_statement','if_statement',5,'p_if_statement','sintaxis.py',76),
  ('fn_statement -> FN MAIN LPAREN RPAREN block_function','fn_statement',5,'p_fn_statement','sintaxis.py',80),
  ('else_if_statement -> ELSE block_function','else_if_statement',2,'p_else_if_statement','sintaxis.py',84),
  ('else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',85),
  ('else_if_statement -> ELSE IF function comparison value block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',86),
  ('block_function -> LBRACE RBRACE','block_function',2,'p_block_function','sintaxis.py',91),
  ('block_function -> LBRACE code_block RBRACE','block_function',3,'p_block_function','sintaxis.py',92),
  ('code_block -> code_line','code_block',1,'p_code_block','sintaxis.py',98),
  ('code_block -> code_line code_block','code_block',2,'p_code_block','sintaxis.py',99),
  ('code_line -> code SEMICOLON','code_line',2,'p_code_line','sintaxis.py',104),
  ('code -> function','code',1,'p_code','sintaxis.py',108),
  ('code -> comparison_production','code',1,'p_code','sintaxis.py',109),
  ('code -> value','code',1,'p_code','sintaxis.py',110),
  ('code -> logic_value','code',1,'p_code','sintaxis.py',111),
  ('code -> statement','code',1,'p_code','sintaxis.py',112),
  ('function -> ID LPAREN RPAREN','function',3,'p_function','sintaxis.py',116),
  ('function -> ID LPAREN value RPAREN','function',4,'p_function','sintaxis.py',117),
  ('function -> ID LPAREN arguments_production RPAREN','function',4,'p_function','sintaxis.py',118),
  ('function -> ID DOT ID LPAREN RPAREN','function',5,'p_function','sintaxis.py',119),
  ('function -> ID DOT ID LPAREN value RPAREN','function',6,'p_function','sintaxis.py',120),
  ('function -> ID DOT ID LPAREN arguments_production RPAREN','function',6,'p_function','sintaxis.py',121),
  ('print -> PRINT LPAREN value RPAREN','print',4,'p_print','sintaxis.py',127),
  ('print -> PRINT LPAREN STRING DOT ID RPAREN','print',6,'p_print','sintaxis.py',128),
  ('statement -> LET ID EQUAL value','statement',4,'p_statement','sintaxis.py',133),
  ('statement -> LET MUT ID EQUAL value','statement',5,'p_statement','sintaxis.py',134),
  ('statement -> CONST ID EQUAL value','statement',4,'p_statement','sintaxis.py',135),
  ('statement -> ID EQUAL ID','statement',3,'p_statement','sintaxis.py',136),
  ('statement -> ID EQUAL aritmetic_operation_production','statement',3,'p_statement','sintaxis.py',137),
  ('statement -> LET ID EQUAL data_structures','statement',4,'p_statement','sintaxis.py',138),
  ('statement -> ID EQUAL data_structures','statement',3,'p_statement','sintaxis.py',139),
  ('statement -> LET MUT ID EQUAL data_structures','statement',5,'p_statement','sintaxis.py',140),
  ('data_structures -> tuple','data_structures',1,'p_data_structures','sintaxis.py',145),
  ('data_structures -> array','data_structures',1,'p_data_structures','sintaxis.py',146),
  ('array -> LBRACKET array_elements RBRACKET','array',3,'p_array_i32','sintaxis.py',151),
  ('array_elements -> INT','array_elements',1,'p_array_elements_i32','sintaxis.py',154),
  ('array_elements -> array_elements COMMA INT','array_elements',3,'p_array_elements_i32','sintaxis.py',155),
  ('tuple -> LPAREN arguments_production RPAREN','tuple',3,'p_tuple','sintaxis.py',158),
  ('arguments_production -> value','arguments_production',1,'p_arguments_production','sintaxis.py',162),
  ('arguments_production -> value COMMA arguments_production','arguments_production',3,'p_arguments_production','sintaxis.py',163),
  ('comparison_production -> comparison_value','comparison_production',1,'p_comparison_production','sintaxis.py',169),
  ('comparison_production -> comparison_value comparison comparison_production','comparison_production',3,'p_comparison_production','sintaxis.py',170),
  ('comparison_value -> value comparison value','comparison_value',3,'p_comparison_value','sintaxis.py',174),
  ('logic_value -> value logic_operator value','logic_value',3,'p_logic_value','sintaxis.py',189),
  ('aritmetic_operation_production -> aritmetic_operation','aritmetic_operation_production',1,'p_aritmetic_operation_production','sintaxis.py',199),
  ('aritmetic_operation_production -> value aritmetic_operator aritmetic_operation','aritmetic_operation_production',3,'p_aritmetic_operation_production','sintaxis.py',200),
  ('aritmetic_operation -> value aritmetic_operator value','aritmetic_operation',3,'p_aritmetic_operation','sintaxis.py',222),
  ('aritmetic_operator -> PLUS','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',236),
  ('aritmetic_operator -> MINUS_OPERATOR','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',237),
  ('aritmetic_operator -> TIMES','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',238),
  ('aritmetic_operator -> DIVIDE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',239),
  ('aritmetic_operator -> MODULE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',240),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','sintaxis.py',244),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','sintaxis.py',245),
  ('comparison -> LESS_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',246),
  ('comparison -> GREATER_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',247),
  ('comparison -> NOT_EQUAL','comparison',1,'p_comparison','sintaxis.py',248),
  ('comparison -> EQUAL_EQUAL','comparison',1,'p_comparison','sintaxis.py',249),
  ('value -> INT','value',1,'p_value','sintaxis.py',256),
  ('value -> FLOAT','value',1,'p_value','sintaxis.py',257),
  ('value -> STRING','value',1,'p_value','sintaxis.py',258),
  ('value -> CHAR','value',1,'p_value','sintaxis.py',259),
  ('value -> BOOL','value',1,'p_value','sintaxis.py',260),
  ('value -> ID','value',1,'p_value','sintaxis.py',261),
  ('value -> array','value',1,'p_value','sintaxis.py',262),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintaxis.py',267),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintaxis.py',268),
  ('logic_operator -> NOT','logic_operator',1,'p_logic_operator','sintaxis.py',269),
]
