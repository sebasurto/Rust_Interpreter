
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftNOTleftORleftANDnonassocEQUAL_EQUALNOT_EQUALnonassocLESS_THANLESS_THAN_EQUALGREATER_THANGREATER_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULEAMPERSAND AND ARROW AS ASYNC AT AWAIT BOOL BREAK CASE CHAR COLON COMMA COMMENS CONST CONTINUE CRATE DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTE DYN ELSE ENUM EQUAL EQUAL_EQUAL EXTERN FAT_ARROW FLOAT FN FOR GREATER_THAN GREATER_THAN_EQUAL ID IF IMPL IN INT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUAL LET LOOP LPAREN MAIN MATCH MINUS MINUS_OPERATOR MOD MODULE MOVE MUT NAME_FUNCTION NOT NOT_EQUAL OR PIPE PLUS PRINT PUB RBRACE RBRACKET REF RETURN RPAREN SELF SEMICOLON STATIC STRING STRUCT SUPER TIMES TRAIT TYPE UNDERSCORE UNION UNSAFE USE WHERE WHILE sELF\n    principal : body \n              | body principal\n    body : code_block\n            | control_structure\n    \n    control_structure : if_statement\n                        | match_statement\n    match_body_line : match_casesmatch_pattern : value\n    | value PIPE match_patternmatch_body : match_body_line\n    | match_body_line match_body match_case_defaultmatch_statement : MATCH ID LBRACE match_body RBRACEmatch_cases : match_case\n    | match_case match_cases match_case : match_pattern FAT_ARROW block_functionmatch_case_default : UNDERSCORE FAT_ARROW block_function\n    if_statement : IF LPAREN comparison_value RPAREN block_function\n                 | IF LPAREN comparison_value RPAREN block_function else_if_statement\n                 | IF function comparison value block_function\n                 | IF function comparison value block_function else_if_statement\n                 | IF LET EQUAL value block_function\n                 | IF LET EQUAL value else_if_statement\n    \n    else_if_statement : ELSE block_function\n                      | ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement\n                      | ELSE IF function comparison value block_function else_if_statement\n    \n    block_function : LBRACE RBRACE \n                   | LBRACE code_block RBRACE \n\n    \n    code_block : code_line\n               | code_line code_block\n    \n    code_line : code SEMICOLON\n    code : function\n            | comparison_production\n            | value\n            | logic_value\n            | statement\n    function : ID LPAREN RPAREN\n                | ID LPAREN value RPAREN\n                | ID LPAREN arguments_production RPAREN\n                | ID DOT ID LPAREN RPAREN\n                | ID DOT ID LPAREN value RPAREN\n                | ID DOT ID LPAREN arguments_production RPAREN\n    \n    print : PRINT LPAREN value RPAREN\n          | PRINT LPAREN STRING DOT ID RPAREN \n    \n    statement : LET ID EQUAL value\n              | LET MUT ID EQUAL value\n              | CONST ID EQUAL value\n              | ID EQUAL ID\n              | ID EQUAL aritmetic_operation_production\n              | LET ID EQUAL data_structures\n              | ID EQUAL data_structures\n              | LET MUT ID EQUAL data_structures\n    \n    data_structures : tuple\n                    | array\n    array : LBRACKET array_elements RBRACKETarray_elements : INT\n    | array_elements COMMA INTtuple : LPAREN arguments_production RPAREN\n    arguments_production : value\n                         | value COMMA arguments_production\n    \n    comparison_production : comparison_value\n                          | comparison_value comparison comparison_production\n    comparison_value : value comparison valuelogic_value : value logic_operator value\n    aritmetic_operation_production : aritmetic_operation\n                                   | value aritmetic_operator aritmetic_operation\n    aritmetic_operation : value aritmetic_operator value\n    aritmetic_operator : PLUS\n                       | MINUS_OPERATOR\n                       | TIMES\n                       | DIVIDE\n                       | MODULE\n    \n    comparison : LESS_THAN\n               | GREATER_THAN\n               | LESS_THAN_EQUAL\n               | GREATER_THAN_EQUAL\n               | NOT_EQUAL\n               | EQUAL_EQUAL\n    \n    value : INT\n          | FLOAT\n          | STRING\n          | CHAR\n          | BOOL\n          | ID\n          | array\n    \n    logic_operator : AND\n                   | OR\n                   | NOT\n    '
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,28,29,108,110,111,112,113,116,128,129,131,132,141,153,154,],[9,9,-3,-4,-28,-5,-6,-29,-30,-17,-19,-21,-22,133,-12,-18,-26,-20,-23,-27,-24,-25,]),'MATCH':([0,2,3,4,5,6,7,28,29,108,110,111,112,116,128,129,131,132,141,153,154,],[14,14,-3,-4,-28,-5,-6,-29,-30,-17,-19,-21,-22,-12,-18,-26,-20,-23,-27,-24,-25,]),'ID':([0,2,3,4,5,6,7,9,13,14,25,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,47,49,50,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,133,136,140,141,142,147,153,154,],[15,15,-3,-4,15,-5,-6,33,46,48,52,-29,-30,57,57,-72,-73,-74,-75,-76,-77,57,57,-85,-86,-87,64,57,69,70,57,57,57,57,57,57,57,57,-7,57,57,57,57,-67,-68,-69,-70,-71,-17,15,-19,-21,-22,-12,-14,57,-18,-26,-20,-23,33,-15,57,-27,57,57,-24,-25,]),'INT':([0,2,3,4,5,6,7,26,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,80,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[19,19,-3,-4,19,-5,-6,54,-29,-30,19,19,-72,-73,-74,-75,-76,-77,19,19,-85,-86,-87,19,19,19,19,19,19,19,19,107,19,19,-7,19,19,19,19,-67,-68,-69,-70,-71,-17,19,-19,-21,-22,-12,-14,19,-18,-26,-20,-23,-15,19,-27,19,19,-24,-25,]),'FLOAT':([0,2,3,4,5,6,7,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[20,20,-3,-4,20,-5,-6,-29,-30,20,20,-72,-73,-74,-75,-76,-77,20,20,-85,-86,-87,20,20,20,20,20,20,20,20,20,20,-7,20,20,20,20,-67,-68,-69,-70,-71,-17,20,-19,-21,-22,-12,-14,20,-18,-26,-20,-23,-15,20,-27,20,20,-24,-25,]),'STRING':([0,2,3,4,5,6,7,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[21,21,-3,-4,21,-5,-6,-29,-30,21,21,-72,-73,-74,-75,-76,-77,21,21,-85,-86,-87,21,21,21,21,21,21,21,21,21,21,-7,21,21,21,21,-67,-68,-69,-70,-71,-17,21,-19,-21,-22,-12,-14,21,-18,-26,-20,-23,-15,21,-27,21,21,-24,-25,]),'CHAR':([0,2,3,4,5,6,7,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[22,22,-3,-4,22,-5,-6,-29,-30,22,22,-72,-73,-74,-75,-76,-77,22,22,-85,-86,-87,22,22,22,22,22,22,22,22,22,22,-7,22,22,22,22,-67,-68,-69,-70,-71,-17,22,-19,-21,-22,-12,-14,22,-18,-26,-20,-23,-15,22,-27,22,22,-24,-25,]),'BOOL':([0,2,3,4,5,6,7,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[23,23,-3,-4,23,-5,-6,-29,-30,23,23,-72,-73,-74,-75,-76,-77,23,23,-85,-86,-87,23,23,23,23,23,23,23,23,23,23,-7,23,23,23,23,-67,-68,-69,-70,-71,-17,23,-19,-21,-22,-12,-14,23,-18,-26,-20,-23,-15,23,-27,23,23,-24,-25,]),'LET':([0,2,3,4,5,6,7,9,28,29,108,109,110,111,112,116,128,129,131,132,141,153,154,],[13,13,-3,-4,13,-5,-6,32,-29,-30,-17,13,-19,-21,-22,-12,-18,-26,-20,-23,-27,-24,-25,]),'CONST':([0,2,3,4,5,6,7,28,29,108,109,110,111,112,116,128,129,131,132,141,153,154,],[25,25,-3,-4,25,-5,-6,-29,-30,-17,25,-19,-21,-22,-12,-18,-26,-20,-23,-27,-24,-25,]),'LBRACKET':([0,2,3,4,5,6,7,28,29,30,34,35,36,37,38,39,40,41,42,43,44,45,49,51,58,59,63,65,77,78,87,89,90,91,95,97,98,99,100,101,102,103,108,109,110,111,112,116,118,120,128,129,131,132,136,140,141,142,147,153,154,],[26,26,-3,-4,26,-5,-6,-29,-30,26,26,-72,-73,-74,-75,-76,-77,26,26,-85,-86,-87,26,26,26,26,26,26,26,26,26,26,-7,26,26,26,26,-67,-68,-69,-70,-71,-17,26,-19,-21,-22,-12,-14,26,-18,-26,-20,-23,-15,26,-27,26,26,-24,-25,]),'$end':([1,2,3,4,5,6,7,27,28,29,108,110,111,112,116,128,129,131,132,141,153,154,],[0,-1,-3,-4,-28,-5,-6,-2,-29,-30,-17,-19,-21,-22,-12,-18,-26,-20,-23,-27,-24,-25,]),'RBRACE':([5,28,29,88,89,90,91,109,118,129,130,134,136,141,148,],[-28,-29,-30,116,-10,-7,-13,129,-14,-26,141,-11,-15,-27,-16,]),'SEMICOLON':([8,10,11,12,15,16,17,18,19,20,21,22,23,24,57,60,61,62,66,70,71,72,73,75,76,79,84,85,86,94,96,106,114,115,122,125,126,127,138,139,145,],[29,-60,-31,-33,-83,-32,-34,-35,-78,-79,-80,-81,-82,-84,-83,-61,-63,-62,-36,-47,-48,-50,-64,-52,-53,-54,-44,-49,-53,-37,-38,-46,-45,-51,-39,-66,-65,-57,-40,-41,-66,]),'LPAREN':([9,15,33,51,63,69,87,133,],[30,49,49,77,77,97,77,142,]),'LESS_THAN':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[35,35,-83,-78,-79,-80,-81,-82,-84,35,35,-83,-62,-36,-54,-37,-38,-39,-40,-41,35,]),'GREATER_THAN':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[36,36,-83,-78,-79,-80,-81,-82,-84,36,36,-83,-62,-36,-54,-37,-38,-39,-40,-41,36,]),'LESS_THAN_EQUAL':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[37,37,-83,-78,-79,-80,-81,-82,-84,37,37,-83,-62,-36,-54,-37,-38,-39,-40,-41,37,]),'GREATER_THAN_EQUAL':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[38,38,-83,-78,-79,-80,-81,-82,-84,38,38,-83,-62,-36,-54,-37,-38,-39,-40,-41,38,]),'NOT_EQUAL':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[39,39,-83,-78,-79,-80,-81,-82,-84,39,39,-83,-62,-36,-54,-37,-38,-39,-40,-41,39,]),'EQUAL_EQUAL':([10,12,15,19,20,21,22,23,24,31,56,57,62,66,79,94,96,122,138,139,143,],[40,40,-83,-78,-79,-80,-81,-82,-84,40,40,-83,-62,-36,-54,-37,-38,-39,-40,-41,40,]),'AND':([12,15,19,20,21,22,23,24,79,],[43,-83,-78,-79,-80,-81,-82,-84,-54,]),'OR':([12,15,19,20,21,22,23,24,79,],[44,-83,-78,-79,-80,-81,-82,-84,-54,]),'NOT':([12,15,19,20,21,22,23,24,79,],[45,-83,-78,-79,-80,-81,-82,-84,-54,]),'MUT':([13,],[47,]),'DOT':([15,33,],[50,50,]),'EQUAL':([15,32,46,52,64,],[51,59,63,78,87,]),'RPAREN':([19,20,21,22,23,24,49,55,57,62,67,68,79,97,104,105,121,123,124,146,],[-78,-79,-80,-81,-82,-84,66,81,-83,-62,94,96,-54,122,127,-58,-59,138,139,149,]),'COMMA':([19,20,21,22,23,24,53,54,57,67,79,105,107,123,],[-78,-79,-80,-81,-82,-84,80,-55,-83,95,-54,95,-56,95,]),'PLUS':([19,20,21,22,23,24,57,70,74,76,79,125,],[-78,-79,-80,-81,-82,-84,-83,-83,99,-84,-54,99,]),'MINUS_OPERATOR':([19,20,21,22,23,24,57,70,74,76,79,125,],[-78,-79,-80,-81,-82,-84,-83,-83,100,-84,-54,100,]),'TIMES':([19,20,21,22,23,24,57,70,74,76,79,125,],[-78,-79,-80,-81,-82,-84,-83,-83,101,-84,-54,101,]),'DIVIDE':([19,20,21,22,23,24,57,70,74,76,79,125,],[-78,-79,-80,-81,-82,-84,-83,-83,102,-84,-54,102,]),'MODULE':([19,20,21,22,23,24,57,70,74,76,79,125,],[-78,-79,-80,-81,-82,-84,-83,-83,103,-84,-54,103,]),'LBRACE':([19,20,21,22,23,24,48,57,79,81,82,83,113,119,144,149,150,],[-78,-79,-80,-81,-82,-84,65,-83,-54,109,109,109,109,109,109,109,109,]),'ELSE':([19,20,21,22,23,24,57,79,83,108,110,129,141,151,152,],[-78,-79,-80,-81,-82,-84,-83,-54,113,113,113,-26,-27,113,113,]),'PIPE':([19,20,21,22,23,24,57,79,93,],[-78,-79,-80,-81,-82,-84,-83,-54,120,]),'FAT_ARROW':([19,20,21,22,23,24,57,79,92,93,135,137,],[-78,-79,-80,-81,-82,-84,-83,-54,119,-8,144,-9,]),'RBRACKET':([53,54,107,],[79,-55,-56,]),'UNDERSCORE':([89,90,91,117,118,129,134,136,141,148,],[-10,-7,-13,135,-14,-26,-11,-15,-27,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'principal':([0,2,],[1,27,]),'body':([0,2,],[2,2,]),'code_block':([0,2,5,109,],[3,3,28,130,]),'control_structure':([0,2,],[4,4,]),'code_line':([0,2,5,109,],[5,5,5,5,]),'if_statement':([0,2,],[6,6,]),'match_statement':([0,2,],[7,7,]),'code':([0,2,5,109,],[8,8,8,8,]),'comparison_value':([0,2,5,30,34,109,142,],[10,10,10,55,10,10,146,]),'function':([0,2,5,9,109,133,],[11,11,11,31,11,143,]),'value':([0,2,5,30,34,41,42,49,51,58,59,63,65,77,78,87,89,91,95,97,98,109,120,140,142,147,],[12,12,12,56,56,61,62,67,74,82,83,84,93,105,106,114,93,93,105,123,125,12,93,145,56,150,]),'comparison_production':([0,2,5,34,109,],[16,16,16,60,16,]),'logic_value':([0,2,5,109,],[17,17,17,17,]),'statement':([0,2,5,109,],[18,18,18,18,]),'array':([0,2,5,30,34,41,42,49,51,58,59,63,65,77,78,87,89,91,95,97,98,109,120,140,142,147,],[24,24,24,24,24,24,24,24,76,24,24,86,24,24,24,86,24,24,24,24,24,24,24,24,24,24,]),'comparison':([10,12,31,56,143,],[34,42,58,42,147,]),'logic_operator':([12,],[41,]),'array_elements':([26,],[53,]),'arguments_production':([49,77,95,97,],[68,104,121,124,]),'aritmetic_operation_production':([51,],[71,]),'data_structures':([51,63,87,],[72,85,115,]),'aritmetic_operation':([51,98,],[73,126,]),'tuple':([51,63,87,],[75,75,75,]),'match_body':([65,89,],[88,117,]),'match_body_line':([65,89,],[89,89,]),'match_cases':([65,89,91,],[90,90,118,]),'match_case':([65,89,91,],[91,91,91,]),'match_pattern':([65,89,91,120,],[92,92,92,137,]),'aritmetic_operator':([74,125,],[98,140,]),'block_function':([81,82,83,113,119,144,149,150,],[108,110,111,132,136,148,151,152,]),'else_if_statement':([83,108,110,151,152,],[112,128,131,153,154,]),'match_case_default':([117,],[134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> principal","S'",1,None,None,None),
  ('principal -> body','principal',1,'p_principal','sintaxis.py',22),
  ('principal -> body principal','principal',2,'p_principal','sintaxis.py',23),
  ('body -> code_block','body',1,'p_body','sintaxis.py',27),
  ('body -> control_structure','body',1,'p_body','sintaxis.py',28),
  ('control_structure -> if_statement','control_structure',1,'p_control_structure','sintaxis.py',33),
  ('control_structure -> match_statement','control_structure',1,'p_control_structure','sintaxis.py',34),
  ('match_body_line -> match_cases','match_body_line',1,'p_match_body_line','sintaxis.py',39),
  ('match_pattern -> value','match_pattern',1,'p_match_pattern','sintaxis.py',43),
  ('match_pattern -> value PIPE match_pattern','match_pattern',3,'p_match_pattern','sintaxis.py',44),
  ('match_body -> match_body_line','match_body',1,'p_match_body','sintaxis.py',48),
  ('match_body -> match_body_line match_body match_case_default','match_body',3,'p_match_body','sintaxis.py',49),
  ('match_statement -> MATCH ID LBRACE match_body RBRACE','match_statement',5,'p_match_statement','sintaxis.py',53),
  ('match_cases -> match_case','match_cases',1,'p_match_cases','sintaxis.py',57),
  ('match_cases -> match_case match_cases','match_cases',2,'p_match_cases','sintaxis.py',58),
  ('match_case -> match_pattern FAT_ARROW block_function','match_case',3,'p_match_case','sintaxis.py',62),
  ('match_case_default -> UNDERSCORE FAT_ARROW block_function','match_case_default',3,'p_match_case_default','sintaxis.py',66),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function','if_statement',5,'p_if_statement','sintaxis.py',70),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',71),
  ('if_statement -> IF function comparison value block_function','if_statement',5,'p_if_statement','sintaxis.py',72),
  ('if_statement -> IF function comparison value block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',73),
  ('if_statement -> IF LET EQUAL value block_function','if_statement',5,'p_if_statement','sintaxis.py',74),
  ('if_statement -> IF LET EQUAL value else_if_statement','if_statement',5,'p_if_statement','sintaxis.py',75),
  ('else_if_statement -> ELSE block_function','else_if_statement',2,'p_else_if_statement','sintaxis.py',80),
  ('else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',81),
  ('else_if_statement -> ELSE IF function comparison value block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',82),
  ('block_function -> LBRACE RBRACE','block_function',2,'p_block_function','sintaxis.py',87),
  ('block_function -> LBRACE code_block RBRACE','block_function',3,'p_block_function','sintaxis.py',88),
  ('code_block -> code_line','code_block',1,'p_code_block','sintaxis.py',94),
  ('code_block -> code_line code_block','code_block',2,'p_code_block','sintaxis.py',95),
  ('code_line -> code SEMICOLON','code_line',2,'p_code_line','sintaxis.py',100),
  ('code -> function','code',1,'p_code','sintaxis.py',104),
  ('code -> comparison_production','code',1,'p_code','sintaxis.py',105),
  ('code -> value','code',1,'p_code','sintaxis.py',106),
  ('code -> logic_value','code',1,'p_code','sintaxis.py',107),
  ('code -> statement','code',1,'p_code','sintaxis.py',108),
  ('function -> ID LPAREN RPAREN','function',3,'p_function','sintaxis.py',112),
  ('function -> ID LPAREN value RPAREN','function',4,'p_function','sintaxis.py',113),
  ('function -> ID LPAREN arguments_production RPAREN','function',4,'p_function','sintaxis.py',114),
  ('function -> ID DOT ID LPAREN RPAREN','function',5,'p_function','sintaxis.py',115),
  ('function -> ID DOT ID LPAREN value RPAREN','function',6,'p_function','sintaxis.py',116),
  ('function -> ID DOT ID LPAREN arguments_production RPAREN','function',6,'p_function','sintaxis.py',117),
  ('print -> PRINT LPAREN value RPAREN','print',4,'p_print','sintaxis.py',122),
  ('print -> PRINT LPAREN STRING DOT ID RPAREN','print',6,'p_print','sintaxis.py',123),
  ('statement -> LET ID EQUAL value','statement',4,'p_statement','sintaxis.py',128),
  ('statement -> LET MUT ID EQUAL value','statement',5,'p_statement','sintaxis.py',129),
  ('statement -> CONST ID EQUAL value','statement',4,'p_statement','sintaxis.py',130),
  ('statement -> ID EQUAL ID','statement',3,'p_statement','sintaxis.py',131),
  ('statement -> ID EQUAL aritmetic_operation_production','statement',3,'p_statement','sintaxis.py',132),
  ('statement -> LET ID EQUAL data_structures','statement',4,'p_statement','sintaxis.py',133),
  ('statement -> ID EQUAL data_structures','statement',3,'p_statement','sintaxis.py',134),
  ('statement -> LET MUT ID EQUAL data_structures','statement',5,'p_statement','sintaxis.py',135),
  ('data_structures -> tuple','data_structures',1,'p_data_structures','sintaxis.py',140),
  ('data_structures -> array','data_structures',1,'p_data_structures','sintaxis.py',141),
  ('array -> LBRACKET array_elements RBRACKET','array',3,'p_array_i32','sintaxis.py',146),
  ('array_elements -> INT','array_elements',1,'p_array_elements_i32','sintaxis.py',149),
  ('array_elements -> array_elements COMMA INT','array_elements',3,'p_array_elements_i32','sintaxis.py',150),
  ('tuple -> LPAREN arguments_production RPAREN','tuple',3,'p_tuple','sintaxis.py',153),
  ('arguments_production -> value','arguments_production',1,'p_arguments_production','sintaxis.py',157),
  ('arguments_production -> value COMMA arguments_production','arguments_production',3,'p_arguments_production','sintaxis.py',158),
  ('comparison_production -> comparison_value','comparison_production',1,'p_comparison_production','sintaxis.py',164),
  ('comparison_production -> comparison_value comparison comparison_production','comparison_production',3,'p_comparison_production','sintaxis.py',165),
  ('comparison_value -> value comparison value','comparison_value',3,'p_comparison_value','sintaxis.py',169),
  ('logic_value -> value logic_operator value','logic_value',3,'p_logic_value','sintaxis.py',184),
  ('aritmetic_operation_production -> aritmetic_operation','aritmetic_operation_production',1,'p_aritmetic_operation_production','sintaxis.py',194),
  ('aritmetic_operation_production -> value aritmetic_operator aritmetic_operation','aritmetic_operation_production',3,'p_aritmetic_operation_production','sintaxis.py',195),
  ('aritmetic_operation -> value aritmetic_operator value','aritmetic_operation',3,'p_aritmetic_operation','sintaxis.py',217),
  ('aritmetic_operator -> PLUS','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',231),
  ('aritmetic_operator -> MINUS_OPERATOR','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',232),
  ('aritmetic_operator -> TIMES','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',233),
  ('aritmetic_operator -> DIVIDE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',234),
  ('aritmetic_operator -> MODULE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',235),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','sintaxis.py',239),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','sintaxis.py',240),
  ('comparison -> LESS_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',241),
  ('comparison -> GREATER_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',242),
  ('comparison -> NOT_EQUAL','comparison',1,'p_comparison','sintaxis.py',243),
  ('comparison -> EQUAL_EQUAL','comparison',1,'p_comparison','sintaxis.py',244),
  ('value -> INT','value',1,'p_value','sintaxis.py',251),
  ('value -> FLOAT','value',1,'p_value','sintaxis.py',252),
  ('value -> STRING','value',1,'p_value','sintaxis.py',253),
  ('value -> CHAR','value',1,'p_value','sintaxis.py',254),
  ('value -> BOOL','value',1,'p_value','sintaxis.py',255),
  ('value -> ID','value',1,'p_value','sintaxis.py',256),
  ('value -> array','value',1,'p_value','sintaxis.py',257),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintaxis.py',262),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintaxis.py',263),
  ('logic_operator -> NOT','logic_operator',1,'p_logic_operator','sintaxis.py',264),
]
