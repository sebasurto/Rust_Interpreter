
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftNOTleftORleftANDnonassocEQUAL_EQUALNOT_EQUALnonassocLESS_THANLESS_THAN_EQUALGREATER_THANGREATER_THAN_EQUALleftPLUSMINUSleftTIMESDIVIDEMODULEAMPERSAND AND ARROW AS ASYNC AT AWAIT BOOL BREAK CASE CHAR COLON COMMA COMMENS CONST CONTINUE CRATE DIVIDE DOT DOUBLE_COLON DOUBLE_QUOTE DYN ELSE ENUM EQUAL EQUAL_EQUAL EXTERN FAT_ARROW FLOAT FN FOR GREATER_THAN GREATER_THAN_EQUAL ID IF IMPL IN INT LBRACE LBRACKET LESS_THAN LESS_THAN_EQUAL LET LOOP LPAREN MAIN MATCH MINUS MOD MODULE MOVE MUT NAME_FUNCTION NOT NOT_EQUAL OR PIPE PLUS PUB RBRACE RBRACKET REF RETURN RPAREN SELF SEMICOLON STATIC STRING STRUCT SUPER TIMES TRAIT TYPE UNDERSCORE UNION UNSAFE USE WHERE WHILE sELFbody : code_block\n            | if_statement\n    \n    if_statement : IF LPAREN comparison_value RPAREN block_function\n                 | IF LPAREN comparison_value RPAREN block_function else_if_statement\n                 | IF function comparison value block_function\n                 | IF function comparison value block_function else_if_statement\n    \n    else_if_statement : ELSE block_function\n                      | ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement\n                      | ELSE IF function comparison value block_function else_if_statement\n    \n    block_function : LBRACE RBRACE \n                   | LBRACE code_block RBRACE \n\n    \n    code_block : code_line\n               | code_line code_block\n    \n    code_line : code SEMICOLON\n    code : function\n            | comparison_production\n            | value\n            | logic_value\n            | statement\n    function : ID LPAREN RPAREN\n                | ID LPAREN value RPAREN\n                | ID LPAREN arguments_production RPAREN\n                | ID DOT ID LPAREN RPAREN\n                | ID DOT ID LPAREN value RPAREN\n                | ID DOT ID LPAREN arguments_production RPAREN\n    \n    statement : LET ID EQUAL value\n              | LET MUT ID EQUAL value\n              | CONST ID EQUAL value\n              | ID EQUAL ID\n              | ID EQUAL aritmetic_operation_production\n    \n    arguments_production : value\n                         | value COMMA arguments_production\n    \n    comparison_production : comparison_value\n                          | comparison_value comparison comparison_production\n    comparison_value : value comparison valuelogic_value : value logic_operator value\n    aritmetic_operation_production : aritmetic_operation\n                                   | value aritmetic_operator aritmetic_operation\n    aritmetic_operation : value aritmetic_operator value\n    aritmetic_operator : PLUS\n                       | MINUS\n                       | TIMES\n                       | DIVIDE\n                       | MODULE\n    \n    comparison : LESS_THAN\n               | GREATER_THAN\n               | LESS_THAN_EQUAL\n               | GREATER_THAN_EQUAL\n               | NOT_EQUAL\n               | EQUAL_EQUAL\n    \n    value : INT\n          | FLOAT\n          | STRING\n          | CHAR\n          | BOOL\n          | ID\n    \n    logic_operator : AND\n                   | OR\n                   | NOT\n    '
    
_lr_action_items = {'IF':([0,89,],[5,97,]),'ID':([0,4,5,19,20,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,47,59,61,65,67,68,69,70,71,72,73,75,78,95,97,100,103,],[13,13,24,41,43,46,46,-45,-46,-47,-48,-49,-50,46,46,-57,-58,-59,-14,46,54,55,60,46,46,46,46,46,46,-40,-41,-42,-43,-44,46,13,46,24,46,46,]),'INT':([0,4,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,47,59,61,65,67,68,69,70,71,72,73,75,78,95,100,103,],[14,14,14,14,-45,-46,-47,-48,-49,-50,14,14,-57,-58,-59,-14,14,14,14,14,14,14,14,14,-40,-41,-42,-43,-44,14,14,14,14,14,]),'FLOAT':([0,4,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,47,59,61,65,67,68,69,70,71,72,73,75,78,95,100,103,],[15,15,15,15,-45,-46,-47,-48,-49,-50,15,15,-57,-58,-59,-14,15,15,15,15,15,15,15,15,-40,-41,-42,-43,-44,15,15,15,15,15,]),'STRING':([0,4,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,47,59,61,65,67,68,69,70,71,72,73,75,78,95,100,103,],[16,16,16,16,-45,-46,-47,-48,-49,-50,16,16,-57,-58,-59,-14,16,16,16,16,16,16,16,16,-40,-41,-42,-43,-44,16,16,16,16,16,]),'CHAR':([0,4,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,47,59,61,65,67,68,69,70,71,72,73,75,78,95,100,103,],[17,17,17,17,-45,-46,-47,-48,-49,-50,17,17,-57,-58,-59,-14,17,17,17,17,17,17,17,17,-40,-41,-42,-43,-44,17,17,17,17,17,]),'BOOL':([0,4,22,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,47,59,61,65,67,68,69,70,71,72,73,75,78,95,100,103,],[18,18,18,18,-45,-46,-47,-48,-49,-50,18,18,-57,-58,-59,-14,18,18,18,18,18,18,18,18,-40,-41,-42,-43,-44,18,18,18,18,18,]),'LET':([0,4,37,78,],[19,19,-14,19,]),'CONST':([0,4,37,78,],[20,20,-14,20,]),'$end':([1,2,3,4,21,37,77,79,88,90,92,96,98,108,109,],[0,-1,-2,-12,-13,-14,-3,-5,-4,-10,-6,-7,-11,-8,-9,]),'RBRACE':([4,21,37,78,91,],[-12,-13,-14,90,98,]),'LPAREN':([5,13,24,54,97,],[22,38,38,67,100,]),'SEMICOLON':([6,7,8,9,10,11,12,13,14,15,16,17,18,46,48,49,50,51,55,56,57,64,66,74,76,82,85,86,87,93,94,99,],[-33,-15,-17,37,-16,-18,-19,-56,-51,-52,-53,-54,-55,-56,-34,-36,-35,-20,-29,-30,-37,-21,-22,-26,-28,-23,-39,-38,-27,-24,-25,-39,]),'LESS_THAN':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[26,26,-56,-51,-52,-53,-54,-55,26,26,-56,-35,-20,-21,-22,-23,-24,-25,26,]),'GREATER_THAN':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[27,27,-56,-51,-52,-53,-54,-55,27,27,-56,-35,-20,-21,-22,-23,-24,-25,27,]),'LESS_THAN_EQUAL':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[28,28,-56,-51,-52,-53,-54,-55,28,28,-56,-35,-20,-21,-22,-23,-24,-25,28,]),'GREATER_THAN_EQUAL':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[29,29,-56,-51,-52,-53,-54,-55,29,29,-56,-35,-20,-21,-22,-23,-24,-25,29,]),'NOT_EQUAL':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[30,30,-56,-51,-52,-53,-54,-55,30,30,-56,-35,-20,-21,-22,-23,-24,-25,30,]),'EQUAL_EQUAL':([6,8,13,14,15,16,17,18,23,45,46,50,51,64,66,82,93,94,101,],[31,31,-56,-51,-52,-53,-54,-55,31,31,-56,-35,-20,-21,-22,-23,-24,-25,31,]),'AND':([8,13,14,15,16,17,18,],[34,-56,-51,-52,-53,-54,-55,]),'OR':([8,13,14,15,16,17,18,],[35,-56,-51,-52,-53,-54,-55,]),'NOT':([8,13,14,15,16,17,18,],[36,-56,-51,-52,-53,-54,-55,]),'DOT':([13,24,],[39,39,]),'EQUAL':([13,41,43,60,],[40,59,61,75,]),'RPAREN':([14,15,16,17,18,38,44,46,50,52,53,67,80,81,83,84,102,],[-51,-52,-53,-54,-55,51,62,-56,-35,64,66,82,-31,-32,93,94,104,]),'COMMA':([14,15,16,17,18,46,52,80,83,],[-51,-52,-53,-54,-55,-56,65,65,65,]),'PLUS':([14,15,16,17,18,46,55,58,85,],[-51,-52,-53,-54,-55,-56,-56,69,69,]),'MINUS':([14,15,16,17,18,46,55,58,85,],[-51,-52,-53,-54,-55,-56,-56,70,70,]),'TIMES':([14,15,16,17,18,46,55,58,85,],[-51,-52,-53,-54,-55,-56,-56,71,71,]),'DIVIDE':([14,15,16,17,18,46,55,58,85,],[-51,-52,-53,-54,-55,-56,-56,72,72,]),'MODULE':([14,15,16,17,18,46,55,58,85,],[-51,-52,-53,-54,-55,-56,-56,73,73,]),'LBRACE':([14,15,16,17,18,46,62,63,89,104,105,],[-51,-52,-53,-54,-55,-56,78,78,78,78,78,]),'MUT':([19,],[42,]),'ELSE':([77,79,90,98,106,107,],[89,89,-10,-11,89,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'code_block':([0,4,78,],[2,21,91,]),'if_statement':([0,],[3,]),'code_line':([0,4,78,],[4,4,4,]),'comparison_value':([0,4,22,25,78,100,],[6,6,44,6,6,102,]),'function':([0,4,5,78,97,],[7,7,23,7,101,]),'value':([0,4,22,25,32,33,38,40,47,59,61,65,67,68,75,78,95,100,103,],[8,8,45,45,49,50,52,58,63,74,76,80,83,85,87,8,99,45,105,]),'code':([0,4,78,],[9,9,9,]),'comparison_production':([0,4,25,78,],[10,10,48,10,]),'logic_value':([0,4,78,],[11,11,11,]),'statement':([0,4,78,],[12,12,12,]),'comparison':([6,8,23,45,101,],[25,33,47,33,103,]),'logic_operator':([8,],[32,]),'arguments_production':([38,65,67,],[53,81,84,]),'aritmetic_operation_production':([40,],[56,]),'aritmetic_operation':([40,68,],[57,86,]),'aritmetic_operator':([58,85,],[68,95,]),'block_function':([62,63,89,104,105,],[77,79,96,106,107,]),'else_if_statement':([77,79,106,107,],[88,92,108,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> code_block','body',1,'p_body','sintaxis.py',17),
  ('body -> if_statement','body',1,'p_body','sintaxis.py',18),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function','if_statement',5,'p_if_statement','sintaxis.py',24),
  ('if_statement -> IF LPAREN comparison_value RPAREN block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',25),
  ('if_statement -> IF function comparison value block_function','if_statement',5,'p_if_statement','sintaxis.py',26),
  ('if_statement -> IF function comparison value block_function else_if_statement','if_statement',6,'p_if_statement','sintaxis.py',27),
  ('else_if_statement -> ELSE block_function','else_if_statement',2,'p_else_if_statement','sintaxis.py',32),
  ('else_if_statement -> ELSE IF LPAREN comparison_value RPAREN block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',33),
  ('else_if_statement -> ELSE IF function comparison value block_function else_if_statement','else_if_statement',7,'p_else_if_statement','sintaxis.py',34),
  ('block_function -> LBRACE RBRACE','block_function',2,'p_block_function','sintaxis.py',39),
  ('block_function -> LBRACE code_block RBRACE','block_function',3,'p_block_function','sintaxis.py',40),
  ('code_block -> code_line','code_block',1,'p_code_block','sintaxis.py',45),
  ('code_block -> code_line code_block','code_block',2,'p_code_block','sintaxis.py',46),
  ('code_line -> code SEMICOLON','code_line',2,'p_code_line','sintaxis.py',52),
  ('code -> function','code',1,'p_code','sintaxis.py',57),
  ('code -> comparison_production','code',1,'p_code','sintaxis.py',58),
  ('code -> value','code',1,'p_code','sintaxis.py',59),
  ('code -> logic_value','code',1,'p_code','sintaxis.py',60),
  ('code -> statement','code',1,'p_code','sintaxis.py',61),
  ('function -> ID LPAREN RPAREN','function',3,'p_function','sintaxis.py',66),
  ('function -> ID LPAREN value RPAREN','function',4,'p_function','sintaxis.py',67),
  ('function -> ID LPAREN arguments_production RPAREN','function',4,'p_function','sintaxis.py',68),
  ('function -> ID DOT ID LPAREN RPAREN','function',5,'p_function','sintaxis.py',69),
  ('function -> ID DOT ID LPAREN value RPAREN','function',6,'p_function','sintaxis.py',70),
  ('function -> ID DOT ID LPAREN arguments_production RPAREN','function',6,'p_function','sintaxis.py',71),
  ('statement -> LET ID EQUAL value','statement',4,'p_statement','sintaxis.py',77),
  ('statement -> LET MUT ID EQUAL value','statement',5,'p_statement','sintaxis.py',78),
  ('statement -> CONST ID EQUAL value','statement',4,'p_statement','sintaxis.py',79),
  ('statement -> ID EQUAL ID','statement',3,'p_statement','sintaxis.py',80),
  ('statement -> ID EQUAL aritmetic_operation_production','statement',3,'p_statement','sintaxis.py',81),
  ('arguments_production -> value','arguments_production',1,'p_arguments_production','sintaxis.py',87),
  ('arguments_production -> value COMMA arguments_production','arguments_production',3,'p_arguments_production','sintaxis.py',88),
  ('comparison_production -> comparison_value','comparison_production',1,'p_comparison_production','sintaxis.py',95),
  ('comparison_production -> comparison_value comparison comparison_production','comparison_production',3,'p_comparison_production','sintaxis.py',96),
  ('comparison_value -> value comparison value','comparison_value',3,'p_comparison_value','sintaxis.py',101),
  ('logic_value -> value logic_operator value','logic_value',3,'p_logic_value','sintaxis.py',105),
  ('aritmetic_operation_production -> aritmetic_operation','aritmetic_operation_production',1,'p_aritmetic_operation_production','sintaxis.py',110),
  ('aritmetic_operation_production -> value aritmetic_operator aritmetic_operation','aritmetic_operation_production',3,'p_aritmetic_operation_production','sintaxis.py',111),
  ('aritmetic_operation -> value aritmetic_operator value','aritmetic_operation',3,'p_aritmetic_operation','sintaxis.py',115),
  ('aritmetic_operator -> PLUS','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',119),
  ('aritmetic_operator -> MINUS','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',120),
  ('aritmetic_operator -> TIMES','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',121),
  ('aritmetic_operator -> DIVIDE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',122),
  ('aritmetic_operator -> MODULE','aritmetic_operator',1,'p_aritmetic_operator','sintaxis.py',123),
  ('comparison -> LESS_THAN','comparison',1,'p_comparison','sintaxis.py',127),
  ('comparison -> GREATER_THAN','comparison',1,'p_comparison','sintaxis.py',128),
  ('comparison -> LESS_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',129),
  ('comparison -> GREATER_THAN_EQUAL','comparison',1,'p_comparison','sintaxis.py',130),
  ('comparison -> NOT_EQUAL','comparison',1,'p_comparison','sintaxis.py',131),
  ('comparison -> EQUAL_EQUAL','comparison',1,'p_comparison','sintaxis.py',132),
  ('value -> INT','value',1,'p_value','sintaxis.py',138),
  ('value -> FLOAT','value',1,'p_value','sintaxis.py',139),
  ('value -> STRING','value',1,'p_value','sintaxis.py',140),
  ('value -> CHAR','value',1,'p_value','sintaxis.py',141),
  ('value -> BOOL','value',1,'p_value','sintaxis.py',142),
  ('value -> ID','value',1,'p_value','sintaxis.py',143),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','sintaxis.py',149),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','sintaxis.py',150),
  ('logic_operator -> NOT','logic_operator',1,'p_logic_operator','sintaxis.py',151),
]
